{"version":3,"file":"createPolylineGeometry.js","sources":["../../../../Source/Core/PolylineGeometry.js","../../../../Source/WorkersES6/createPolylineGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\r\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Color from \"./Color.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryType from \"./GeometryType.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolylinePipeline from \"./PolylinePipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nvar scratchInterpolateColorsArray = [];\r\n\r\nfunction interpolateColors(p0, p1, color0, color1, numPoints) {\r\n  var colors = scratchInterpolateColorsArray;\r\n  colors.length = numPoints;\r\n  var i;\r\n\r\n  var r0 = color0.red;\r\n  var g0 = color0.green;\r\n  var b0 = color0.blue;\r\n  var a0 = color0.alpha;\r\n\r\n  var r1 = color1.red;\r\n  var g1 = color1.green;\r\n  var b1 = color1.blue;\r\n  var a1 = color1.alpha;\r\n\r\n  if (Color.equals(color0, color1)) {\r\n    for (i = 0; i < numPoints; i++) {\r\n      colors[i] = Color.clone(color0);\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  var redPerVertex = (r1 - r0) / numPoints;\r\n  var greenPerVertex = (g1 - g0) / numPoints;\r\n  var bluePerVertex = (b1 - b0) / numPoints;\r\n  var alphaPerVertex = (a1 - a0) / numPoints;\r\n\r\n  for (i = 0; i < numPoints; i++) {\r\n    colors[i] = new Color(\r\n      r0 + i * redPerVertex,\r\n      g0 + i * greenPerVertex,\r\n      b0 + i * bluePerVertex,\r\n      a0 + i * alphaPerVertex\r\n    );\r\n  }\r\n\r\n  return colors;\r\n}\r\n\r\n/**\r\n * A description of a polyline modeled as a line strip; the first two positions define a line segment,\r\n * and each additional position defines a line segment from the previous position. The polyline is capable of\r\n * displaying with a material.\r\n *\r\n * @alias PolylineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of {@link Cartesian3} defining the positions in the polyline as a line strip.\r\n * @param {Number} [options.width=1.0] The width in pixels.\r\n * @param {Color[]} [options.colors] An Array of {@link Color} defining the per vertex or per segment colors.\r\n * @param {Boolean} [options.colorsPerVertex=false] A boolean that determines whether the colors will be flat across each segment of the line or interpolated across the vertices.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polyline segments must follow.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude if options.arcType is not ArcType.NONE. Determines the number of positions in the buffer.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n *\r\n * @exception {DeveloperError} At least two positions are required.\r\n * @exception {DeveloperError} width must be greater than or equal to one.\r\n * @exception {DeveloperError} colors has an invalid length.\r\n *\r\n * @see PolylineGeometry#createGeometry\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polyline.html|Cesium Sandcastle Polyline Demo}\r\n *\r\n * @example\r\n * // A polyline with two connected line segments\r\n * var polyline = new Cesium.PolylineGeometry({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     0.0, 0.0,\r\n *     5.0, 0.0,\r\n *     5.0, 5.0\r\n *   ]),\r\n *   width : 10.0\r\n * });\r\n * var geometry = Cesium.PolylineGeometry.createGeometry(polyline);\r\n */\r\nfunction PolylineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var positions = options.positions;\r\n  var colors = options.colors;\r\n  var width = defaultValue(options.width, 1.0);\r\n  var colorsPerVertex = defaultValue(options.colorsPerVertex, false);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions) || positions.length < 2) {\r\n    throw new DeveloperError(\"At least two positions are required.\");\r\n  }\r\n  if (typeof width !== \"number\") {\r\n    throw new DeveloperError(\"width must be a number\");\r\n  }\r\n  if (\r\n    defined(colors) &&\r\n    ((colorsPerVertex && colors.length < positions.length) ||\r\n      (!colorsPerVertex && colors.length < positions.length - 1))\r\n  ) {\r\n    throw new DeveloperError(\"colors has an invalid length.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._positions = positions;\r\n  this._colors = colors;\r\n  this._width = width;\r\n  this._colorsPerVertex = colorsPerVertex;\r\n  this._vertexFormat = VertexFormat.clone(\r\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\r\n  );\r\n\r\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._workerName = \"createPolylineGeometry\";\r\n\r\n  var numComponents = 1 + positions.length * Cartesian3.packedLength;\r\n  numComponents += defined(colors) ? 1 + colors.length * Color.packedLength : 1;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    numComponents + Ellipsoid.packedLength + VertexFormat.packedLength + 4;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolylineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolylineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var i;\r\n\r\n  var positions = value._positions;\r\n  var length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  var colors = value._colors;\r\n  length = defined(colors) ? colors.length : 0.0;\r\n  array[startingIndex++] = length;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n    Color.pack(colors[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._width;\r\n  array[startingIndex++] = value._colorsPerVertex ? 1.0 : 0.0;\r\n  array[startingIndex++] = value._arcType;\r\n  array[startingIndex] = value._granularity;\r\n\r\n  return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n  positions: undefined,\r\n  colors: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  vertexFormat: scratchVertexFormat,\r\n  width: undefined,\r\n  colorsPerVertex: undefined,\r\n  arcType: undefined,\r\n  granularity: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolylineGeometry} [result] The object into which to store the result.\r\n * @returns {PolylineGeometry} The modified result parameter or a new PolylineGeometry instance if one was not provided.\r\n */\r\nPolylineGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var i;\r\n\r\n  var length = array[startingIndex++];\r\n  var positions = new Array(length);\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  length = array[startingIndex++];\r\n  var colors = length > 0 ? new Array(length) : undefined;\r\n\r\n  for (i = 0; i < length; ++i, startingIndex += Color.packedLength) {\r\n    colors[i] = Color.unpack(array, startingIndex);\r\n  }\r\n\r\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  var vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  var width = array[startingIndex++];\r\n  var colorsPerVertex = array[startingIndex++] === 1.0;\r\n  var arcType = array[startingIndex++];\r\n  var granularity = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.positions = positions;\r\n    scratchOptions.colors = colors;\r\n    scratchOptions.width = width;\r\n    scratchOptions.colorsPerVertex = colorsPerVertex;\r\n    scratchOptions.arcType = arcType;\r\n    scratchOptions.granularity = granularity;\r\n    return new PolylineGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._colors = colors;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._width = width;\r\n  result._colorsPerVertex = colorsPerVertex;\r\n  result._arcType = arcType;\r\n  result._granularity = granularity;\r\n\r\n  return result;\r\n};\r\n\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchPosition = new Cartesian3();\r\nvar scratchPrevPosition = new Cartesian3();\r\nvar scratchNextPosition = new Cartesian3();\r\n\r\n/**\r\n * Computes the geometric representation of a polyline, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolylineGeometry} polylineGeometry A description of the polyline.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolylineGeometry.createGeometry = function (polylineGeometry) {\r\n  var width = polylineGeometry._width;\r\n  var vertexFormat = polylineGeometry._vertexFormat;\r\n  var colors = polylineGeometry._colors;\r\n  var colorsPerVertex = polylineGeometry._colorsPerVertex;\r\n  var arcType = polylineGeometry._arcType;\r\n  var granularity = polylineGeometry._granularity;\r\n  var ellipsoid = polylineGeometry._ellipsoid;\r\n\r\n  var i;\r\n  var j;\r\n  var k;\r\n\r\n  var positions = arrayRemoveDuplicates(\r\n    polylineGeometry._positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n  var positionsLength = positions.length;\r\n\r\n  // A width of a pixel or less is not a valid geometry, but in order to support external data\r\n  // that may have errors we treat this as an empty geometry.\r\n  if (positionsLength < 2 || width <= 0.0) {\r\n    return undefined;\r\n  }\r\n\r\n  if (arcType === ArcType.GEODESIC || arcType === ArcType.RHUMB) {\r\n    var subdivisionSize;\r\n    var numberOfPointsFunction;\r\n    if (arcType === ArcType.GEODESIC) {\r\n      subdivisionSize = CesiumMath.chordLength(\r\n        granularity,\r\n        ellipsoid.maximumRadius\r\n      );\r\n      numberOfPointsFunction = PolylinePipeline.numberOfPoints;\r\n    } else {\r\n      subdivisionSize = granularity;\r\n      numberOfPointsFunction = PolylinePipeline.numberOfPointsRhumbLine;\r\n    }\r\n\r\n    var heights = PolylinePipeline.extractHeights(positions, ellipsoid);\r\n\r\n    if (defined(colors)) {\r\n      var colorLength = 1;\r\n      for (i = 0; i < positionsLength - 1; ++i) {\r\n        colorLength += numberOfPointsFunction(\r\n          positions[i],\r\n          positions[i + 1],\r\n          subdivisionSize\r\n        );\r\n      }\r\n\r\n      var newColors = new Array(colorLength);\r\n      var newColorIndex = 0;\r\n\r\n      for (i = 0; i < positionsLength - 1; ++i) {\r\n        var p0 = positions[i];\r\n        var p1 = positions[i + 1];\r\n        var c0 = colors[i];\r\n\r\n        var numColors = numberOfPointsFunction(p0, p1, subdivisionSize);\r\n        if (colorsPerVertex && i < colorLength) {\r\n          var c1 = colors[i + 1];\r\n          var interpolatedColors = interpolateColors(p0, p1, c0, c1, numColors);\r\n          var interpolatedColorsLength = interpolatedColors.length;\r\n          for (j = 0; j < interpolatedColorsLength; ++j) {\r\n            newColors[newColorIndex++] = interpolatedColors[j];\r\n          }\r\n        } else {\r\n          for (j = 0; j < numColors; ++j) {\r\n            newColors[newColorIndex++] = Color.clone(c0);\r\n          }\r\n        }\r\n      }\r\n\r\n      newColors[newColorIndex] = Color.clone(colors[colors.length - 1]);\r\n      colors = newColors;\r\n\r\n      scratchInterpolateColorsArray.length = 0;\r\n    }\r\n\r\n    if (arcType === ArcType.GEODESIC) {\r\n      positions = PolylinePipeline.generateCartesianArc({\r\n        positions: positions,\r\n        minDistance: subdivisionSize,\r\n        ellipsoid: ellipsoid,\r\n        height: heights,\r\n      });\r\n    } else {\r\n      positions = PolylinePipeline.generateCartesianRhumbArc({\r\n        positions: positions,\r\n        granularity: subdivisionSize,\r\n        ellipsoid: ellipsoid,\r\n        height: heights,\r\n      });\r\n    }\r\n  }\r\n\r\n  positionsLength = positions.length;\r\n  var size = positionsLength * 4.0 - 4.0;\r\n\r\n  var finalPositions = new Float64Array(size * 3);\r\n  var prevPositions = new Float64Array(size * 3);\r\n  var nextPositions = new Float64Array(size * 3);\r\n  var expandAndWidth = new Float32Array(size * 2);\r\n  var st = vertexFormat.st ? new Float32Array(size * 2) : undefined;\r\n  var finalColors = defined(colors) ? new Uint8Array(size * 4) : undefined;\r\n\r\n  var positionIndex = 0;\r\n  var expandAndWidthIndex = 0;\r\n  var stIndex = 0;\r\n  var colorIndex = 0;\r\n  var position;\r\n\r\n  for (j = 0; j < positionsLength; ++j) {\r\n    if (j === 0) {\r\n      position = scratchCartesian3;\r\n      Cartesian3.subtract(positions[0], positions[1], position);\r\n      Cartesian3.add(positions[0], position, position);\r\n    } else {\r\n      position = positions[j - 1];\r\n    }\r\n\r\n    Cartesian3.clone(position, scratchPrevPosition);\r\n    Cartesian3.clone(positions[j], scratchPosition);\r\n\r\n    if (j === positionsLength - 1) {\r\n      position = scratchCartesian3;\r\n      Cartesian3.subtract(\r\n        positions[positionsLength - 1],\r\n        positions[positionsLength - 2],\r\n        position\r\n      );\r\n      Cartesian3.add(positions[positionsLength - 1], position, position);\r\n    } else {\r\n      position = positions[j + 1];\r\n    }\r\n\r\n    Cartesian3.clone(position, scratchNextPosition);\r\n\r\n    var color0, color1;\r\n    if (defined(finalColors)) {\r\n      if (j !== 0 && !colorsPerVertex) {\r\n        color0 = colors[j - 1];\r\n      } else {\r\n        color0 = colors[j];\r\n      }\r\n\r\n      if (j !== positionsLength - 1) {\r\n        color1 = colors[j];\r\n      }\r\n    }\r\n\r\n    var startK = j === 0 ? 2 : 0;\r\n    var endK = j === positionsLength - 1 ? 2 : 4;\r\n\r\n    for (k = startK; k < endK; ++k) {\r\n      Cartesian3.pack(scratchPosition, finalPositions, positionIndex);\r\n      Cartesian3.pack(scratchPrevPosition, prevPositions, positionIndex);\r\n      Cartesian3.pack(scratchNextPosition, nextPositions, positionIndex);\r\n      positionIndex += 3;\r\n\r\n      var direction = k - 2 < 0 ? -1.0 : 1.0;\r\n      expandAndWidth[expandAndWidthIndex++] = 2 * (k % 2) - 1; // expand direction\r\n      expandAndWidth[expandAndWidthIndex++] = direction * width;\r\n\r\n      if (vertexFormat.st) {\r\n        st[stIndex++] = j / (positionsLength - 1);\r\n        st[stIndex++] = Math.max(expandAndWidth[expandAndWidthIndex - 2], 0.0);\r\n      }\r\n\r\n      if (defined(finalColors)) {\r\n        var color = k < 2 ? color0 : color1;\r\n\r\n        finalColors[colorIndex++] = Color.floatToByte(color.red);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.green);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.blue);\r\n        finalColors[colorIndex++] = Color.floatToByte(color.alpha);\r\n      }\r\n    }\r\n  }\r\n\r\n  var attributes = new GeometryAttributes();\r\n\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: finalPositions,\r\n  });\r\n\r\n  attributes.prevPosition = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: prevPositions,\r\n  });\r\n\r\n  attributes.nextPosition = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: nextPositions,\r\n  });\r\n\r\n  attributes.expandAndWidth = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.FLOAT,\r\n    componentsPerAttribute: 2,\r\n    values: expandAndWidth,\r\n  });\r\n\r\n  if (vertexFormat.st) {\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: st,\r\n    });\r\n  }\r\n\r\n  if (defined(finalColors)) {\r\n    attributes.color = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 4,\r\n      values: finalColors,\r\n      normalize: true,\r\n    });\r\n  }\r\n\r\n  var indices = IndexDatatype.createTypedArray(size, positionsLength * 6 - 6);\r\n  var index = 0;\r\n  var indicesIndex = 0;\r\n  var length = positionsLength - 1.0;\r\n  for (j = 0; j < length; ++j) {\r\n    indices[indicesIndex++] = index;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 1;\r\n\r\n    indices[indicesIndex++] = index + 1;\r\n    indices[indicesIndex++] = index + 2;\r\n    indices[indicesIndex++] = index + 3;\r\n\r\n    index += 4;\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: BoundingSphere.fromPoints(positions),\r\n    geometryType: GeometryType.POLYLINES,\r\n  });\r\n};\r\nexport default PolylineGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport PolylineGeometry from \"../Core/PolylineGeometry.js\";\r\n\r\nfunction createPolylineGeometry(polylineGeometry, offset) {\r\n  if (defined(offset)) {\r\n    polylineGeometry = PolylineGeometry.unpack(polylineGeometry, offset);\r\n  }\r\n  polylineGeometry._ellipsoid = Ellipsoid.clone(polylineGeometry._ellipsoid);\r\n  return PolylineGeometry.createGeometry(polylineGeometry);\r\n}\r\nexport default createPolylineGeometry;\r\n"],"names":["Color","defaultValue","defined","DeveloperError","VertexFormat","ArcType","CesiumMath","Ellipsoid","Cartesian3","arrayRemoveDuplicates","PolylinePipeline","GeometryAttributes","GeometryAttribute","ComponentDatatype","IndexDatatype","Geometry","PrimitiveType","BoundingSphere","GeometryType"],"mappings":"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"}