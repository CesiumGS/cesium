{"version":3,"file":"createVectorTileClampedPolylines.js","sources":["../../../../Source/WorkersES6/createVectorTileClampedPolylines.js"],"sourcesContent":["import AttributeCompression from \"../Core/AttributeCompression.js\";\r\nimport Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport Cartographic from \"../Core/Cartographic.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\r\nimport CesiumMath from \"../Core/Math.js\";\r\nimport Rectangle from \"../Core/Rectangle.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\n\r\nvar MAX_SHORT = 32767;\r\nvar MITER_BREAK = Math.cos(CesiumMath.toRadians(150.0));\r\n\r\nvar scratchBVCartographic = new Cartographic();\r\nvar scratchEncodedPosition = new Cartesian3();\r\n\r\nfunction decodePositionsToRtc(\r\n  uBuffer,\r\n  vBuffer,\r\n  heightBuffer,\r\n  rectangle,\r\n  minimumHeight,\r\n  maximumHeight,\r\n  ellipsoid,\r\n  center\r\n) {\r\n  var positionsLength = uBuffer.length;\r\n  var decodedPositions = new Float32Array(positionsLength * 3);\r\n  for (var i = 0; i < positionsLength; ++i) {\r\n    var u = uBuffer[i];\r\n    var v = vBuffer[i];\r\n    var h = heightBuffer[i];\r\n\r\n    var lon = CesiumMath.lerp(rectangle.west, rectangle.east, u / MAX_SHORT);\r\n    var lat = CesiumMath.lerp(rectangle.south, rectangle.north, v / MAX_SHORT);\r\n    var alt = CesiumMath.lerp(minimumHeight, maximumHeight, h / MAX_SHORT);\r\n\r\n    var cartographic = Cartographic.fromRadians(\r\n      lon,\r\n      lat,\r\n      alt,\r\n      scratchBVCartographic\r\n    );\r\n    var decodedPosition = ellipsoid.cartographicToCartesian(\r\n      cartographic,\r\n      scratchEncodedPosition\r\n    );\r\n    var rtc = Cartesian3.subtract(\r\n      decodedPosition,\r\n      center,\r\n      scratchEncodedPosition\r\n    );\r\n    Cartesian3.pack(rtc, decodedPositions, i * 3);\r\n  }\r\n  return decodedPositions;\r\n}\r\n\r\nvar previousCompressedCartographicScratch = new Cartographic();\r\nvar currentCompressedCartographicScratch = new Cartographic();\r\nfunction removeDuplicates(uBuffer, vBuffer, heightBuffer, counts) {\r\n  var countsLength = counts.length;\r\n  var positionsLength = uBuffer.length;\r\n  var markRemoval = new Uint8Array(positionsLength);\r\n  var previous = previousCompressedCartographicScratch;\r\n  var current = currentCompressedCartographicScratch;\r\n  var offset = 0;\r\n  for (var i = 0; i < countsLength; i++) {\r\n    var count = counts[i];\r\n    var updatedCount = count;\r\n    for (var j = 1; j < count; j++) {\r\n      var index = offset + j;\r\n      var previousIndex = index - 1;\r\n      current.longitude = uBuffer[index];\r\n      current.latitude = vBuffer[index];\r\n      previous.longitude = uBuffer[previousIndex];\r\n      previous.latitude = vBuffer[previousIndex];\r\n\r\n      if (Cartographic.equals(current, previous)) {\r\n        updatedCount--;\r\n        markRemoval[previousIndex] = 1;\r\n      }\r\n    }\r\n    counts[i] = updatedCount;\r\n    offset += count;\r\n  }\r\n\r\n  var nextAvailableIndex = 0;\r\n  for (var k = 0; k < positionsLength; k++) {\r\n    if (markRemoval[k] !== 1) {\r\n      uBuffer[nextAvailableIndex] = uBuffer[k];\r\n      vBuffer[nextAvailableIndex] = vBuffer[k];\r\n      heightBuffer[nextAvailableIndex] = heightBuffer[k];\r\n      nextAvailableIndex++;\r\n    }\r\n  }\r\n}\r\n\r\nfunction VertexAttributesAndIndices(volumesCount) {\r\n  var vertexCount = volumesCount * 8;\r\n  var vec3Floats = vertexCount * 3;\r\n  var vec4Floats = vertexCount * 4;\r\n  this.startEllipsoidNormals = new Float32Array(vec3Floats);\r\n  this.endEllipsoidNormals = new Float32Array(vec3Floats);\r\n  this.startPositionAndHeights = new Float32Array(vec4Floats);\r\n  this.startFaceNormalAndVertexCornerIds = new Float32Array(vec4Floats);\r\n  this.endPositionAndHeights = new Float32Array(vec4Floats);\r\n  this.endFaceNormalAndHalfWidths = new Float32Array(vec4Floats);\r\n  this.vertexBatchIds = new Uint16Array(vertexCount);\r\n\r\n  this.indices = IndexDatatype.createTypedArray(vertexCount, 36 * volumesCount);\r\n\r\n  this.vec3Offset = 0;\r\n  this.vec4Offset = 0;\r\n  this.batchIdOffset = 0;\r\n  this.indexOffset = 0;\r\n\r\n  this.volumeStartIndex = 0;\r\n}\r\n\r\nvar towardCurrScratch = new Cartesian3();\r\nvar towardNextScratch = new Cartesian3();\r\nfunction computeMiteredNormal(\r\n  previousPosition,\r\n  position,\r\n  nextPosition,\r\n  ellipsoidSurfaceNormal,\r\n  result\r\n) {\r\n  var towardNext = Cartesian3.subtract(\r\n    nextPosition,\r\n    position,\r\n    towardNextScratch\r\n  );\r\n  var towardCurr = Cartesian3.subtract(\r\n    position,\r\n    previousPosition,\r\n    towardCurrScratch\r\n  );\r\n  Cartesian3.normalize(towardNext, towardNext);\r\n  Cartesian3.normalize(towardCurr, towardCurr);\r\n\r\n  if (Cartesian3.dot(towardNext, towardCurr) < MITER_BREAK) {\r\n    towardCurr = Cartesian3.multiplyByScalar(\r\n      towardCurr,\r\n      -1.0,\r\n      towardCurrScratch\r\n    );\r\n  }\r\n\r\n  Cartesian3.add(towardNext, towardCurr, result);\r\n  if (Cartesian3.equals(result, Cartesian3.ZERO)) {\r\n    result = Cartesian3.subtract(previousPosition, position);\r\n  }\r\n\r\n  // Make sure the normal is orthogonal to the ellipsoid surface normal\r\n  Cartesian3.cross(result, ellipsoidSurfaceNormal, result);\r\n  Cartesian3.cross(ellipsoidSurfaceNormal, result, result);\r\n  Cartesian3.normalize(result, result);\r\n  return result;\r\n}\r\n\r\n// Winding order is reversed so each segment's volume is inside-out\r\n//          3-----------7\r\n//         /|   left   /|\r\n//        / | 1       / |\r\n//       2-----------6  5  end\r\n//       | /         | /\r\n// start |/  right   |/\r\n//       0-----------4\r\n//\r\nvar REFERENCE_INDICES = [\r\n  0,\r\n  2,\r\n  6,\r\n  0,\r\n  6,\r\n  4, // right\r\n  0,\r\n  1,\r\n  3,\r\n  0,\r\n  3,\r\n  2, // start face\r\n  0,\r\n  4,\r\n  5,\r\n  0,\r\n  5,\r\n  1, // bottom\r\n  5,\r\n  3,\r\n  1,\r\n  5,\r\n  7,\r\n  3, // left\r\n  7,\r\n  5,\r\n  4,\r\n  7,\r\n  4,\r\n  6, // end face\r\n  7,\r\n  6,\r\n  2,\r\n  7,\r\n  2,\r\n  3, // top\r\n];\r\nvar REFERENCE_INDICES_LENGTH = REFERENCE_INDICES.length;\r\n\r\nvar positionScratch = new Cartesian3();\r\nvar scratchStartEllipsoidNormal = new Cartesian3();\r\nvar scratchStartFaceNormal = new Cartesian3();\r\nvar scratchEndEllipsoidNormal = new Cartesian3();\r\nvar scratchEndFaceNormal = new Cartesian3();\r\nVertexAttributesAndIndices.prototype.addVolume = function (\r\n  preStartRTC,\r\n  startRTC,\r\n  endRTC,\r\n  postEndRTC,\r\n  startHeight,\r\n  endHeight,\r\n  halfWidth,\r\n  batchId,\r\n  center,\r\n  ellipsoid\r\n) {\r\n  var position = Cartesian3.add(startRTC, center, positionScratch);\r\n  var startEllipsoidNormal = ellipsoid.geodeticSurfaceNormal(\r\n    position,\r\n    scratchStartEllipsoidNormal\r\n  );\r\n  position = Cartesian3.add(endRTC, center, positionScratch);\r\n  var endEllipsoidNormal = ellipsoid.geodeticSurfaceNormal(\r\n    position,\r\n    scratchEndEllipsoidNormal\r\n  );\r\n\r\n  var startFaceNormal = computeMiteredNormal(\r\n    preStartRTC,\r\n    startRTC,\r\n    endRTC,\r\n    startEllipsoidNormal,\r\n    scratchStartFaceNormal\r\n  );\r\n  var endFaceNormal = computeMiteredNormal(\r\n    postEndRTC,\r\n    endRTC,\r\n    startRTC,\r\n    endEllipsoidNormal,\r\n    scratchEndFaceNormal\r\n  );\r\n\r\n  var startEllipsoidNormals = this.startEllipsoidNormals;\r\n  var endEllipsoidNormals = this.endEllipsoidNormals;\r\n  var startPositionAndHeights = this.startPositionAndHeights;\r\n  var startFaceNormalAndVertexCornerIds = this\r\n    .startFaceNormalAndVertexCornerIds;\r\n  var endPositionAndHeights = this.endPositionAndHeights;\r\n  var endFaceNormalAndHalfWidths = this.endFaceNormalAndHalfWidths;\r\n  var vertexBatchIds = this.vertexBatchIds;\r\n\r\n  var batchIdOffset = this.batchIdOffset;\r\n  var vec3Offset = this.vec3Offset;\r\n  var vec4Offset = this.vec4Offset;\r\n\r\n  var i;\r\n  for (i = 0; i < 8; i++) {\r\n    Cartesian3.pack(startEllipsoidNormal, startEllipsoidNormals, vec3Offset);\r\n    Cartesian3.pack(endEllipsoidNormal, endEllipsoidNormals, vec3Offset);\r\n\r\n    Cartesian3.pack(startRTC, startPositionAndHeights, vec4Offset);\r\n    startPositionAndHeights[vec4Offset + 3] = startHeight;\r\n\r\n    Cartesian3.pack(endRTC, endPositionAndHeights, vec4Offset);\r\n    endPositionAndHeights[vec4Offset + 3] = endHeight;\r\n\r\n    Cartesian3.pack(\r\n      startFaceNormal,\r\n      startFaceNormalAndVertexCornerIds,\r\n      vec4Offset\r\n    );\r\n    startFaceNormalAndVertexCornerIds[vec4Offset + 3] = i;\r\n\r\n    Cartesian3.pack(endFaceNormal, endFaceNormalAndHalfWidths, vec4Offset);\r\n    endFaceNormalAndHalfWidths[vec4Offset + 3] = halfWidth;\r\n\r\n    vertexBatchIds[batchIdOffset++] = batchId;\r\n\r\n    vec3Offset += 3;\r\n    vec4Offset += 4;\r\n  }\r\n\r\n  this.batchIdOffset = batchIdOffset;\r\n  this.vec3Offset = vec3Offset;\r\n  this.vec4Offset = vec4Offset;\r\n  var indices = this.indices;\r\n  var volumeStartIndex = this.volumeStartIndex;\r\n\r\n  var indexOffset = this.indexOffset;\r\n  for (i = 0; i < REFERENCE_INDICES_LENGTH; i++) {\r\n    indices[indexOffset + i] = REFERENCE_INDICES[i] + volumeStartIndex;\r\n  }\r\n\r\n  this.volumeStartIndex += 8;\r\n  this.indexOffset += REFERENCE_INDICES_LENGTH;\r\n};\r\n\r\nvar scratchRectangle = new Rectangle();\r\nvar scratchEllipsoid = new Ellipsoid();\r\nvar scratchCenter = new Cartesian3();\r\n\r\nvar scratchPrev = new Cartesian3();\r\nvar scratchP0 = new Cartesian3();\r\nvar scratchP1 = new Cartesian3();\r\nvar scratchNext = new Cartesian3();\r\nfunction createVectorTileClampedPolylines(parameters, transferableObjects) {\r\n  var encodedPositions = new Uint16Array(parameters.positions);\r\n  var widths = new Uint16Array(parameters.widths);\r\n  var counts = new Uint32Array(parameters.counts);\r\n  var batchIds = new Uint16Array(parameters.batchIds);\r\n\r\n  // Unpack tile decoding parameters\r\n  var rectangle = scratchRectangle;\r\n  var ellipsoid = scratchEllipsoid;\r\n  var center = scratchCenter;\r\n  var packedBuffer = new Float64Array(parameters.packedBuffer);\r\n\r\n  var offset = 0;\r\n  var minimumHeight = packedBuffer[offset++];\r\n  var maximumHeight = packedBuffer[offset++];\r\n\r\n  Rectangle.unpack(packedBuffer, offset, rectangle);\r\n  offset += Rectangle.packedLength;\r\n\r\n  Ellipsoid.unpack(packedBuffer, offset, ellipsoid);\r\n  offset += Ellipsoid.packedLength;\r\n\r\n  Cartesian3.unpack(packedBuffer, offset, center);\r\n\r\n  var i;\r\n\r\n  // Unpack positions and generate volumes\r\n  var positionsLength = encodedPositions.length / 3;\r\n  var uBuffer = encodedPositions.subarray(0, positionsLength);\r\n  var vBuffer = encodedPositions.subarray(positionsLength, 2 * positionsLength);\r\n  var heightBuffer = encodedPositions.subarray(\r\n    2 * positionsLength,\r\n    3 * positionsLength\r\n  );\r\n  AttributeCompression.zigZagDeltaDecode(uBuffer, vBuffer, heightBuffer);\r\n\r\n  removeDuplicates(uBuffer, vBuffer, heightBuffer, counts);\r\n\r\n  // Figure out how many volumes and how many vertices there will be.\r\n  var countsLength = counts.length;\r\n  var volumesCount = 0;\r\n  for (i = 0; i < countsLength; i++) {\r\n    var polylinePositionCount = counts[i];\r\n    volumesCount += polylinePositionCount - 1;\r\n  }\r\n\r\n  var attribsAndIndices = new VertexAttributesAndIndices(volumesCount);\r\n\r\n  var positionsRTC = decodePositionsToRtc(\r\n    uBuffer,\r\n    vBuffer,\r\n    heightBuffer,\r\n    rectangle,\r\n    minimumHeight,\r\n    maximumHeight,\r\n    ellipsoid,\r\n    center\r\n  );\r\n\r\n  var currentPositionIndex = 0;\r\n  var currentHeightIndex = 0;\r\n  for (i = 0; i < countsLength; i++) {\r\n    var polylineVolumeCount = counts[i] - 1;\r\n    var halfWidth = widths[i] * 0.5;\r\n    var batchId = batchIds[i];\r\n    var volumeFirstPositionIndex = currentPositionIndex;\r\n    for (var j = 0; j < polylineVolumeCount; j++) {\r\n      var volumeStart = Cartesian3.unpack(\r\n        positionsRTC,\r\n        currentPositionIndex,\r\n        scratchP0\r\n      );\r\n      var volumeEnd = Cartesian3.unpack(\r\n        positionsRTC,\r\n        currentPositionIndex + 3,\r\n        scratchP1\r\n      );\r\n\r\n      var startHeight = heightBuffer[currentHeightIndex];\r\n      var endHeight = heightBuffer[currentHeightIndex + 1];\r\n      startHeight = CesiumMath.lerp(\r\n        minimumHeight,\r\n        maximumHeight,\r\n        startHeight / MAX_SHORT\r\n      );\r\n      endHeight = CesiumMath.lerp(\r\n        minimumHeight,\r\n        maximumHeight,\r\n        endHeight / MAX_SHORT\r\n      );\r\n\r\n      currentHeightIndex++;\r\n\r\n      var preStart = scratchPrev;\r\n      var postEnd = scratchNext;\r\n      if (j === 0) {\r\n        // Check if this volume is like a loop\r\n        var finalPositionIndex =\r\n          volumeFirstPositionIndex + polylineVolumeCount * 3;\r\n        var finalPosition = Cartesian3.unpack(\r\n          positionsRTC,\r\n          finalPositionIndex,\r\n          scratchPrev\r\n        );\r\n        if (Cartesian3.equals(finalPosition, volumeStart)) {\r\n          Cartesian3.unpack(positionsRTC, finalPositionIndex - 3, preStart);\r\n        } else {\r\n          var offsetPastStart = Cartesian3.subtract(\r\n            volumeStart,\r\n            volumeEnd,\r\n            scratchPrev\r\n          );\r\n          preStart = Cartesian3.add(offsetPastStart, volumeStart, scratchPrev);\r\n        }\r\n      } else {\r\n        Cartesian3.unpack(positionsRTC, currentPositionIndex - 3, preStart);\r\n      }\r\n\r\n      if (j === polylineVolumeCount - 1) {\r\n        // Check if this volume is like a loop\r\n        var firstPosition = Cartesian3.unpack(\r\n          positionsRTC,\r\n          volumeFirstPositionIndex,\r\n          scratchNext\r\n        );\r\n        if (Cartesian3.equals(firstPosition, volumeEnd)) {\r\n          Cartesian3.unpack(\r\n            positionsRTC,\r\n            volumeFirstPositionIndex + 3,\r\n            postEnd\r\n          );\r\n        } else {\r\n          var offsetPastEnd = Cartesian3.subtract(\r\n            volumeEnd,\r\n            volumeStart,\r\n            scratchNext\r\n          );\r\n          postEnd = Cartesian3.add(offsetPastEnd, volumeEnd, scratchNext);\r\n        }\r\n      } else {\r\n        Cartesian3.unpack(positionsRTC, currentPositionIndex + 6, postEnd);\r\n      }\r\n\r\n      attribsAndIndices.addVolume(\r\n        preStart,\r\n        volumeStart,\r\n        volumeEnd,\r\n        postEnd,\r\n        startHeight,\r\n        endHeight,\r\n        halfWidth,\r\n        batchId,\r\n        center,\r\n        ellipsoid\r\n      );\r\n\r\n      currentPositionIndex += 3;\r\n    }\r\n    currentPositionIndex += 3;\r\n    currentHeightIndex++;\r\n  }\r\n\r\n  var indices = attribsAndIndices.indices;\r\n\r\n  transferableObjects.push(attribsAndIndices.startEllipsoidNormals.buffer);\r\n  transferableObjects.push(attribsAndIndices.endEllipsoidNormals.buffer);\r\n  transferableObjects.push(attribsAndIndices.startPositionAndHeights.buffer);\r\n  transferableObjects.push(\r\n    attribsAndIndices.startFaceNormalAndVertexCornerIds.buffer\r\n  );\r\n  transferableObjects.push(attribsAndIndices.endPositionAndHeights.buffer);\r\n  transferableObjects.push(attribsAndIndices.endFaceNormalAndHalfWidths.buffer);\r\n  transferableObjects.push(attribsAndIndices.vertexBatchIds.buffer);\r\n  transferableObjects.push(indices.buffer);\r\n\r\n  return {\r\n    indexDatatype:\r\n      indices.BYTES_PER_ELEMENT === 2\r\n        ? IndexDatatype.UNSIGNED_SHORT\r\n        : IndexDatatype.UNSIGNED_INT,\r\n    startEllipsoidNormals: attribsAndIndices.startEllipsoidNormals.buffer,\r\n    endEllipsoidNormals: attribsAndIndices.endEllipsoidNormals.buffer,\r\n    startPositionAndHeights: attribsAndIndices.startPositionAndHeights.buffer,\r\n    startFaceNormalAndVertexCornerIds:\r\n      attribsAndIndices.startFaceNormalAndVertexCornerIds.buffer,\r\n    endPositionAndHeights: attribsAndIndices.endPositionAndHeights.buffer,\r\n    endFaceNormalAndHalfWidths:\r\n      attribsAndIndices.endFaceNormalAndHalfWidths.buffer,\r\n    vertexBatchIds: attribsAndIndices.vertexBatchIds.buffer,\r\n    indices: indices.buffer,\r\n  };\r\n}\r\nexport default createTaskProcessorWorker(createVectorTileClampedPolylines);\r\n"],"names":["CesiumMath","Cartographic","Cartesian3","IndexDatatype","Rectangle","Ellipsoid","AttributeCompression"],"mappings":"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"}