{"version":3,"file":"createCircleGeometry.js","sources":["../../../../Source/Core/CircleGeometry.js","../../../../Source/WorkersES6/createCircleGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport EllipseGeometry from \"./EllipseGeometry.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\n/**\r\n * A description of a circle on the ellipsoid. Circle geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias CircleGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n * @param {Number} options.radius The radius in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n *\r\n * @exception {DeveloperError} radius must be greater than zero.\r\n * @exception {DeveloperError} granularity must be greater than zero.\r\n *\r\n * @see CircleGeometry.createGeometry\r\n * @see Packable\r\n *\r\n * @example\r\n * // Create a circle.\r\n * var circle = new Cesium.CircleGeometry({\r\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n *   radius : 100000.0\r\n * });\r\n * var geometry = Cesium.CircleGeometry.createGeometry(circle);\r\n */\r\nfunction CircleGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var radius = options.radius;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"radius\", radius);\r\n  //>>includeEnd('debug');\r\n\r\n  var ellipseGeometryOptions = {\r\n    center: options.center,\r\n    semiMajorAxis: radius,\r\n    semiMinorAxis: radius,\r\n    ellipsoid: options.ellipsoid,\r\n    height: options.height,\r\n    extrudedHeight: options.extrudedHeight,\r\n    granularity: options.granularity,\r\n    vertexFormat: options.vertexFormat,\r\n    stRotation: options.stRotation,\r\n    shadowVolume: options.shadowVolume,\r\n  };\r\n  this._ellipseGeometry = new EllipseGeometry(ellipseGeometryOptions);\r\n  this._workerName = \"createCircleGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCircleGeometry.packedLength = EllipseGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CircleGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCircleGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  //>>includeEnd('debug');\r\n  return EllipseGeometry.pack(value._ellipseGeometry, array, startingIndex);\r\n};\r\n\r\nvar scratchEllipseGeometry = new EllipseGeometry({\r\n  center: new Cartesian3(),\r\n  semiMajorAxis: 1.0,\r\n  semiMinorAxis: 1.0,\r\n});\r\nvar scratchOptions = {\r\n  center: new Cartesian3(),\r\n  radius: undefined,\r\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n  height: undefined,\r\n  extrudedHeight: undefined,\r\n  granularity: undefined,\r\n  vertexFormat: new VertexFormat(),\r\n  stRotation: undefined,\r\n  semiMajorAxis: undefined,\r\n  semiMinorAxis: undefined,\r\n  shadowVolume: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CircleGeometry} [result] The object into which to store the result.\r\n * @returns {CircleGeometry} The modified result parameter or a new CircleGeometry instance if one was not provided.\r\n */\r\nCircleGeometry.unpack = function (array, startingIndex, result) {\r\n  var ellipseGeometry = EllipseGeometry.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchEllipseGeometry\r\n  );\r\n  scratchOptions.center = Cartesian3.clone(\r\n    ellipseGeometry._center,\r\n    scratchOptions.center\r\n  );\r\n  scratchOptions.ellipsoid = Ellipsoid.clone(\r\n    ellipseGeometry._ellipsoid,\r\n    scratchOptions.ellipsoid\r\n  );\r\n  scratchOptions.height = ellipseGeometry._height;\r\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n  scratchOptions.granularity = ellipseGeometry._granularity;\r\n  scratchOptions.vertexFormat = VertexFormat.clone(\r\n    ellipseGeometry._vertexFormat,\r\n    scratchOptions.vertexFormat\r\n  );\r\n  scratchOptions.stRotation = ellipseGeometry._stRotation;\r\n  scratchOptions.shadowVolume = ellipseGeometry._shadowVolume;\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n    return new CircleGeometry(scratchOptions);\r\n  }\r\n\r\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n  result._ellipseGeometry = new EllipseGeometry(scratchOptions);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CircleGeometry} circleGeometry A description of the circle.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCircleGeometry.createGeometry = function (circleGeometry) {\r\n  return EllipseGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nCircleGeometry.createShadowVolume = function (\r\n  circleGeometry,\r\n  minHeightFunc,\r\n  maxHeightFunc\r\n) {\r\n  var granularity = circleGeometry._ellipseGeometry._granularity;\r\n  var ellipsoid = circleGeometry._ellipseGeometry._ellipsoid;\r\n\r\n  var minHeight = minHeightFunc(granularity, ellipsoid);\r\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n  return new CircleGeometry({\r\n    center: circleGeometry._ellipseGeometry._center,\r\n    radius: circleGeometry._ellipseGeometry._semiMajorAxis,\r\n    ellipsoid: ellipsoid,\r\n    stRotation: circleGeometry._ellipseGeometry._stRotation,\r\n    granularity: granularity,\r\n    extrudedHeight: minHeight,\r\n    height: maxHeight,\r\n    vertexFormat: VertexFormat.POSITION_ONLY,\r\n    shadowVolume: true,\r\n  });\r\n};\r\n\r\nObject.defineProperties(CircleGeometry.prototype, {\r\n  /**\r\n   * @private\r\n   */\r\n  rectangle: {\r\n    get: function () {\r\n      return this._ellipseGeometry.rectangle;\r\n    },\r\n  },\r\n  /**\r\n   * For remapping texture coordinates when rendering CircleGeometries as GroundPrimitives.\r\n   * @private\r\n   */\r\n  textureCoordinateRotationPoints: {\r\n    get: function () {\r\n      return this._ellipseGeometry.textureCoordinateRotationPoints;\r\n    },\r\n  },\r\n});\r\nexport default CircleGeometry;\r\n","import Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport CircleGeometry from \"../Core/CircleGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\n\r\nfunction createCircleGeometry(circleGeometry, offset) {\r\n  if (defined(offset)) {\r\n    circleGeometry = CircleGeometry.unpack(circleGeometry, offset);\r\n  }\r\n  circleGeometry._ellipseGeometry._center = Cartesian3.clone(\r\n    circleGeometry._ellipseGeometry._center\r\n  );\r\n  circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(\r\n    circleGeometry._ellipseGeometry._ellipsoid\r\n  );\r\n  return CircleGeometry.createGeometry(circleGeometry);\r\n}\r\nexport default createCircleGeometry;\r\n"],"names":["defaultValue","Check","EllipseGeometry","Cartesian3","Ellipsoid","VertexFormat","defined"],"mappings":"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"}