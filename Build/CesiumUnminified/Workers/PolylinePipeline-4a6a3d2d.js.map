{"version":3,"file":"PolylinePipeline-4a6a3d2d.js","sources":["../../../../Source/Core/PolylinePipeline.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport EllipsoidGeodesic from \"./EllipsoidGeodesic.js\";\r\nimport EllipsoidRhumbLine from \"./EllipsoidRhumbLine.js\";\r\nimport IntersectionTests from \"./IntersectionTests.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport Plane from \"./Plane.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nvar PolylinePipeline = {};\r\n\r\nPolylinePipeline.numberOfPoints = function (p0, p1, minDistance) {\r\n  var distance = Cartesian3.distance(p0, p1);\r\n  return Math.ceil(distance / minDistance);\r\n};\r\n\r\nPolylinePipeline.numberOfPointsRhumbLine = function (p0, p1, granularity) {\r\n  var radiansDistanceSquared =\r\n    Math.pow(p0.longitude - p1.longitude, 2) +\r\n    Math.pow(p0.latitude - p1.latitude, 2);\r\n\r\n  return Math.max(\r\n    1,\r\n    Math.ceil(Math.sqrt(radiansDistanceSquared / (granularity * granularity)))\r\n  );\r\n};\r\n\r\nvar cartoScratch = new Cartographic();\r\nPolylinePipeline.extractHeights = function (positions, ellipsoid) {\r\n  var length = positions.length;\r\n  var heights = new Array(length);\r\n  for (var i = 0; i < length; i++) {\r\n    var p = positions[i];\r\n    heights[i] = ellipsoid.cartesianToCartographic(p, cartoScratch).height;\r\n  }\r\n  return heights;\r\n};\r\n\r\nvar wrapLongitudeInversMatrix = new Matrix4();\r\nvar wrapLongitudeOrigin = new Cartesian3();\r\nvar wrapLongitudeXZNormal = new Cartesian3();\r\nvar wrapLongitudeXZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\nvar wrapLongitudeYZNormal = new Cartesian3();\r\nvar wrapLongitudeYZPlane = new Plane(Cartesian3.UNIT_X, 0.0);\r\nvar wrapLongitudeIntersection = new Cartesian3();\r\nvar wrapLongitudeOffset = new Cartesian3();\r\n\r\nvar subdivideHeightsScratchArray = [];\r\n\r\nfunction subdivideHeights(numPoints, h0, h1) {\r\n  var heights = subdivideHeightsScratchArray;\r\n  heights.length = numPoints;\r\n\r\n  var i;\r\n  if (h0 === h1) {\r\n    for (i = 0; i < numPoints; i++) {\r\n      heights[i] = h0;\r\n    }\r\n    return heights;\r\n  }\r\n\r\n  var dHeight = h1 - h0;\r\n  var heightPerVertex = dHeight / numPoints;\r\n\r\n  for (i = 0; i < numPoints; i++) {\r\n    var h = h0 + i * heightPerVertex;\r\n    heights[i] = h;\r\n  }\r\n\r\n  return heights;\r\n}\r\n\r\nvar carto1 = new Cartographic();\r\nvar carto2 = new Cartographic();\r\nvar cartesian = new Cartesian3();\r\nvar scaleFirst = new Cartesian3();\r\nvar scaleLast = new Cartesian3();\r\nvar ellipsoidGeodesic = new EllipsoidGeodesic();\r\nvar ellipsoidRhumb = new EllipsoidRhumbLine();\r\n\r\n//Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\r\n//Result includes p1, but not include p2.  This function is called for a sequence of line segments,\r\n//and this prevents duplication of end point.\r\nfunction generateCartesianArc(\r\n  p0,\r\n  p1,\r\n  minDistance,\r\n  ellipsoid,\r\n  h0,\r\n  h1,\r\n  array,\r\n  offset\r\n) {\r\n  var first = ellipsoid.scaleToGeodeticSurface(p0, scaleFirst);\r\n  var last = ellipsoid.scaleToGeodeticSurface(p1, scaleLast);\r\n  var numPoints = PolylinePipeline.numberOfPoints(p0, p1, minDistance);\r\n  var start = ellipsoid.cartesianToCartographic(first, carto1);\r\n  var end = ellipsoid.cartesianToCartographic(last, carto2);\r\n  var heights = subdivideHeights(numPoints, h0, h1);\r\n\r\n  ellipsoidGeodesic.setEndPoints(start, end);\r\n  var surfaceDistanceBetweenPoints =\r\n    ellipsoidGeodesic.surfaceDistance / numPoints;\r\n\r\n  var index = offset;\r\n  start.height = h0;\r\n  var cart = ellipsoid.cartographicToCartesian(start, cartesian);\r\n  Cartesian3.pack(cart, array, index);\r\n  index += 3;\r\n\r\n  for (var i = 1; i < numPoints; i++) {\r\n    var carto = ellipsoidGeodesic.interpolateUsingSurfaceDistance(\r\n      i * surfaceDistanceBetweenPoints,\r\n      carto2\r\n    );\r\n    carto.height = heights[i];\r\n    cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n    Cartesian3.pack(cart, array, index);\r\n    index += 3;\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\n//Returns subdivided line scaled to ellipsoid surface starting at p1 and ending at p2.\r\n//Result includes p1, but not include p2.  This function is called for a sequence of line segments,\r\n//and this prevents duplication of end point.\r\nfunction generateCartesianRhumbArc(\r\n  p0,\r\n  p1,\r\n  granularity,\r\n  ellipsoid,\r\n  h0,\r\n  h1,\r\n  array,\r\n  offset\r\n) {\r\n  var start = ellipsoid.cartesianToCartographic(p0, carto1);\r\n  var end = ellipsoid.cartesianToCartographic(p1, carto2);\r\n  var numPoints = PolylinePipeline.numberOfPointsRhumbLine(\r\n    start,\r\n    end,\r\n    granularity\r\n  );\r\n  start.height = 0.0;\r\n  end.height = 0.0;\r\n  var heights = subdivideHeights(numPoints, h0, h1);\r\n\r\n  if (!ellipsoidRhumb.ellipsoid.equals(ellipsoid)) {\r\n    ellipsoidRhumb = new EllipsoidRhumbLine(undefined, undefined, ellipsoid);\r\n  }\r\n  ellipsoidRhumb.setEndPoints(start, end);\r\n  var surfaceDistanceBetweenPoints = ellipsoidRhumb.surfaceDistance / numPoints;\r\n\r\n  var index = offset;\r\n  start.height = h0;\r\n  var cart = ellipsoid.cartographicToCartesian(start, cartesian);\r\n  Cartesian3.pack(cart, array, index);\r\n  index += 3;\r\n\r\n  for (var i = 1; i < numPoints; i++) {\r\n    var carto = ellipsoidRhumb.interpolateUsingSurfaceDistance(\r\n      i * surfaceDistanceBetweenPoints,\r\n      carto2\r\n    );\r\n    carto.height = heights[i];\r\n    cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n    Cartesian3.pack(cart, array, index);\r\n    index += 3;\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\n/**\r\n * Breaks a {@link Polyline} into segments such that it does not cross the &plusmn;180 degree meridian of an ellipsoid.\r\n *\r\n * @param {Cartesian3[]} positions The polyline's Cartesian positions.\r\n * @param {Matrix4} [modelMatrix=Matrix4.IDENTITY] The polyline's model matrix. Assumed to be an affine\r\n * transformation matrix, where the upper left 3x3 elements are a rotation matrix, and\r\n * the upper three elements in the fourth column are the translation.  The bottom row is assumed to be [0, 0, 0, 1].\r\n * The matrix is not verified to be in the proper form.\r\n * @returns {Object} An object with a <code>positions</code> property that is an array of positions and a\r\n * <code>segments</code> property.\r\n *\r\n *\r\n * @example\r\n * var polylines = new Cesium.PolylineCollection();\r\n * var polyline = polylines.add(...);\r\n * var positions = polyline.positions;\r\n * var modelMatrix = polylines.modelMatrix;\r\n * var segments = Cesium.PolylinePipeline.wrapLongitude(positions, modelMatrix);\r\n *\r\n * @see PolygonPipeline.wrapLongitude\r\n * @see Polyline\r\n * @see PolylineCollection\r\n */\r\nPolylinePipeline.wrapLongitude = function (positions, modelMatrix) {\r\n  var cartesians = [];\r\n  var segments = [];\r\n\r\n  if (defined(positions) && positions.length > 0) {\r\n    modelMatrix = defaultValue(modelMatrix, Matrix4.IDENTITY);\r\n    var inverseModelMatrix = Matrix4.inverseTransformation(\r\n      modelMatrix,\r\n      wrapLongitudeInversMatrix\r\n    );\r\n\r\n    var origin = Matrix4.multiplyByPoint(\r\n      inverseModelMatrix,\r\n      Cartesian3.ZERO,\r\n      wrapLongitudeOrigin\r\n    );\r\n    var xzNormal = Cartesian3.normalize(\r\n      Matrix4.multiplyByPointAsVector(\r\n        inverseModelMatrix,\r\n        Cartesian3.UNIT_Y,\r\n        wrapLongitudeXZNormal\r\n      ),\r\n      wrapLongitudeXZNormal\r\n    );\r\n    var xzPlane = Plane.fromPointNormal(origin, xzNormal, wrapLongitudeXZPlane);\r\n    var yzNormal = Cartesian3.normalize(\r\n      Matrix4.multiplyByPointAsVector(\r\n        inverseModelMatrix,\r\n        Cartesian3.UNIT_X,\r\n        wrapLongitudeYZNormal\r\n      ),\r\n      wrapLongitudeYZNormal\r\n    );\r\n    var yzPlane = Plane.fromPointNormal(origin, yzNormal, wrapLongitudeYZPlane);\r\n\r\n    var count = 1;\r\n    cartesians.push(Cartesian3.clone(positions[0]));\r\n    var prev = cartesians[0];\r\n\r\n    var length = positions.length;\r\n    for (var i = 1; i < length; ++i) {\r\n      var cur = positions[i];\r\n\r\n      // intersects the IDL if either endpoint is on the negative side of the yz-plane\r\n      if (\r\n        Plane.getPointDistance(yzPlane, prev) < 0.0 ||\r\n        Plane.getPointDistance(yzPlane, cur) < 0.0\r\n      ) {\r\n        // and intersects the xz-plane\r\n        var intersection = IntersectionTests.lineSegmentPlane(\r\n          prev,\r\n          cur,\r\n          xzPlane,\r\n          wrapLongitudeIntersection\r\n        );\r\n        if (defined(intersection)) {\r\n          // move point on the xz-plane slightly away from the plane\r\n          var offset = Cartesian3.multiplyByScalar(\r\n            xzNormal,\r\n            5.0e-9,\r\n            wrapLongitudeOffset\r\n          );\r\n          if (Plane.getPointDistance(xzPlane, prev) < 0.0) {\r\n            Cartesian3.negate(offset, offset);\r\n          }\r\n\r\n          cartesians.push(\r\n            Cartesian3.add(intersection, offset, new Cartesian3())\r\n          );\r\n          segments.push(count + 1);\r\n\r\n          Cartesian3.negate(offset, offset);\r\n          cartesians.push(\r\n            Cartesian3.add(intersection, offset, new Cartesian3())\r\n          );\r\n          count = 1;\r\n        }\r\n      }\r\n\r\n      cartesians.push(Cartesian3.clone(positions[i]));\r\n      count++;\r\n\r\n      prev = cur;\r\n    }\r\n\r\n    segments.push(count);\r\n  }\r\n\r\n  return {\r\n    positions: cartesians,\r\n    lengths: segments,\r\n  };\r\n};\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height.  Returns an array of numbers to represent the positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateArc = function (options) {\r\n  if (!defined(options)) {\r\n    options = {};\r\n  }\r\n  var positions = options.positions;\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.positions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = positions.length;\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n  var height = defaultValue(options.height, 0);\r\n  var hasHeightArray = Array.isArray(height);\r\n\r\n  if (length < 1) {\r\n    return [];\r\n  } else if (length === 1) {\r\n    var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\r\n    height = hasHeightArray ? height[0] : height;\r\n    if (height !== 0) {\r\n      var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\r\n      Cartesian3.multiplyByScalar(n, height, n);\r\n      Cartesian3.add(p, n, p);\r\n    }\r\n\r\n    return [p.x, p.y, p.z];\r\n  }\r\n\r\n  var minDistance = options.minDistance;\r\n  if (!defined(minDistance)) {\r\n    var granularity = defaultValue(\r\n      options.granularity,\r\n      CesiumMath.RADIANS_PER_DEGREE\r\n    );\r\n    minDistance = CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n  }\r\n\r\n  var numPoints = 0;\r\n  var i;\r\n\r\n  for (i = 0; i < length - 1; i++) {\r\n    numPoints += PolylinePipeline.numberOfPoints(\r\n      positions[i],\r\n      positions[i + 1],\r\n      minDistance\r\n    );\r\n  }\r\n\r\n  var arrayLength = (numPoints + 1) * 3;\r\n  var newPositions = new Array(arrayLength);\r\n  var offset = 0;\r\n\r\n  for (i = 0; i < length - 1; i++) {\r\n    var p0 = positions[i];\r\n    var p1 = positions[i + 1];\r\n\r\n    var h0 = hasHeightArray ? height[i] : height;\r\n    var h1 = hasHeightArray ? height[i + 1] : height;\r\n\r\n    offset = generateCartesianArc(\r\n      p0,\r\n      p1,\r\n      minDistance,\r\n      ellipsoid,\r\n      h0,\r\n      h1,\r\n      newPositions,\r\n      offset\r\n    );\r\n  }\r\n\r\n  subdivideHeightsScratchArray.length = 0;\r\n\r\n  var lastPoint = positions[length - 1];\r\n  var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\r\n  carto.height = hasHeightArray ? height[length - 1] : height;\r\n  var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n  Cartesian3.pack(cart, newPositions, arrayLength - 3);\r\n\r\n  return newPositions;\r\n};\r\n\r\nvar scratchCartographic0 = new Cartographic();\r\nvar scratchCartographic1 = new Cartographic();\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height using Rhumb lines.  Returns an array of numbers to represent the positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Number[]} A new array of positions of type {Number} that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateRhumbArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateRhumbArc = function (options) {\r\n  if (!defined(options)) {\r\n    options = {};\r\n  }\r\n  var positions = options.positions;\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(positions)) {\r\n    throw new DeveloperError(\"options.positions is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = positions.length;\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n  var height = defaultValue(options.height, 0);\r\n  var hasHeightArray = Array.isArray(height);\r\n\r\n  if (length < 1) {\r\n    return [];\r\n  } else if (length === 1) {\r\n    var p = ellipsoid.scaleToGeodeticSurface(positions[0], scaleFirst);\r\n    height = hasHeightArray ? height[0] : height;\r\n    if (height !== 0) {\r\n      var n = ellipsoid.geodeticSurfaceNormal(p, cartesian);\r\n      Cartesian3.multiplyByScalar(n, height, n);\r\n      Cartesian3.add(p, n, p);\r\n    }\r\n\r\n    return [p.x, p.y, p.z];\r\n  }\r\n\r\n  var granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n\r\n  var numPoints = 0;\r\n  var i;\r\n\r\n  var c0 = ellipsoid.cartesianToCartographic(\r\n    positions[0],\r\n    scratchCartographic0\r\n  );\r\n  var c1;\r\n  for (i = 0; i < length - 1; i++) {\r\n    c1 = ellipsoid.cartesianToCartographic(\r\n      positions[i + 1],\r\n      scratchCartographic1\r\n    );\r\n    numPoints += PolylinePipeline.numberOfPointsRhumbLine(c0, c1, granularity);\r\n    c0 = Cartographic.clone(c1, scratchCartographic0);\r\n  }\r\n\r\n  var arrayLength = (numPoints + 1) * 3;\r\n  var newPositions = new Array(arrayLength);\r\n  var offset = 0;\r\n\r\n  for (i = 0; i < length - 1; i++) {\r\n    var p0 = positions[i];\r\n    var p1 = positions[i + 1];\r\n\r\n    var h0 = hasHeightArray ? height[i] : height;\r\n    var h1 = hasHeightArray ? height[i + 1] : height;\r\n\r\n    offset = generateCartesianRhumbArc(\r\n      p0,\r\n      p1,\r\n      granularity,\r\n      ellipsoid,\r\n      h0,\r\n      h1,\r\n      newPositions,\r\n      offset\r\n    );\r\n  }\r\n\r\n  subdivideHeightsScratchArray.length = 0;\r\n\r\n  var lastPoint = positions[length - 1];\r\n  var carto = ellipsoid.cartesianToCartographic(lastPoint, carto1);\r\n  carto.height = hasHeightArray ? height[length - 1] : height;\r\n  var cart = ellipsoid.cartographicToCartesian(carto, cartesian);\r\n  Cartesian3.pack(cart, newPositions, arrayLength - 3);\r\n\r\n  return newPositions;\r\n};\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height. Returns an array of new {Cartesian3} positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateCartesianArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateCartesianArc = function (options) {\r\n  var numberArray = PolylinePipeline.generateArc(options);\r\n  var size = numberArray.length / 3;\r\n  var newPositions = new Array(size);\r\n  for (var i = 0; i < size; i++) {\r\n    newPositions[i] = Cartesian3.unpack(numberArray, i * 3);\r\n  }\r\n  return newPositions;\r\n};\r\n\r\n/**\r\n * Subdivides polyline and raises all points to the specified height using Rhumb Lines. Returns an array of new {Cartesian3} positions.\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions The array of type {Cartesian3} representing positions.\r\n * @param {Number|Number[]} [options.height=0.0] A number or array of numbers representing the heights of each position.\r\n * @param {Number} [options.granularity = CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the positions lie.\r\n * @returns {Cartesian3[]} A new array of cartesian3 positions that have been subdivided and raised to the surface of the ellipsoid.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([\r\n *   -105.0, 40.0,\r\n *   -100.0, 38.0,\r\n *   -105.0, 35.0,\r\n *   -100.0, 32.0\r\n * ]);\r\n * var surfacePositions = Cesium.PolylinePipeline.generateCartesianRhumbArc({\r\n *   positons: positions\r\n * });\r\n */\r\nPolylinePipeline.generateCartesianRhumbArc = function (options) {\r\n  var numberArray = PolylinePipeline.generateRhumbArc(options);\r\n  var size = numberArray.length / 3;\r\n  var newPositions = new Array(size);\r\n  for (var i = 0; i < size; i++) {\r\n    newPositions[i] = Cartesian3.unpack(numberArray, i * 3);\r\n  }\r\n  return newPositions;\r\n};\r\nexport default PolylinePipeline;\r\n"],"names":["Cartesian3","Cartographic","Matrix4","Plane","EllipsoidGeodesic","EllipsoidRhumbLine","defined","defaultValue","IntersectionTests","DeveloperError","Ellipsoid","CesiumMath"],"mappings":"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"}