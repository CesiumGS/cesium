{"version":3,"file":"createSphereGeometry.js","sources":["../../../../Source/Core/SphereGeometry.js","../../../../Source/WorkersES6/createSphereGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport EllipsoidGeometry from \"./EllipsoidGeometry.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\n/**\r\n * A description of a sphere centered at the origin.\r\n *\r\n * @alias SphereGeometry\r\n * @constructor\r\n *\r\n * @param {Object} [options] Object with the following properties:\r\n * @param {Number} [options.radius=1.0] The radius of the sphere.\r\n * @param {Number} [options.stackPartitions=64] The number of times to partition the ellipsoid into stacks.\r\n * @param {Number} [options.slicePartitions=64] The number of times to partition the ellipsoid into radial slices.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} options.slicePartitions cannot be less than three.\r\n * @exception {DeveloperError} options.stackPartitions cannot be less than three.\r\n *\r\n * @see SphereGeometry#createGeometry\r\n *\r\n * @example\r\n * var sphere = new Cesium.SphereGeometry({\r\n *   radius : 100.0,\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY\r\n * });\r\n * var geometry = Cesium.SphereGeometry.createGeometry(sphere);\r\n */\r\nfunction SphereGeometry(options) {\r\n  var radius = defaultValue(options.radius, 1.0);\r\n  var radii = new Cartesian3(radius, radius, radius);\r\n  var ellipsoidOptions = {\r\n    radii: radii,\r\n    stackPartitions: options.stackPartitions,\r\n    slicePartitions: options.slicePartitions,\r\n    vertexFormat: options.vertexFormat,\r\n  };\r\n\r\n  this._ellipsoidGeometry = new EllipsoidGeometry(ellipsoidOptions);\r\n  this._workerName = \"createSphereGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nSphereGeometry.packedLength = EllipsoidGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {SphereGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nSphereGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  //>>includeEnd('debug');\r\n\r\n  return EllipsoidGeometry.pack(value._ellipsoidGeometry, array, startingIndex);\r\n};\r\n\r\nvar scratchEllipsoidGeometry = new EllipsoidGeometry();\r\nvar scratchOptions = {\r\n  radius: undefined,\r\n  radii: new Cartesian3(),\r\n  vertexFormat: new VertexFormat(),\r\n  stackPartitions: undefined,\r\n  slicePartitions: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {SphereGeometry} [result] The object into which to store the result.\r\n * @returns {SphereGeometry} The modified result parameter or a new SphereGeometry instance if one was not provided.\r\n */\r\nSphereGeometry.unpack = function (array, startingIndex, result) {\r\n  var ellipsoidGeometry = EllipsoidGeometry.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchEllipsoidGeometry\r\n  );\r\n  scratchOptions.vertexFormat = VertexFormat.clone(\r\n    ellipsoidGeometry._vertexFormat,\r\n    scratchOptions.vertexFormat\r\n  );\r\n  scratchOptions.stackPartitions = ellipsoidGeometry._stackPartitions;\r\n  scratchOptions.slicePartitions = ellipsoidGeometry._slicePartitions;\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.radius = ellipsoidGeometry._radii.x;\r\n    return new SphereGeometry(scratchOptions);\r\n  }\r\n\r\n  Cartesian3.clone(ellipsoidGeometry._radii, scratchOptions.radii);\r\n  result._ellipsoidGeometry = new EllipsoidGeometry(scratchOptions);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a sphere, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {SphereGeometry} sphereGeometry A description of the sphere.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nSphereGeometry.createGeometry = function (sphereGeometry) {\r\n  return EllipsoidGeometry.createGeometry(sphereGeometry._ellipsoidGeometry);\r\n};\r\nexport default SphereGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport SphereGeometry from \"../Core/SphereGeometry.js\";\r\n\r\nfunction createSphereGeometry(sphereGeometry, offset) {\r\n  if (defined(offset)) {\r\n    sphereGeometry = SphereGeometry.unpack(sphereGeometry, offset);\r\n  }\r\n  return SphereGeometry.createGeometry(sphereGeometry);\r\n}\r\nexport default createSphereGeometry;\r\n"],"names":["defaultValue","Cartesian3","EllipsoidGeometry","Check","VertexFormat","defined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;EAOA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,cAAc,CAAC,OAAO,EAAE;EACjC,EAAE,IAAI,MAAM,GAAGA,iBAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjD,EAAE,IAAI,KAAK,GAAG,IAAIC,qBAAU,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;EACrD,EAAE,IAAI,gBAAgB,GAAG;EACzB,IAAI,KAAK,EAAE,KAAK;EAChB,IAAI,eAAe,EAAE,OAAO,CAAC,eAAe;EAC5C,IAAI,eAAe,EAAE,OAAO,CAAC,eAAe;EAC5C,IAAI,YAAY,EAAE,OAAO,CAAC,YAAY;EACtC,GAAG,CAAC;AACJ;EACA,EAAE,IAAI,CAAC,kBAAkB,GAAG,IAAIC,mCAAiB,CAAC,gBAAgB,CAAC,CAAC;EACpE,EAAE,IAAI,CAAC,WAAW,GAAG,sBAAsB,CAAC;EAC5C,CAAC;AACD;EACA;EACA;EACA;EACA;EACA,cAAc,CAAC,YAAY,GAAGA,mCAAiB,CAAC,YAAY,CAAC;AAC7D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,cAAc,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;EAC7D;EACA,EAAEC,WAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EACtC;AACA;EACA,EAAE,OAAOD,mCAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;EAChF,CAAC,CAAC;AACF;EACA,IAAI,wBAAwB,GAAG,IAAIA,mCAAiB,EAAE,CAAC;EACvD,IAAI,cAAc,GAAG;EACrB,EAAE,MAAM,EAAE,SAAS;EACnB,EAAE,KAAK,EAAE,IAAID,qBAAU,EAAE;EACzB,EAAE,YAAY,EAAE,IAAIG,yBAAY,EAAE;EAClC,EAAE,eAAe,EAAE,SAAS;EAC5B,EAAE,eAAe,EAAE,SAAS;EAC5B,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,cAAc,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;EAChE,EAAE,IAAI,iBAAiB,GAAGF,mCAAiB,CAAC,MAAM;EAClD,IAAI,KAAK;EACT,IAAI,aAAa;EACjB,IAAI,wBAAwB;EAC5B,GAAG,CAAC;EACJ,EAAE,cAAc,CAAC,YAAY,GAAGE,yBAAY,CAAC,KAAK;EAClD,IAAI,iBAAiB,CAAC,aAAa;EACnC,IAAI,cAAc,CAAC,YAAY;EAC/B,GAAG,CAAC;EACJ,EAAE,cAAc,CAAC,eAAe,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;EACtE,EAAE,cAAc,CAAC,eAAe,GAAG,iBAAiB,CAAC,gBAAgB,CAAC;AACtE;EACA,EAAE,IAAI,CAACC,YAAO,CAAC,MAAM,CAAC,EAAE;EACxB,IAAI,cAAc,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;EACvD,IAAI,OAAO,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC;EAC9C,GAAG;AACH;EACA,EAAEJ,qBAAU,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC;EACnE,EAAE,MAAM,CAAC,kBAAkB,GAAG,IAAIC,mCAAiB,CAAC,cAAc,CAAC,CAAC;EACpE,EAAE,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA,cAAc,CAAC,cAAc,GAAG,UAAU,cAAc,EAAE;EAC1D,EAAE,OAAOA,mCAAiB,CAAC,cAAc,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;EAC7E,CAAC;;ECjHD,SAAS,oBAAoB,CAAC,cAAc,EAAE,MAAM,EAAE;EACtD,EAAE,IAAIG,YAAO,CAAC,MAAM,CAAC,EAAE;EACvB,IAAI,cAAc,GAAG,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;EACnE,GAAG;EACH,EAAE,OAAO,cAAc,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;EACvD;;;;;;;;"}