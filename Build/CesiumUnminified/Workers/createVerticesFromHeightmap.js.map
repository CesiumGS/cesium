{"version":3,"file":"createVerticesFromHeightmap.js","sources":["../../../../Source/Core/HeightmapEncoding.js","../../../../Source/Core/HeightmapTessellator.js","../../../../Source/ThirdParty/LercDecode.js","../../../../Source/WorkersES6/createVerticesFromHeightmap.js"],"sourcesContent":["/**\r\n * The encoding that is used for a heightmap\r\n *\r\n * @enum {Number}\r\n */\r\nvar HeightmapEncoding = {\r\n  /**\r\n   * No encoding\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  NONE: 0,\r\n\r\n  /**\r\n   * LERC encoding\r\n   *\r\n   * @type {Number}\r\n   * @constant\r\n   *\r\n   * @see {@link https://github.com/Esri/lerc|The LERC specification}\r\n   */\r\n  LERC: 1,\r\n};\r\nexport default Object.freeze(HeightmapEncoding);\r\n","import AxisAlignedBoundingBox from \"./AxisAlignedBoundingBox.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport EllipsoidalOccluder from \"./EllipsoidalOccluder.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport OrientedBoundingBox from \"./OrientedBoundingBox.js\";\r\nimport Rectangle from \"./Rectangle.js\";\r\nimport TerrainEncoding from \"./TerrainEncoding.js\";\r\nimport Transforms from \"./Transforms.js\";\r\nimport WebMercatorProjection from \"./WebMercatorProjection.js\";\r\n\r\n/**\r\n * Contains functions to create a mesh from a heightmap image.\r\n *\r\n * @namespace HeightmapTessellator\r\n *\r\n * @private\r\n */\r\nvar HeightmapTessellator = {};\r\n\r\n/**\r\n * The default structure of a heightmap, as given to {@link HeightmapTessellator.computeVertices}.\r\n *\r\n * @constant\r\n */\r\nHeightmapTessellator.DEFAULT_STRUCTURE = Object.freeze({\r\n  heightScale: 1.0,\r\n  heightOffset: 0.0,\r\n  elementsPerHeight: 1,\r\n  stride: 1,\r\n  elementMultiplier: 256.0,\r\n  isBigEndian: false,\r\n});\r\n\r\nvar cartesian3Scratch = new Cartesian3();\r\nvar matrix4Scratch = new Matrix4();\r\nvar minimumScratch = new Cartesian3();\r\nvar maximumScratch = new Cartesian3();\r\n\r\n/**\r\n * Fills an array of vertices from a heightmap image.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} options.heightmap The heightmap to tessellate.\r\n * @param {Number} options.width The width of the heightmap, in height samples.\r\n * @param {Number} options.height The height of the heightmap, in height samples.\r\n * @param {Number} options.skirtHeight The height of skirts to drape at the edges of the heightmap.\r\n * @param {Rectangle} options.nativeRectangle A rectangle in the native coordinates of the heightmap's projection.  For\r\n *                 a heightmap with a geographic projection, this is degrees.  For the web mercator\r\n *                 projection, this is meters.\r\n * @param {Number} [options.exaggeration=1.0] The scale used to exaggerate the terrain.\r\n * @param {Rectangle} [options.rectangle] The rectangle covered by the heightmap, in geodetic coordinates with north, south, east and\r\n *                 west properties in radians.  Either rectangle or nativeRectangle must be provided.  If both\r\n *                 are provided, they're assumed to be consistent.\r\n * @param {Boolean} [options.isGeographic=true] True if the heightmap uses a {@link GeographicProjection}, or false if it uses\r\n *                  a {@link WebMercatorProjection}.\r\n * @param {Cartesian3} [options.relativeToCenter=Cartesian3.ZERO] The positions will be computed as <code>Cartesian3.subtract(worldPosition, relativeToCenter)</code>.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to which the heightmap applies.\r\n * @param {Object} [options.structure] An object describing the structure of the height data.\r\n * @param {Number} [options.structure.heightScale=1.0] The factor by which to multiply height samples in order to obtain\r\n *                 the height above the heightOffset, in meters.  The heightOffset is added to the resulting\r\n *                 height after multiplying by the scale.\r\n * @param {Number} [options.structure.heightOffset=0.0] The offset to add to the scaled height to obtain the final\r\n *                 height in meters.  The offset is added after the height sample is multiplied by the\r\n *                 heightScale.\r\n * @param {Number} [options.structure.elementsPerHeight=1] The number of elements in the buffer that make up a single height\r\n *                 sample.  This is usually 1, indicating that each element is a separate height sample.  If\r\n *                 it is greater than 1, that number of elements together form the height sample, which is\r\n *                 computed according to the structure.elementMultiplier and structure.isBigEndian properties.\r\n * @param {Number} [options.structure.stride=1] The number of elements to skip to get from the first element of\r\n *                 one height to the first element of the next height.\r\n * @param {Number} [options.structure.elementMultiplier=256.0] The multiplier used to compute the height value when the\r\n *                 stride property is greater than 1.  For example, if the stride is 4 and the strideMultiplier\r\n *                 is 256, the height is computed as follows:\r\n *                 `height = buffer[index] + buffer[index + 1] * 256 + buffer[index + 2] * 256 * 256 + buffer[index + 3] * 256 * 256 * 256`\r\n *                 This is assuming that the isBigEndian property is false.  If it is true, the order of the\r\n *                 elements is reversed.\r\n * @param {Number} [options.structure.lowestEncodedHeight] The lowest value that can be stored in the height buffer.  Any heights that are lower\r\n *                 than this value after encoding with the `heightScale` and `heightOffset` are clamped to this value.  For example, if the height\r\n *                 buffer is a `Uint16Array`, this value should be 0 because a `Uint16Array` cannot store negative numbers.  If this parameter is\r\n *                 not specified, no minimum value is enforced.\r\n * @param {Number} [options.structure.highestEncodedHeight] The highest value that can be stored in the height buffer.  Any heights that are higher\r\n *                 than this value after encoding with the `heightScale` and `heightOffset` are clamped to this value.  For example, if the height\r\n *                 buffer is a `Uint16Array`, this value should be `256 * 256 - 1` or 65535 because a `Uint16Array` cannot store numbers larger\r\n *                 than 65535.  If this parameter is not specified, no maximum value is enforced.\r\n * @param {Boolean} [options.structure.isBigEndian=false] Indicates endianness of the elements in the buffer when the\r\n *                  stride property is greater than 1.  If this property is false, the first element is the\r\n *                  low-order element.  If it is true, the first element is the high-order element.\r\n *\r\n * @example\r\n * var width = 5;\r\n * var height = 5;\r\n * var statistics = Cesium.HeightmapTessellator.computeVertices({\r\n *     heightmap : [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0],\r\n *     width : width,\r\n *     height : height,\r\n *     skirtHeight : 0.0,\r\n *     nativeRectangle : {\r\n *         west : 10.0,\r\n *         east : 20.0,\r\n *         south : 30.0,\r\n *         north : 40.0\r\n *     }\r\n * });\r\n *\r\n * var encoding = statistics.encoding;\r\n * var position = encoding.decodePosition(statistics.vertices, index * encoding.getStride());\r\n */\r\nHeightmapTessellator.computeVertices = function (options) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(options) || !defined(options.heightmap)) {\r\n    throw new DeveloperError(\"options.heightmap is required.\");\r\n  }\r\n  if (!defined(options.width) || !defined(options.height)) {\r\n    throw new DeveloperError(\"options.width and options.height are required.\");\r\n  }\r\n  if (!defined(options.nativeRectangle)) {\r\n    throw new DeveloperError(\"options.nativeRectangle is required.\");\r\n  }\r\n  if (!defined(options.skirtHeight)) {\r\n    throw new DeveloperError(\"options.skirtHeight is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  // This function tends to be a performance hotspot for terrain rendering,\r\n  // so it employs a lot of inlining and unrolling as an optimization.\r\n  // In particular, the functionality of Ellipsoid.cartographicToCartesian\r\n  // is inlined.\r\n\r\n  var cos = Math.cos;\r\n  var sin = Math.sin;\r\n  var sqrt = Math.sqrt;\r\n  var atan = Math.atan;\r\n  var exp = Math.exp;\r\n  var piOverTwo = CesiumMath.PI_OVER_TWO;\r\n  var toRadians = CesiumMath.toRadians;\r\n\r\n  var heightmap = options.heightmap;\r\n  var width = options.width;\r\n  var height = options.height;\r\n  var skirtHeight = options.skirtHeight;\r\n\r\n  var isGeographic = defaultValue(options.isGeographic, true);\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n  var oneOverGlobeSemimajorAxis = 1.0 / ellipsoid.maximumRadius;\r\n\r\n  var nativeRectangle = options.nativeRectangle;\r\n\r\n  var geographicWest;\r\n  var geographicSouth;\r\n  var geographicEast;\r\n  var geographicNorth;\r\n\r\n  var rectangle = options.rectangle;\r\n  if (!defined(rectangle)) {\r\n    if (isGeographic) {\r\n      geographicWest = toRadians(nativeRectangle.west);\r\n      geographicSouth = toRadians(nativeRectangle.south);\r\n      geographicEast = toRadians(nativeRectangle.east);\r\n      geographicNorth = toRadians(nativeRectangle.north);\r\n    } else {\r\n      geographicWest = nativeRectangle.west * oneOverGlobeSemimajorAxis;\r\n      geographicSouth =\r\n        piOverTwo -\r\n        2.0 * atan(exp(-nativeRectangle.south * oneOverGlobeSemimajorAxis));\r\n      geographicEast = nativeRectangle.east * oneOverGlobeSemimajorAxis;\r\n      geographicNorth =\r\n        piOverTwo -\r\n        2.0 * atan(exp(-nativeRectangle.north * oneOverGlobeSemimajorAxis));\r\n    }\r\n  } else {\r\n    geographicWest = rectangle.west;\r\n    geographicSouth = rectangle.south;\r\n    geographicEast = rectangle.east;\r\n    geographicNorth = rectangle.north;\r\n  }\r\n\r\n  var relativeToCenter = options.relativeToCenter;\r\n  var hasRelativeToCenter = defined(relativeToCenter);\r\n  relativeToCenter = hasRelativeToCenter ? relativeToCenter : Cartesian3.ZERO;\r\n  var exaggeration = defaultValue(options.exaggeration, 1.0);\r\n  var includeWebMercatorT = defaultValue(options.includeWebMercatorT, false);\r\n\r\n  var structure = defaultValue(\r\n    options.structure,\r\n    HeightmapTessellator.DEFAULT_STRUCTURE\r\n  );\r\n  var heightScale = defaultValue(\r\n    structure.heightScale,\r\n    HeightmapTessellator.DEFAULT_STRUCTURE.heightScale\r\n  );\r\n  var heightOffset = defaultValue(\r\n    structure.heightOffset,\r\n    HeightmapTessellator.DEFAULT_STRUCTURE.heightOffset\r\n  );\r\n  var elementsPerHeight = defaultValue(\r\n    structure.elementsPerHeight,\r\n    HeightmapTessellator.DEFAULT_STRUCTURE.elementsPerHeight\r\n  );\r\n  var stride = defaultValue(\r\n    structure.stride,\r\n    HeightmapTessellator.DEFAULT_STRUCTURE.stride\r\n  );\r\n  var elementMultiplier = defaultValue(\r\n    structure.elementMultiplier,\r\n    HeightmapTessellator.DEFAULT_STRUCTURE.elementMultiplier\r\n  );\r\n  var isBigEndian = defaultValue(\r\n    structure.isBigEndian,\r\n    HeightmapTessellator.DEFAULT_STRUCTURE.isBigEndian\r\n  );\r\n\r\n  var rectangleWidth = Rectangle.computeWidth(nativeRectangle);\r\n  var rectangleHeight = Rectangle.computeHeight(nativeRectangle);\r\n\r\n  var granularityX = rectangleWidth / (width - 1);\r\n  var granularityY = rectangleHeight / (height - 1);\r\n\r\n  if (!isGeographic) {\r\n    rectangleWidth *= oneOverGlobeSemimajorAxis;\r\n    rectangleHeight *= oneOverGlobeSemimajorAxis;\r\n  }\r\n\r\n  var radiiSquared = ellipsoid.radiiSquared;\r\n  var radiiSquaredX = radiiSquared.x;\r\n  var radiiSquaredY = radiiSquared.y;\r\n  var radiiSquaredZ = radiiSquared.z;\r\n\r\n  var minimumHeight = 65536.0;\r\n  var maximumHeight = -65536.0;\r\n\r\n  var fromENU = Transforms.eastNorthUpToFixedFrame(relativeToCenter, ellipsoid);\r\n  var toENU = Matrix4.inverseTransformation(fromENU, matrix4Scratch);\r\n\r\n  var southMercatorY;\r\n  var oneOverMercatorHeight;\r\n  if (includeWebMercatorT) {\r\n    southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(\r\n      geographicSouth\r\n    );\r\n    oneOverMercatorHeight =\r\n      1.0 /\r\n      (WebMercatorProjection.geodeticLatitudeToMercatorAngle(geographicNorth) -\r\n        southMercatorY);\r\n  }\r\n\r\n  var minimum = minimumScratch;\r\n  minimum.x = Number.POSITIVE_INFINITY;\r\n  minimum.y = Number.POSITIVE_INFINITY;\r\n  minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n  var maximum = maximumScratch;\r\n  maximum.x = Number.NEGATIVE_INFINITY;\r\n  maximum.y = Number.NEGATIVE_INFINITY;\r\n  maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n  var hMin = Number.POSITIVE_INFINITY;\r\n\r\n  var gridVertexCount = width * height;\r\n  var edgeVertexCount = skirtHeight > 0.0 ? width * 2 + height * 2 : 0;\r\n  var vertexCount = gridVertexCount + edgeVertexCount;\r\n\r\n  var positions = new Array(vertexCount);\r\n  var heights = new Array(vertexCount);\r\n  var uvs = new Array(vertexCount);\r\n  var webMercatorTs = includeWebMercatorT ? new Array(vertexCount) : [];\r\n\r\n  var startRow = 0;\r\n  var endRow = height;\r\n  var startCol = 0;\r\n  var endCol = width;\r\n\r\n  if (skirtHeight > 0.0) {\r\n    --startRow;\r\n    ++endRow;\r\n    --startCol;\r\n    ++endCol;\r\n  }\r\n\r\n  var skirtOffsetPercentage = 0.00001;\r\n\r\n  for (var rowIndex = startRow; rowIndex < endRow; ++rowIndex) {\r\n    var row = rowIndex;\r\n    if (row < 0) {\r\n      row = 0;\r\n    }\r\n    if (row >= height) {\r\n      row = height - 1;\r\n    }\r\n\r\n    var latitude = nativeRectangle.north - granularityY * row;\r\n\r\n    if (!isGeographic) {\r\n      latitude =\r\n        piOverTwo - 2.0 * atan(exp(-latitude * oneOverGlobeSemimajorAxis));\r\n    } else {\r\n      latitude = toRadians(latitude);\r\n    }\r\n\r\n    var v = (latitude - geographicSouth) / (geographicNorth - geographicSouth);\r\n    v = CesiumMath.clamp(v, 0.0, 1.0);\r\n\r\n    var isNorthEdge = rowIndex === startRow;\r\n    var isSouthEdge = rowIndex === endRow - 1;\r\n    if (skirtHeight > 0.0) {\r\n      if (isNorthEdge) {\r\n        latitude += skirtOffsetPercentage * rectangleHeight;\r\n      } else if (isSouthEdge) {\r\n        latitude -= skirtOffsetPercentage * rectangleHeight;\r\n      }\r\n    }\r\n\r\n    var cosLatitude = cos(latitude);\r\n    var nZ = sin(latitude);\r\n    var kZ = radiiSquaredZ * nZ;\r\n\r\n    var webMercatorT;\r\n    if (includeWebMercatorT) {\r\n      webMercatorT =\r\n        (WebMercatorProjection.geodeticLatitudeToMercatorAngle(latitude) -\r\n          southMercatorY) *\r\n        oneOverMercatorHeight;\r\n    }\r\n\r\n    for (var colIndex = startCol; colIndex < endCol; ++colIndex) {\r\n      var col = colIndex;\r\n      if (col < 0) {\r\n        col = 0;\r\n      }\r\n      if (col >= width) {\r\n        col = width - 1;\r\n      }\r\n\r\n      var terrainOffset = row * (width * stride) + col * stride;\r\n\r\n      var heightSample;\r\n      if (elementsPerHeight === 1) {\r\n        heightSample = heightmap[terrainOffset];\r\n      } else {\r\n        heightSample = 0;\r\n\r\n        var elementOffset;\r\n        if (isBigEndian) {\r\n          for (\r\n            elementOffset = 0;\r\n            elementOffset < elementsPerHeight;\r\n            ++elementOffset\r\n          ) {\r\n            heightSample =\r\n              heightSample * elementMultiplier +\r\n              heightmap[terrainOffset + elementOffset];\r\n          }\r\n        } else {\r\n          for (\r\n            elementOffset = elementsPerHeight - 1;\r\n            elementOffset >= 0;\r\n            --elementOffset\r\n          ) {\r\n            heightSample =\r\n              heightSample * elementMultiplier +\r\n              heightmap[terrainOffset + elementOffset];\r\n          }\r\n        }\r\n      }\r\n\r\n      heightSample = (heightSample * heightScale + heightOffset) * exaggeration;\r\n\r\n      maximumHeight = Math.max(maximumHeight, heightSample);\r\n      minimumHeight = Math.min(minimumHeight, heightSample);\r\n\r\n      var longitude = nativeRectangle.west + granularityX * col;\r\n\r\n      if (!isGeographic) {\r\n        longitude = longitude * oneOverGlobeSemimajorAxis;\r\n      } else {\r\n        longitude = toRadians(longitude);\r\n      }\r\n\r\n      var u = (longitude - geographicWest) / (geographicEast - geographicWest);\r\n      u = CesiumMath.clamp(u, 0.0, 1.0);\r\n\r\n      var index = row * width + col;\r\n\r\n      if (skirtHeight > 0.0) {\r\n        var isWestEdge = colIndex === startCol;\r\n        var isEastEdge = colIndex === endCol - 1;\r\n        var isEdge = isNorthEdge || isSouthEdge || isWestEdge || isEastEdge;\r\n        var isCorner =\r\n          (isNorthEdge || isSouthEdge) && (isWestEdge || isEastEdge);\r\n        if (isCorner) {\r\n          // Don't generate skirts on the corners.\r\n          continue;\r\n        } else if (isEdge) {\r\n          heightSample -= skirtHeight;\r\n\r\n          if (isWestEdge) {\r\n            // The outer loop iterates north to south but the indices are ordered south to north, hence the index flip below\r\n            index = gridVertexCount + (height - row - 1);\r\n            longitude -= skirtOffsetPercentage * rectangleWidth;\r\n          } else if (isSouthEdge) {\r\n            // Add after west indices. South indices are ordered east to west.\r\n            index = gridVertexCount + height + (width - col - 1);\r\n          } else if (isEastEdge) {\r\n            // Add after west and south indices. East indices are ordered north to south. The index is flipped like above.\r\n            index = gridVertexCount + height + width + row;\r\n            longitude += skirtOffsetPercentage * rectangleWidth;\r\n          } else if (isNorthEdge) {\r\n            // Add after west, south, and east indices. North indices are ordered west to east.\r\n            index = gridVertexCount + height + width + height + col;\r\n          }\r\n        }\r\n      }\r\n\r\n      var nX = cosLatitude * cos(longitude);\r\n      var nY = cosLatitude * sin(longitude);\r\n\r\n      var kX = radiiSquaredX * nX;\r\n      var kY = radiiSquaredY * nY;\r\n\r\n      var gamma = sqrt(kX * nX + kY * nY + kZ * nZ);\r\n      var oneOverGamma = 1.0 / gamma;\r\n\r\n      var rSurfaceX = kX * oneOverGamma;\r\n      var rSurfaceY = kY * oneOverGamma;\r\n      var rSurfaceZ = kZ * oneOverGamma;\r\n\r\n      var position = new Cartesian3();\r\n      position.x = rSurfaceX + nX * heightSample;\r\n      position.y = rSurfaceY + nY * heightSample;\r\n      position.z = rSurfaceZ + nZ * heightSample;\r\n\r\n      positions[index] = position;\r\n      heights[index] = heightSample;\r\n      uvs[index] = new Cartesian2(u, v);\r\n\r\n      if (includeWebMercatorT) {\r\n        webMercatorTs[index] = webMercatorT;\r\n      }\r\n\r\n      Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n\r\n      Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n      Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n      hMin = Math.min(hMin, heightSample);\r\n    }\r\n  }\r\n\r\n  var boundingSphere3D = BoundingSphere.fromPoints(positions);\r\n  var orientedBoundingBox;\r\n  if (defined(rectangle)) {\r\n    orientedBoundingBox = OrientedBoundingBox.fromRectangle(\r\n      rectangle,\r\n      minimumHeight,\r\n      maximumHeight,\r\n      ellipsoid\r\n    );\r\n  }\r\n\r\n  var occludeePointInScaledSpace;\r\n  if (hasRelativeToCenter) {\r\n    var occluder = new EllipsoidalOccluder(ellipsoid);\r\n    occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(\r\n      relativeToCenter,\r\n      positions,\r\n      minimumHeight\r\n    );\r\n  }\r\n\r\n  var aaBox = new AxisAlignedBoundingBox(minimum, maximum, relativeToCenter);\r\n  var encoding = new TerrainEncoding(\r\n    aaBox,\r\n    hMin,\r\n    maximumHeight,\r\n    fromENU,\r\n    false,\r\n    includeWebMercatorT\r\n  );\r\n  var vertices = new Float32Array(vertexCount * encoding.getStride());\r\n\r\n  var bufferIndex = 0;\r\n  for (var j = 0; j < vertexCount; ++j) {\r\n    bufferIndex = encoding.encode(\r\n      vertices,\r\n      bufferIndex,\r\n      positions[j],\r\n      uvs[j],\r\n      heights[j],\r\n      undefined,\r\n      webMercatorTs[j]\r\n    );\r\n  }\r\n\r\n  return {\r\n    vertices: vertices,\r\n    maximumHeight: maximumHeight,\r\n    minimumHeight: minimumHeight,\r\n    encoding: encoding,\r\n    boundingSphere3D: boundingSphere3D,\r\n    orientedBoundingBox: orientedBoundingBox,\r\n    occludeePointInScaledSpace: occludeePointInScaledSpace,\r\n  };\r\n};\r\nexport default HeightmapTessellator;\r\n","/* jshint forin: false, bitwise: false */\r\n/*\r\nCopyright 2015-2018 Esri\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\nA copy of the license and additional notices are located with the\r\nsource distribution at:\r\n\r\nhttp://github.com/Esri/lerc/\r\n\r\nContributors:  Johannes Schmid, (LERC v1)\r\n               Chayanika Khatua, (LERC v1)\r\n               Wenxue Ju (LERC v1, v2.x)\r\n*/\r\n\r\n/* Copyright 2015-2018 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\r\n\r\nvar tmp = {};\r\n\r\n/**\r\n * a module for decoding LERC blobs\r\n * @module Lerc\r\n */\r\n(function() {\r\n  //the original LercDecode for Version 1\r\n  var LercDecode = (function() {\r\n\r\n    // WARNING: This decoder version can only read old version 1 Lerc blobs. Use with caution.\r\n\r\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\r\n    // the class was chosen to be future proof.\r\n\r\n    var CntZImage = {};\r\n\r\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\r\n\r\n    /**\r\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\r\n     * information about it, such as the image's width and height.\r\n     *\r\n     * @param {ArrayBuffer} input The LERC input byte stream\r\n     * @param {object} [options] Decoding options, containing any of the following properties:\r\n     * @config {number} [inputOffset = 0]\r\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\r\n     * @config {Uint8Array} [encodedMask = null]\r\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\r\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\r\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\r\n     *        Pixel value to use for masked pixels.\r\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\r\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\r\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\r\n     * @config {boolean} [returnMask = false]\r\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\r\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\r\n     *        input LERC data does not contain a mask, maskData will not be returned.\r\n     * @config {boolean} [returnEncodedMask = false]\r\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\r\n     *        encodedMask.\r\n     * @config {boolean} [returnFileInfo = false]\r\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\r\n     *        LERC headers and the decoding process.\r\n     * @config {boolean} [computeUsedBitDepths = false]\r\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\r\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\r\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\r\n     */\r\n    CntZImage.decode = function(input, options) {\r\n      options = options || {};\r\n\r\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\r\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\r\n\r\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\r\n\r\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\r\n        options.encodedMaskData, noDataValue, options.returnMask);\r\n\r\n      var result = {\r\n        width: parsedData.width,\r\n        height: parsedData.height,\r\n        pixelData: uncompressedData.resultPixels,\r\n        minValue: uncompressedData.minValue,\r\n        maxValue: parsedData.pixels.maxValue,\r\n        noDataValue: noDataValue\r\n      };\r\n\r\n      if (uncompressedData.resultMask) {\r\n        result.maskData = uncompressedData.resultMask;\r\n      }\r\n\r\n      if (options.returnEncodedMask && parsedData.mask) {\r\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\r\n      }\r\n\r\n      if (options.returnFileInfo) {\r\n        result.fileInfo = formatFileInfo(parsedData);\r\n        if (options.computeUsedBitDepths) {\r\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n\r\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\r\n      var blockIdx = 0;\r\n      var numX = data.pixels.numBlocksX;\r\n      var numY = data.pixels.numBlocksY;\r\n      var blockWidth = Math.floor(data.width / numX);\r\n      var blockHeight = Math.floor(data.height / numY);\r\n      var scale = 2 * data.maxZError;\r\n      var minValue = Number.MAX_VALUE, currentValue;\r\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\r\n\r\n      var resultPixels, resultMask;\r\n      resultPixels = new TypedArrayClass(data.width * data.height);\r\n      if (storeDecodedMask && maskBitset) {\r\n        resultMask = new Uint8Array(data.width * data.height);\r\n      }\r\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\r\n\r\n      var xx, yy;\r\n      for (var y = 0; y <= numY; y++) {\r\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\r\n        if (thisBlockHeight === 0) {\r\n          continue;\r\n        }\r\n        for (var x = 0; x <= numX; x++) {\r\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\r\n          if (thisBlockWidth === 0) {\r\n            continue;\r\n          }\r\n\r\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\r\n          var outStride = data.width - thisBlockWidth;\r\n\r\n          var block = data.pixels.blocks[blockIdx];\r\n\r\n          var blockData, blockPtr, constValue;\r\n          if (block.encoding < 2) {\r\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\r\n            if (block.encoding === 0) {\r\n              // block is uncompressed\r\n              blockData = block.rawData;\r\n            } else {\r\n              // block is bit-stuffed\r\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\r\n              blockData = blockDataBuffer;\r\n            }\r\n            blockPtr = 0;\r\n          }\r\n          else if (block.encoding === 2) {\r\n            // block is all 0\r\n            constValue = 0;\r\n          }\r\n          else {\r\n            // block has constant value (encoding === 3)\r\n            constValue = block.offset;\r\n          }\r\n\r\n          var maskByte;\r\n          if (maskBitset) {\r\n            for (yy = 0; yy < thisBlockHeight; yy++) {\r\n              if (outPtr & 7) {\r\n                //\r\n                maskByte = maskBitset[outPtr >> 3];\r\n                maskByte <<= outPtr & 7;\r\n              }\r\n              for (xx = 0; xx < thisBlockWidth; xx++) {\r\n                if (!(outPtr & 7)) {\r\n                  // read next byte from mask\r\n                  maskByte = maskBitset[outPtr >> 3];\r\n                }\r\n                if (maskByte & 128) {\r\n                  // pixel data present\r\n                  if (resultMask) {\r\n                    resultMask[outPtr] = 1;\r\n                  }\r\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\r\n                  minValue = minValue > currentValue ? currentValue : minValue;\r\n                  resultPixels[outPtr++] = currentValue;\r\n                } else {\r\n                  // pixel data not present\r\n                  if (resultMask) {\r\n                    resultMask[outPtr] = 0;\r\n                  }\r\n                  resultPixels[outPtr++] = noDataValue;\r\n                }\r\n                maskByte <<= 1;\r\n              }\r\n              outPtr += outStride;\r\n            }\r\n          } else {\r\n            // mask not present, simply copy block over\r\n            if (block.encoding < 2) {\r\n              // duplicating this code block for performance reasons\r\n              // blockData case:\r\n              for (yy = 0; yy < thisBlockHeight; yy++) {\r\n                for (xx = 0; xx < thisBlockWidth; xx++) {\r\n                  currentValue = blockData[blockPtr++];\r\n                  minValue = minValue > currentValue ? currentValue : minValue;\r\n                  resultPixels[outPtr++] = currentValue;\r\n                }\r\n                outPtr += outStride;\r\n              }\r\n            }\r\n            else {\r\n              // constValue case:\r\n              minValue = minValue > constValue ? constValue : minValue;\r\n              for (yy = 0; yy < thisBlockHeight; yy++) {\r\n                for (xx = 0; xx < thisBlockWidth; xx++) {\r\n                  resultPixels[outPtr++] = constValue;\r\n                }\r\n                outPtr += outStride;\r\n              }\r\n            }\r\n          }\r\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\r\n            throw \"Block and Mask do not match\";\r\n          }\r\n          blockIdx++;\r\n        }\r\n      }\r\n\r\n      return {\r\n        resultPixels: resultPixels,\r\n        resultMask: resultMask,\r\n        minValue: minValue\r\n      };\r\n    };\r\n\r\n    var formatFileInfo = function(data) {\r\n      return {\r\n        \"fileIdentifierString\": data.fileIdentifierString,\r\n        \"fileVersion\": data.fileVersion,\r\n        \"imageType\": data.imageType,\r\n        \"height\": data.height,\r\n        \"width\": data.width,\r\n        \"maxZError\": data.maxZError,\r\n        \"eofOffset\": data.eofOffset,\r\n        \"mask\": data.mask ? {\r\n          \"numBlocksX\": data.mask.numBlocksX,\r\n          \"numBlocksY\": data.mask.numBlocksY,\r\n          \"numBytes\": data.mask.numBytes,\r\n          \"maxValue\": data.mask.maxValue\r\n        } : null,\r\n        \"pixels\": {\r\n          \"numBlocksX\": data.pixels.numBlocksX,\r\n          \"numBlocksY\": data.pixels.numBlocksY,\r\n          \"numBytes\": data.pixels.numBytes,\r\n          \"maxValue\": data.pixels.maxValue,\r\n          \"noDataValue\": data.noDataValue\r\n        }\r\n      };\r\n    };\r\n\r\n    var computeUsedBitDepths = function(data) {\r\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\r\n      var bitDepths = {};\r\n      for (var i = 0; i < numBlocks; i++) {\r\n        var block = data.pixels.blocks[i];\r\n        if (block.encoding === 0) {\r\n          bitDepths.float32 = true;\r\n        } else if (block.encoding === 1) {\r\n          bitDepths[block.bitsPerPixel] = true;\r\n        } else {\r\n          bitDepths[0] = true;\r\n        }\r\n      }\r\n\r\n      return Object.keys(bitDepths);\r\n    };\r\n\r\n    var parse = function(input, fp, skipMask) {\r\n      var data = {};\r\n\r\n      // File header\r\n      var fileIdView = new Uint8Array(input, fp, 10);\r\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\r\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\r\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\r\n      }\r\n      fp += 10;\r\n      var view = new DataView(input, fp, 24);\r\n      data.fileVersion = view.getInt32(0, true);\r\n      data.imageType = view.getInt32(4, true);\r\n      data.height = view.getUint32(8, true);\r\n      data.width = view.getUint32(12, true);\r\n      data.maxZError = view.getFloat64(16, true);\r\n      fp += 24;\r\n\r\n      // Mask Header\r\n      if (!skipMask) {\r\n        view = new DataView(input, fp, 16);\r\n        data.mask = {};\r\n        data.mask.numBlocksY = view.getUint32(0, true);\r\n        data.mask.numBlocksX = view.getUint32(4, true);\r\n        data.mask.numBytes = view.getUint32(8, true);\r\n        data.mask.maxValue = view.getFloat32(12, true);\r\n        fp += 16;\r\n\r\n        // Mask Data\r\n        if (data.mask.numBytes > 0) {\r\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\r\n          view = new DataView(input, fp, data.mask.numBytes);\r\n          var cnt = view.getInt16(0, true);\r\n          var ip = 2, op = 0;\r\n          do {\r\n            if (cnt > 0) {\r\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\r\n            } else {\r\n              var val = view.getUint8(ip++);\r\n              cnt = -cnt;\r\n              while (cnt--) { bitset[op++] = val; }\r\n            }\r\n            cnt = view.getInt16(ip, true);\r\n            ip += 2;\r\n          } while (ip < data.mask.numBytes);\r\n          if ((cnt !== -32768) || (op < bitset.length)) {\r\n            throw \"Unexpected end of mask RLE encoding\";\r\n          }\r\n          data.mask.bitset = bitset;\r\n          fp += data.mask.numBytes;\r\n        }\r\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\r\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\r\n        }\r\n      }\r\n\r\n      // Pixel Header\r\n      view = new DataView(input, fp, 16);\r\n      data.pixels = {};\r\n      data.pixels.numBlocksY = view.getUint32(0, true);\r\n      data.pixels.numBlocksX = view.getUint32(4, true);\r\n      data.pixels.numBytes = view.getUint32(8, true);\r\n      data.pixels.maxValue = view.getFloat32(12, true);\r\n      fp += 16;\r\n\r\n      var numBlocksX = data.pixels.numBlocksX;\r\n      var numBlocksY = data.pixels.numBlocksY;\r\n      // the number of blocks specified in the header does not take into account the blocks at the end of\r\n      // each row/column with a special width/height that make the image complete in case the width is not\r\n      // evenly divisible by the number of blocks.\r\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\r\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\r\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\r\n      var blockI = 0;\r\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\r\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\r\n\r\n          // Block\r\n          var size = 0;\r\n          var bytesLeft = input.byteLength - fp;\r\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\r\n          var block = {};\r\n          data.pixels.blocks[blockI++] = block;\r\n          var headerByte = view.getUint8(0); size++;\r\n          block.encoding = headerByte & 63;\r\n          if (block.encoding > 3) {\r\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\r\n          }\r\n          if (block.encoding === 2) {\r\n            fp++;\r\n            continue;\r\n          }\r\n          if ((headerByte !== 0) && (headerByte !== 2)) {\r\n            headerByte >>= 6;\r\n            block.offsetType = headerByte;\r\n            if (headerByte === 2) {\r\n              block.offset = view.getInt8(1); size++;\r\n            } else if (headerByte === 1) {\r\n              block.offset = view.getInt16(1, true); size += 2;\r\n            } else if (headerByte === 0) {\r\n              block.offset = view.getFloat32(1, true); size += 4;\r\n            } else {\r\n              throw \"Invalid block offset type\";\r\n            }\r\n\r\n            if (block.encoding === 1) {\r\n              headerByte = view.getUint8(size); size++;\r\n              block.bitsPerPixel = headerByte & 63;\r\n              headerByte >>= 6;\r\n              block.numValidPixelsType = headerByte;\r\n              if (headerByte === 2) {\r\n                block.numValidPixels = view.getUint8(size); size++;\r\n              } else if (headerByte === 1) {\r\n                block.numValidPixels = view.getUint16(size, true); size += 2;\r\n              } else if (headerByte === 0) {\r\n                block.numValidPixels = view.getUint32(size, true); size += 4;\r\n              } else {\r\n                throw \"Invalid valid pixel count type\";\r\n              }\r\n            }\r\n          }\r\n          fp += size;\r\n\r\n          if (block.encoding === 3) {\r\n            continue;\r\n          }\r\n\r\n          var arrayBuf, store8;\r\n          if (block.encoding === 0) {\r\n            var numPixels = (data.pixels.numBytes - 1) / 4;\r\n            if (numPixels !== Math.floor(numPixels)) {\r\n              throw \"uncompressed block has invalid length\";\r\n            }\r\n            arrayBuf = new ArrayBuffer(numPixels * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\r\n            var rawData = new Float32Array(arrayBuf);\r\n            block.rawData = rawData;\r\n            fp += numPixels * 4;\r\n          } else if (block.encoding === 1) {\r\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\r\n            var dataWords = Math.ceil(dataBytes / 4);\r\n            arrayBuf = new ArrayBuffer(dataWords * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n            store8.set(new Uint8Array(input, fp, dataBytes));\r\n            block.stuffedData = new Uint32Array(arrayBuf);\r\n            fp += dataBytes;\r\n          }\r\n        }\r\n      }\r\n      data.eofOffset = fp;\r\n      return data;\r\n    };\r\n\r\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\r\n      var bitMask = (1 << bitsPerPixel) - 1;\r\n      var i = 0, o;\r\n      var bitsLeft = 0;\r\n      var n, buffer;\r\n      var nmax = Math.ceil((maxValue - offset) / scale);\r\n      // get rid of trailing bytes that are already part of next block\r\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n\r\n      for (o = 0; o < numPixels; o++) {\r\n        if (bitsLeft === 0) {\r\n          buffer = src[i++];\r\n          bitsLeft = 32;\r\n        }\r\n        if (bitsLeft >= bitsPerPixel) {\r\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n          bitsLeft -= bitsPerPixel;\r\n        } else {\r\n          var missingBits = (bitsPerPixel - bitsLeft);\r\n          n = ((buffer & bitMask) << missingBits) & bitMask;\r\n          buffer = src[i++];\r\n          bitsLeft = 32 - missingBits;\r\n          n += (buffer >>> bitsLeft);\r\n        }\r\n        //pixel values may exceed max due to quantization\r\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n      }\r\n      return dest;\r\n    };\r\n\r\n    return CntZImage;\r\n  })();\r\n\r\n  //version 2. Supports 2.1, 2.2, 2.3\r\n  var Lerc2Decode = (function() {\r\n    \"use strict\";\r\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\r\n    // the class was chosen to be future proof, following LercDecode.\r\n\r\n    /*****************************************\r\n    * private static class bitsutffer used by Lerc2Decode\r\n    *******************************************/\r\n    var BitStuffer = {\r\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\r\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\r\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0;\r\n        var n, buffer, missingBits, nmax;\r\n\r\n        // get rid of trailing bytes that are already part of next block\r\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n        if (lutArr) {\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n              bitsLeft -= bitsPerPixel;\r\n            }\r\n            else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = ((buffer & bitMask) << missingBits) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n += (buffer >>> bitsLeft);\r\n            }\r\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\r\n          }\r\n        }\r\n        else {\r\n          nmax = Math.ceil((maxValue - offset) / scale);\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n              bitsLeft -= bitsPerPixel;\r\n            }\r\n            else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = ((buffer & bitMask) << missingBits) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n += (buffer >>> bitsLeft);\r\n            }\r\n            //pixel values may exceed max due to quantization\r\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n          }\r\n        }\r\n      },\r\n\r\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\r\n        var buffer;\r\n        var dest = [];\r\n\r\n        // get rid of trailing bytes that are already part of next block\r\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n\r\n        var nmax = Math.ceil((maxValue - offset) / scale);\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n            bitsLeft -= bitsPerPixel;\r\n          } else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = ((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n += (buffer >>> bitsLeft);\r\n          }\r\n          //dest.push(n);\r\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n        }\r\n        dest.unshift(offset);//1st one\r\n        return dest;\r\n      },\r\n\r\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0, bitPos = 0;\r\n        var n, buffer, missingBits;\r\n        if (lutArr) {\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n              bitPos = 0;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              n = ((buffer >>> bitPos) & bitMask);\r\n              bitsLeft -= bitsPerPixel;\r\n              bitPos += bitsPerPixel;\r\n            } else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = (buffer >>> bitPos) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n              bitPos = missingBits;\r\n            }\r\n            dest[o] = lutArr[n];\r\n          }\r\n        }\r\n        else {\r\n          var nmax = Math.ceil((maxValue - offset) / scale);\r\n          for (o = 0; o < numPixels; o++) {\r\n            if (bitsLeft === 0) {\r\n              buffer = src[i++];\r\n              bitsLeft = 32;\r\n              bitPos = 0;\r\n            }\r\n            if (bitsLeft >= bitsPerPixel) {\r\n              //no unsigned left shift\r\n              n = ((buffer >>> bitPos) & bitMask);\r\n              bitsLeft -= bitsPerPixel;\r\n              bitPos += bitsPerPixel;\r\n            } else {\r\n              missingBits = (bitsPerPixel - bitsLeft);\r\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\r\n              buffer = src[i++];\r\n              bitsLeft = 32 - missingBits;\r\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n              bitPos = missingBits;\r\n            }\r\n            //pixel values may exceed max due to quantization\r\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n          }\r\n        }\r\n        return dest;\r\n      },\r\n\r\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\r\n        var buffer;\r\n        var dest = [];\r\n        var nmax = Math.ceil((maxValue - offset) / scale);\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n            bitPos = 0;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            //no unsigned left shift\r\n            n = ((buffer >>> bitPos) & bitMask);\r\n            bitsLeft -= bitsPerPixel;\r\n            bitPos += bitsPerPixel;\r\n          } else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n            bitPos = missingBits;\r\n          }\r\n          //dest.push(n);\r\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\r\n        }\r\n        dest.unshift(offset);\r\n        return dest;\r\n      },\r\n\r\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0;\r\n        var n, buffer, missingBits;\r\n\r\n        // get rid of trailing bytes that are already part of next block\r\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\r\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\r\n\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\r\n            bitsLeft -= bitsPerPixel;\r\n          }\r\n          else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = ((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n += (buffer >>> bitsLeft);\r\n          }\r\n          dest[o] = n;\r\n        }\r\n        return dest;\r\n      },\r\n\r\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\r\n        var bitMask = (1 << bitsPerPixel) - 1;\r\n        var i = 0, o;\r\n        var bitsLeft = 0, bitPos = 0;\r\n        var n, buffer, missingBits;\r\n        //micro-optimizations\r\n        for (o = 0; o < numPixels; o++) {\r\n          if (bitsLeft === 0) {\r\n            buffer = src[i++];\r\n            bitsLeft = 32;\r\n            bitPos = 0;\r\n          }\r\n          if (bitsLeft >= bitsPerPixel) {\r\n            //no unsigned left shift\r\n            n = ((buffer >>> bitPos) & bitMask);\r\n            bitsLeft -= bitsPerPixel;\r\n            bitPos += bitsPerPixel;\r\n          } else {\r\n            missingBits = (bitsPerPixel - bitsLeft);\r\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\r\n            buffer = src[i++];\r\n            bitsLeft = 32 - missingBits;\r\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\r\n            bitPos = missingBits;\r\n          }\r\n          dest[o] = n;\r\n        }\r\n        return dest;\r\n      }\r\n    };\r\n\r\n    /*****************************************\r\n    *private static class used by Lerc2Decode\r\n    ******************************************/\r\n    var Lerc2Helpers = {\r\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\r\n      computeChecksumFletcher32: function(input) {\r\n\r\n        var sum1 = 0xffff, sum2 = 0xffff;\r\n        var len = input.length;\r\n        var words = Math.floor(len / 2);\r\n        var i = 0;\r\n        while (words) {\r\n          var tlen = (words >= 359) ? 359 : words;\r\n          words -= tlen;\r\n          do {\r\n            sum1 += (input[i++] << 8);\r\n            sum2 += sum1 += input[i++];\r\n          } while (--tlen);\r\n\r\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\r\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\r\n        }\r\n\r\n        // add the straggler byte if it exists\r\n        if (len & 1) {\r\n          sum2 += sum1 += (input[i] << 8);\r\n        }\r\n        // second reduction step to reduce sums to 16 bits\r\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\r\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\r\n\r\n        return (sum2 << 16 | sum1) >>> 0;\r\n      },\r\n\r\n      readHeaderInfo: function(input, data) {\r\n        var ptr = data.ptr;\r\n        var fileIdView = new Uint8Array(input, ptr, 6);\r\n        var headerInfo = {};\r\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\r\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\r\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\r\n        }\r\n        ptr += 6;\r\n        var view = new DataView(input, ptr, 8);\r\n        var fileVersion = view.getInt32(0, true);\r\n        headerInfo.fileVersion = fileVersion;\r\n        ptr += 4;\r\n        if (fileVersion >= 3) {\r\n          headerInfo.checksum = view.getUint32(4, true); //nrows\r\n          ptr += 4;\r\n        }\r\n\r\n        //keys start from here\r\n        view = new DataView(input, ptr, 12);\r\n        headerInfo.height = view.getUint32(0, true); //nrows\r\n        headerInfo.width = view.getUint32(4, true); //ncols\r\n        ptr += 8;\r\n        if (fileVersion >= 4) {\r\n          headerInfo.numDims = view.getUint32(8, true);\r\n          ptr += 4;\r\n        }\r\n        else {\r\n          headerInfo.numDims = 1;\r\n        }\r\n\r\n        view = new DataView(input, ptr, 40);\r\n        headerInfo.numValidPixel = view.getUint32(0, true);\r\n        headerInfo.microBlockSize = view.getInt32(4, true);\r\n        headerInfo.blobSize = view.getInt32(8, true);\r\n        headerInfo.imageType = view.getInt32(12, true);\r\n\r\n        headerInfo.maxZError = view.getFloat64(16, true);\r\n        headerInfo.zMin = view.getFloat64(24, true);\r\n        headerInfo.zMax = view.getFloat64(32, true);\r\n        ptr += 40;\r\n        data.headerInfo = headerInfo;\r\n        data.ptr = ptr;\r\n\r\n        var checksum, keyLength;\r\n        if (fileVersion >= 3) {\r\n          keyLength = fileVersion >= 4 ? 52 : 48;\r\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\r\n          if (checksum !== headerInfo.checksum) {\r\n            throw \"Checksum failed.\";\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n\r\n      checkMinMaxRanges: function(input, data) {\r\n        var headerInfo = data.headerInfo;\r\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\r\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\r\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\r\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\r\n        data.ptr += (2 * rangeBytes);\r\n        var i, equal = true;\r\n        for (i = 0; i < headerInfo.numDims; i++) {\r\n          if (minValues[i] !== maxValues[i]) {\r\n            equal = false;\r\n            break;\r\n          }\r\n        }\r\n        headerInfo.minValues = minValues;\r\n        headerInfo.maxValues = maxValues;\r\n        return equal;\r\n      },\r\n\r\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\r\n        var rawData;\r\n        if (OutPixelTypeArray === Uint8Array) {\r\n          rawData = new Uint8Array(input, ptr, numBytes);\r\n        }\r\n        else {\r\n          var arrayBuf = new ArrayBuffer(numBytes);\r\n          var store8 = new Uint8Array(arrayBuf);\r\n          store8.set(new Uint8Array(input, ptr, numBytes));\r\n          rawData = new OutPixelTypeArray(arrayBuf);\r\n        }\r\n        return rawData;\r\n      },\r\n\r\n      readMask: function(input, data) {\r\n        var ptr = data.ptr;\r\n        var headerInfo = data.headerInfo;\r\n        var numPixels = headerInfo.width * headerInfo.height;\r\n        var numValidPixel = headerInfo.numValidPixel;\r\n\r\n        var view = new DataView(input, ptr, 4);\r\n        var mask = {};\r\n        mask.numBytes = view.getUint32(0, true);\r\n        ptr += 4;\r\n\r\n        // Mask Data\r\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\r\n          throw (\"invalid mask\");\r\n        }\r\n        var bitset, resultMask;\r\n        if (numValidPixel === 0) {\r\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\r\n          mask.bitset = bitset;\r\n          resultMask = new Uint8Array(numPixels);\r\n          data.pixels.resultMask = resultMask;\r\n          ptr += mask.numBytes;\r\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\r\n        else if (mask.numBytes > 0) {\r\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\r\n          view = new DataView(input, ptr, mask.numBytes);\r\n          var cnt = view.getInt16(0, true);\r\n          var ip = 2, op = 0, val = 0;\r\n          do {\r\n            if (cnt > 0) {\r\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\r\n            } else {\r\n              val = view.getUint8(ip++);\r\n              cnt = -cnt;\r\n              while (cnt--) { bitset[op++] = val; }\r\n            }\r\n            cnt = view.getInt16(ip, true);\r\n            ip += 2;\r\n          } while (ip < mask.numBytes);\r\n          if ((cnt !== -32768) || (op < bitset.length)) {\r\n            throw \"Unexpected end of mask RLE encoding\";\r\n          }\r\n\r\n          resultMask = new Uint8Array(numPixels);\r\n          var mb = 0, k = 0;\r\n\r\n          for (k = 0; k < numPixels; k++) {\r\n            if (k & 7) {\r\n              mb = bitset[k >> 3];\r\n              mb <<= k & 7;\r\n            }\r\n            else {\r\n              mb = bitset[k >> 3];\r\n            }\r\n            if (mb & 128) {\r\n              resultMask[k] = 1;\r\n            }\r\n          }\r\n          data.pixels.resultMask = resultMask;\r\n\r\n          mask.bitset = bitset;\r\n          ptr += mask.numBytes;\r\n        }\r\n        data.ptr = ptr;\r\n        data.mask = mask;\r\n        return true;\r\n      },\r\n\r\n      readDataOneSweep: function(input, data, OutPixelTypeArray) {\r\n        var ptr = data.ptr;\r\n        var headerInfo = data.headerInfo;\r\n        var numDims = headerInfo.numDims;\r\n        var numPixels = headerInfo.width * headerInfo.height;\r\n        var imageType = headerInfo.imageType;\r\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\r\n        //data.pixels.numBytes = numBytes;\r\n        var rawData;\r\n        var mask = data.pixels.resultMask;\r\n        if (OutPixelTypeArray === Uint8Array) {\r\n          rawData = new Uint8Array(input, ptr, numBytes);\r\n        }\r\n        else {\r\n          var arrayBuf = new ArrayBuffer(numBytes);\r\n          var store8 = new Uint8Array(arrayBuf);\r\n          store8.set(new Uint8Array(input, ptr, numBytes));\r\n          rawData = new OutPixelTypeArray(arrayBuf);\r\n        }\r\n        if (rawData.length === numPixels * numDims) {\r\n          data.pixels.resultPixels = rawData;\r\n        }\r\n        else  //mask\r\n        {\r\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\r\n          var z = 0, k = 0, i = 0, nStart = 0;\r\n          if (numDims > 1) {\r\n            for (i=0; i < numDims; i++) {\r\n              nStart = i * numPixels;\r\n              for (k = 0; k < numPixels; k++) {\r\n                if (mask[k]) {\r\n                  data.pixels.resultPixels[nStart + k] = rawData[z++];\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            for (k = 0; k < numPixels; k++) {\r\n              if (mask[k]) {\r\n                data.pixels.resultPixels[k] = rawData[z++];\r\n              }\r\n            }\r\n          }\r\n        }\r\n        ptr += numBytes;\r\n        data.ptr = ptr;       //return data;\r\n        return true;\r\n      },\r\n\r\n      readHuffmanTree: function(input, data) {\r\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\r\n        //var size_max = 1 << BITS_MAX;\r\n        /* ************************\r\n         * reading code table\r\n         *************************/\r\n        var view = new DataView(input, data.ptr, 16);\r\n        data.ptr += 16;\r\n        var version = view.getInt32(0, true);\r\n        if (version < 2) {\r\n          throw \"unsupported Huffman version\";\r\n        }\r\n        var size = view.getInt32(4, true);\r\n        var i0 = view.getInt32(8, true);\r\n        var i1 = view.getInt32(12, true);\r\n        if (i0 >= i1) {\r\n          return false;\r\n        }\r\n        var blockDataBuffer = new Uint32Array(i1 - i0);\r\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\r\n        var codeTable = []; //size\r\n        var i, j, k, len;\r\n\r\n        for (i = i0; i < i1; i++) {\r\n          j = i - (i < size ? 0 : size);//wrap around\r\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\r\n        }\r\n\r\n        var dataBytes = input.byteLength - data.ptr;\r\n        var dataWords = Math.ceil(dataBytes / 4);\r\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\r\n        var store8 = new Uint8Array(arrayBuf);\r\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\r\n        var bitPos = 0, word, srcPtr = 0;\r\n        word = stuffedData[0];\r\n        for (i = i0; i < i1; i++) {\r\n          j = i - (i < size ? 0 : size);//wrap around\r\n          len = codeTable[j].first;\r\n          if (len > 0) {\r\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\r\n\r\n            if (32 - bitPos >= len) {\r\n              bitPos += len;\r\n              if (bitPos === 32) {\r\n                bitPos = 0;\r\n                srcPtr++;\r\n                word = stuffedData[srcPtr];\r\n              }\r\n            }\r\n            else {\r\n              bitPos += len - 32;\r\n              srcPtr++;\r\n              word = stuffedData[srcPtr];\r\n              codeTable[j].second |= word >>> (32 - bitPos);\r\n            }\r\n          }\r\n        }\r\n\r\n        //finished reading code table\r\n\r\n        /* ************************\r\n         * building lut\r\n         *************************/\r\n        var numBitsLUT = 0, numBitsLUTQick = 0;\r\n        var tree = new TreeNode();\r\n        for (i = 0; i < codeTable.length; i++) {\r\n          if (codeTable[i] !== undefined) {\r\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\r\n          }\r\n        }\r\n        if (numBitsLUT >= BITS_MAX) {\r\n          numBitsLUTQick = BITS_MAX;\r\n        }\r\n        else {\r\n          numBitsLUTQick = numBitsLUT;\r\n        }\r\n        if (numBitsLUT >= 30) {\r\n          console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\r\n        }\r\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\r\n        for (i = i0; i < i1; i++) {\r\n          j = i - (i < size ? 0 : size);//wrap around\r\n          len = codeTable[j].first;\r\n          if (len > 0) {\r\n            entry = [len, j];\r\n            if (len <= numBitsLUTQick) {\r\n              code = codeTable[j].second << (numBitsLUTQick - len);\r\n              numEntries = 1 << (numBitsLUTQick - len);\r\n              for (k = 0; k < numEntries; k++) {\r\n                decodeLut[code | k] = entry;\r\n              }\r\n            }\r\n            else {\r\n              //build tree\r\n              code = codeTable[j].second;\r\n              node = tree;\r\n              for (jj = len - 1; jj >= 0; jj--) {\r\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\r\n                if (currentBit) {\r\n                  if (!node.right) {\r\n                    node.right = new TreeNode();\r\n                  }\r\n                  node = node.right;\r\n                }\r\n                else {\r\n                  if (!node.left) {\r\n                    node.left = new TreeNode();\r\n                  }\r\n                  node = node.left;\r\n                }\r\n                if (jj === 0 && !node.val) {\r\n                  node.val = entry[1];\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        return {\r\n          decodeLut: decodeLut,\r\n          numBitsLUTQick: numBitsLUTQick,\r\n          numBitsLUT: numBitsLUT,\r\n          tree: tree,\r\n          stuffedData: stuffedData,\r\n          srcPtr: srcPtr,\r\n          bitPos: bitPos\r\n        };\r\n      },\r\n\r\n      readHuffman: function(input, data, OutPixelTypeArray) {\r\n        var headerInfo = data.headerInfo;\r\n        var numDims = headerInfo.numDims;\r\n        var height = data.headerInfo.height;\r\n        var width = data.headerInfo.width;\r\n        var numPixels = width * height;\r\n        //var size_max = 1 << BITS_MAX;\r\n        /* ************************\r\n         * reading huffman structure info\r\n         *************************/\r\n        var huffmanInfo = this.readHuffmanTree(input, data);\r\n        var decodeLut = huffmanInfo.decodeLut;\r\n        var tree = huffmanInfo.tree;\r\n        //stuffedData includes huffman headers\r\n        var stuffedData = huffmanInfo.stuffedData;\r\n        var srcPtr = huffmanInfo.srcPtr;\r\n        var bitPos = huffmanInfo.bitPos;\r\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\r\n        var numBitsLUT = huffmanInfo.numBitsLUT;\r\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\r\n        /*************************\r\n        *  decode\r\n        ***************************/\r\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\r\n        var i, j, k, ii;\r\n        var prevVal = 0;\r\n        if (bitPos > 0) {\r\n          srcPtr++;\r\n          bitPos = 0;\r\n        }\r\n        var word = stuffedData[srcPtr];\r\n        var deltaEncode = data.encodeMode === 1;\r\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\r\n        var resultPixels = resultPixelsAllDim;\r\n        var iDim;\r\n        for (iDim = 0; iDim < headerInfo.numDims; iDim++) {\r\n          if (numDims > 1) {\r\n            //get the mem block of current dimension\r\n            resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\r\n            prevVal = 0;\r\n          }\r\n          if (data.headerInfo.numValidPixel === width * height) { //all valid\r\n            for (k = 0, i = 0; i < height; i++) {\r\n              for (j = 0; j < width; j++, k++) {\r\n                val = 0;\r\n                valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\r\n                valTmpQuick = valTmp;// >>> deltaBits;\r\n                if (32 - bitPos < numBitsLUTQick) {\r\n                  valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\r\n                  valTmpQuick = valTmp;// >>> deltaBits;\r\n                }\r\n                if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\r\n                {\r\n                  val = decodeLut[valTmpQuick][1];\r\n                  bitPos += decodeLut[valTmpQuick][0];\r\n                }\r\n                else {\r\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUT);\r\n                  valTmpQuick = valTmp;// >>> deltaBits;\r\n                  if (32 - bitPos < numBitsLUT) {\r\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\r\n                    valTmpQuick = valTmp;// >>> deltaBits;\r\n                  }\r\n                  node = tree;\r\n                  for (ii = 0; ii < numBitsLUT; ii++) {\r\n                    currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\r\n                    node = currentBit ? node.right : node.left;\r\n                    if (!(node.left || node.right)) {\r\n                      val = node.val;\r\n                      bitPos = bitPos + ii + 1;\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (bitPos >= 32) {\r\n                  bitPos -= 32;\r\n                  srcPtr++;\r\n                  word = stuffedData[srcPtr];\r\n                }\r\n\r\n                delta = val - offset;\r\n                if (deltaEncode) {\r\n                  if (j > 0) {\r\n                    delta += prevVal;    // use overflow\r\n                  }\r\n                  else if (i > 0) {\r\n                    delta += resultPixels[k - width];\r\n                  }\r\n                  else {\r\n                    delta += prevVal;\r\n                  }\r\n                  delta &= 0xFF; //overflow\r\n                  resultPixels[k] = delta;//overflow\r\n                  prevVal = delta;\r\n                }\r\n                else {\r\n                  resultPixels[k] = delta;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else { //not all valid, use mask\r\n            for (k = 0, i = 0; i < height; i++) {\r\n              for (j = 0; j < width; j++, k++) {\r\n                if (mask[k]) {\r\n                  val = 0;\r\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\r\n                  valTmpQuick = valTmp;// >>> deltaBits;\r\n                  if (32 - bitPos < numBitsLUTQick) {\r\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\r\n                    valTmpQuick = valTmp;// >>> deltaBits;\r\n                  }\r\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\r\n                  {\r\n                    val = decodeLut[valTmpQuick][1];\r\n                    bitPos += decodeLut[valTmpQuick][0];\r\n                  }\r\n                  else {\r\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\r\n                    valTmpQuick = valTmp;// >>> deltaBits;\r\n                    if (32 - bitPos < numBitsLUT) {\r\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\r\n                      valTmpQuick = valTmp;// >>> deltaBits;\r\n                    }\r\n                    node = tree;\r\n                    for (ii = 0; ii < numBitsLUT; ii++) {\r\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\r\n                      node = currentBit ? node.right : node.left;\r\n                      if (!(node.left || node.right)) {\r\n                        val = node.val;\r\n                        bitPos = bitPos + ii + 1;\r\n                        break;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  if (bitPos >= 32) {\r\n                    bitPos -= 32;\r\n                    srcPtr++;\r\n                    word = stuffedData[srcPtr];\r\n                  }\r\n\r\n                  delta = val - offset;\r\n                  if (deltaEncode) {\r\n                    if (j > 0 && mask[k - 1]) {\r\n                      delta += prevVal;    // use overflow\r\n                    }\r\n                    else if (i > 0 && mask[k - width]) {\r\n                      delta += resultPixels[k - width];\r\n                    }\r\n                    else {\r\n                      delta += prevVal;\r\n                    }\r\n\r\n                    delta &= 0xFF; //overflow\r\n                    resultPixels[k] = delta;//overflow\r\n                    prevVal = delta;\r\n                  }\r\n                  else {\r\n                    resultPixels[k] = delta;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\r\n        }\r\n        data.pixels.resultPixels = resultPixelsAllDim;\r\n      },\r\n\r\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\r\n        {\r\n          //bitstuff encoding is 3\r\n          var headerInfo = data.headerInfo;\r\n          var fileVersion = headerInfo.fileVersion;\r\n          //var block = {};\r\n          var blockPtr = 0;\r\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\r\n          var view = new DataView(input, data.ptr, viewByteLength);\r\n          var headerByte = view.getUint8(0);\r\n          blockPtr++;\r\n          var bits67 = headerByte >> 6;\r\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\r\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\r\n          var numBits = headerByte & 31;\r\n          var numElements = 0;\r\n          if (n === 1) {\r\n            numElements = view.getUint8(blockPtr); blockPtr++;\r\n          } else if (n === 2) {\r\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\r\n          } else if (n === 4) {\r\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\r\n          } else {\r\n            throw \"Invalid valid pixel count type\";\r\n          }\r\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\r\n          //offset = offset || 0;\r\n          var scale = 2 * headerInfo.maxZError;\r\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\r\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\r\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\r\n          if (doLut) {\r\n            data.counter.lut++;\r\n            lutBytes = view.getUint8(blockPtr);\r\n            lutBitsPerElement = numBits;\r\n            blockPtr++;\r\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\r\n            dataWords = Math.ceil(dataBytes / 4);\r\n            arrayBuf = new ArrayBuffer(dataWords * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n\r\n            data.ptr += blockPtr;\r\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n\r\n            lutData = new Uint32Array(arrayBuf);\r\n            data.ptr += dataBytes;\r\n\r\n            bitsPerPixel = 0;\r\n            while ((lutBytes - 1) >>> bitsPerPixel) {\r\n              bitsPerPixel++;\r\n            }\r\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\r\n            dataWords = Math.ceil(dataBytes / 4);\r\n            arrayBuf = new ArrayBuffer(dataWords * 4);\r\n            store8 = new Uint8Array(arrayBuf);\r\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n            stuffedData = new Uint32Array(arrayBuf);\r\n            data.ptr += dataBytes;\r\n            if (fileVersion >= 3) {\r\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\r\n            }\r\n            else {\r\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\r\n            }\r\n            //lutArr.unshift(0);\r\n            if (fileVersion >= 3) {\r\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\r\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\r\n            }\r\n            else {\r\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\r\n            }\r\n          }\r\n          else {\r\n            //console.debug(\"bitstuffer\");\r\n            data.counter.bitstuffer++;\r\n            bitsPerPixel = numBits;\r\n            data.ptr += blockPtr;\r\n            if (bitsPerPixel > 0) {\r\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\r\n              dataWords = Math.ceil(dataBytes / 4);\r\n              arrayBuf = new ArrayBuffer(dataWords * 4);\r\n              store8 = new Uint8Array(arrayBuf);\r\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\r\n              stuffedData = new Uint32Array(arrayBuf);\r\n              data.ptr += dataBytes;\r\n              if (fileVersion >= 3) {\r\n                if (offset === null) {\r\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\r\n                }\r\n                else {\r\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\r\n                }\r\n              }\r\n              else {\r\n                if (offset === null) {\r\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\r\n                }\r\n                else {\r\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      },\r\n\r\n      readTiles: function(input, data, OutPixelTypeArray) {\r\n        var headerInfo = data.headerInfo;\r\n        var width = headerInfo.width;\r\n        var height = headerInfo.height;\r\n        var microBlockSize = headerInfo.microBlockSize;\r\n        var imageType = headerInfo.imageType;\r\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\r\n        var numBlocksX = Math.ceil(width / microBlockSize);\r\n        var numBlocksY = Math.ceil(height / microBlockSize);\r\n        data.pixels.numBlocksY = numBlocksY;\r\n        data.pixels.numBlocksX = numBlocksX;\r\n        data.pixels.ptr = 0;\r\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\r\n        var view, block, arrayBuf, store8, rawData;\r\n        var blockEncoding;\r\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\r\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\r\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\r\n        var offsetType, offset;\r\n        var numDims = headerInfo.numDims, iDim;\r\n        var mask = data.pixels.resultMask;\r\n        var resultPixels = data.pixels.resultPixels;\r\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\r\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\r\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\r\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\r\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\r\n\r\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\r\n            outStride = width - thisBlockWidth;\r\n\r\n\r\n            for (iDim = 0; iDim < numDims; iDim++) {\r\n              if (numDims > 1) {\r\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, width * height * iDim * dataTypeSize, width * height);\r\n              }\r\n              bytesLeft = input.byteLength - data.ptr;\r\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\r\n              block = {};\r\n              blockPtr = 0;\r\n              headerByte = view.getUint8(0);\r\n              blockPtr++;\r\n              bits67 = (headerByte >> 6) & 0xFF;\r\n              testCode = (headerByte >> 2) & 15;    // use bits 2345 for integrity check\r\n              if (testCode !== (((blockX * microBlockSize) >> 3) & 15)) {\r\n                throw \"integrity issue\";\r\n                //return false;\r\n              }\r\n\r\n              blockEncoding = headerByte & 3;\r\n              if (blockEncoding > 3) {\r\n                data.ptr += blockPtr;\r\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\r\n              }\r\n              else if (blockEncoding === 2) { //constant 0\r\n                data.counter.constant++;\r\n                data.ptr += blockPtr;\r\n                continue;\r\n              }\r\n              else if (blockEncoding === 0) {  //uncompressed\r\n                data.counter.uncompressed++;\r\n                data.ptr += blockPtr;\r\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\r\n                bytesleft = input.byteLength - data.ptr;\r\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\r\n                //bit alignment\r\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\r\n                store8 = new Uint8Array(arrayBuf);\r\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\r\n                rawData = new OutPixelTypeArray(arrayBuf);\r\n                z = 0;\r\n                if (mask) {\r\n                  for (row = 0; row < thisBlockHeight; row++) {\r\n                    for (col = 0; col < thisBlockWidth; col++) {\r\n                      if (mask[outPtr]) {\r\n                        resultPixels[outPtr] = rawData[z++];\r\n                      }\r\n                      outPtr++;\r\n                    }\r\n                    outPtr += outStride;\r\n                  }\r\n                }\r\n                else {//all valid\r\n                  for (row = 0; row < thisBlockHeight; row++) {\r\n                    for (col = 0; col < thisBlockWidth; col++) {\r\n                      resultPixels[outPtr++] = rawData[z++];\r\n                    }\r\n                    outPtr += outStride;\r\n                  }\r\n                }\r\n                data.ptr += z * dataTypeSize;\r\n              }\r\n              else { //1 or 3\r\n                offsetType = Lerc2Helpers.getDataTypeUsed(imageType, bits67);\r\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\r\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\r\n                if (blockEncoding === 3) //constant offset value\r\n                {\r\n                  data.ptr += blockPtr;\r\n                  data.counter.constantoffset++;\r\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\r\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\r\n                  if (mask) {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        if (mask[outPtr]) {\r\n                          resultPixels[outPtr] = offset;\r\n                        }\r\n                        outPtr++;\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                  else {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        resultPixels[outPtr++] = offset;\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                }\r\n                else { //bitstuff encoding is 3\r\n                  data.ptr += blockPtr;\r\n                  //heavy lifting\r\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\r\n                  blockPtr = 0;\r\n                  if (mask) {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        if (mask[outPtr]) {\r\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\r\n                        }\r\n                        outPtr++;\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                  else {\r\n                    for (row = 0; row < thisBlockHeight; row++) {\r\n                      for (col = 0; col < thisBlockWidth; col++) {\r\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\r\n                      }\r\n                      outPtr += outStride;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      /*****************\r\n      *  private methods (helper methods)\r\n      *****************/\r\n\r\n      formatFileInfo: function(data) {\r\n        return {\r\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\r\n          \"fileVersion\": data.headerInfo.fileVersion,\r\n          \"imageType\": data.headerInfo.imageType,\r\n          \"height\": data.headerInfo.height,\r\n          \"width\": data.headerInfo.width,\r\n          \"numValidPixel\": data.headerInfo.numValidPixel,\r\n          \"microBlockSize\": data.headerInfo.microBlockSize,\r\n          \"blobSize\": data.headerInfo.blobSize,\r\n          \"maxZError\": data.headerInfo.maxZError,\r\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\r\n          \"eofOffset\": data.eofOffset,\r\n          \"mask\": data.mask ? {\r\n            \"numBytes\": data.mask.numBytes\r\n          } : null,\r\n          \"pixels\": {\r\n            \"numBlocksX\": data.pixels.numBlocksX,\r\n            \"numBlocksY\": data.pixels.numBlocksY,\r\n            //\"numBytes\": data.pixels.numBytes,\r\n            \"maxValue\": data.headerInfo.zMax,\r\n            \"minValue\": data.headerInfo.zMin,\r\n            \"noDataValue\": data.noDataValue\r\n          }\r\n        };\r\n      },\r\n\r\n      constructConstantSurface: function(data) {\r\n        var val = data.headerInfo.zMax;\r\n        var numDims =  data.headerInfo.numDims;\r\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\r\n        var numPixelAllDims = numPixels * numDims;\r\n        var i=0, k = 0, nStart=0;\r\n        var mask = data.pixels.resultMask;\r\n        if (mask) {\r\n          if (numDims > 1) {\r\n            for (i=0; i < numDims; i++) {\r\n              nStart = i * numPixels;\r\n              for (k = 0; k < numPixels; k++) {\r\n                if (mask[k]) {\r\n                  data.pixels.resultPixels[nStart + k] = val;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          else {\r\n            for (k = 0; k < numPixels; k++) {\r\n              if (mask[k]) {\r\n                data.pixels.resultPixels[k] = val;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (data.pixels.resultPixels.fill) {\r\n            data.pixels.resultPixels.fill(val);\r\n          }\r\n          else {\r\n            for (k = 0; k < numPixelAllDims; k++) {\r\n              data.pixels.resultPixels[k] = val;\r\n            }\r\n          }\r\n        }\r\n        return;\r\n      },\r\n\r\n      getDataTypeArray: function(t) {\r\n        var tp;\r\n        switch (t) {\r\n          case 0: //char\r\n            tp = Int8Array;\r\n            break;\r\n          case 1: //byte\r\n            tp = Uint8Array;\r\n            break;\r\n          case 2: //short\r\n            tp = Int16Array;\r\n            break;\r\n          case 3: //ushort\r\n            tp = Uint16Array;\r\n            break;\r\n          case 4:\r\n            tp = Int32Array;\r\n            break;\r\n          case 5:\r\n            tp = Uint32Array;\r\n            break;\r\n          case 6:\r\n            tp = Float32Array;\r\n            break;\r\n          case 7:\r\n            tp = Float64Array;\r\n            break;\r\n          default:\r\n            tp = Float32Array;\r\n        }\r\n        return tp;\r\n      },\r\n\r\n      getPixelType: function(t) {\r\n        var tp;\r\n        switch (t) {\r\n          case 0: //char\r\n            tp = \"S8\";\r\n            break;\r\n          case 1: //byte\r\n            tp = \"U8\";\r\n            break;\r\n          case 2: //short\r\n            tp = \"S16\";\r\n            break;\r\n          case 3: //ushort\r\n            tp = \"U16\";\r\n            break;\r\n          case 4:\r\n            tp = \"S32\";\r\n            break;\r\n          case 5:\r\n            tp = \"U32\";\r\n            break;\r\n          case 6:\r\n            tp = \"F32\";\r\n            break;\r\n          case 7:\r\n            tp = \"F64\"; //not supported\r\n            break;\r\n          default:\r\n            tp = \"F32\";\r\n        }\r\n        return tp;\r\n      },\r\n\r\n      isValidPixelValue: function(t, val) {\r\n        if (val === null) {\r\n          return false;\r\n        }\r\n        var isValid;\r\n        switch (t) {\r\n          case 0: //char\r\n            isValid = val >= -128 && val <= 127;\r\n            break;\r\n          case 1: //byte  (unsigned char)\r\n            isValid = val >= 0 && val <= 255;\r\n            break;\r\n          case 2: //short\r\n            isValid = val >= -32768 && val <= 32767;\r\n            break;\r\n          case 3: //ushort\r\n            isValid = val >= 0 && val <= 65536;\r\n            break;\r\n          case 4: //int 32\r\n            isValid = val >= -2147483648 && val <= 2147483647;\r\n            break;\r\n          case 5: //uinit 32\r\n            isValid = val >= 0 && val <= 4294967296;\r\n            break;\r\n          case 6:\r\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\r\n            break;\r\n          case 7:\r\n            isValid = val >= 5e-324 && val <= 1.7976931348623157e+308;\r\n            break;\r\n          default:\r\n            isValid = false;\r\n        }\r\n        return isValid;\r\n      },\r\n\r\n      getDataTypeSize: function(t) {\r\n        var s = 0;\r\n        switch (t) {\r\n          case 0: //ubyte\r\n          case 1: //byte\r\n            s = 1;\r\n            break;\r\n          case 2: //short\r\n          case 3: //ushort\r\n            s = 2;\r\n            break;\r\n          case 4:\r\n          case 5:\r\n          case 6:\r\n            s = 4;\r\n            break;\r\n          case 7:\r\n            s = 8;\r\n            break;\r\n          default:\r\n            s = t;\r\n        }\r\n        return s;\r\n      },\r\n\r\n      getDataTypeUsed: function(dt, tc) {\r\n        var t = dt;\r\n        switch (dt) {\r\n          case 2: //short\r\n          case 4: //long\r\n            t = dt - tc;\r\n            break;\r\n          case 3: //ushort\r\n          case 5: //ulong\r\n            t = dt - 2 * tc;\r\n            break;\r\n          case 6: //float\r\n            if (0 === tc) {\r\n              t = dt;\r\n            }\r\n            else if (1 === tc) {\r\n              t = 2;\r\n            }\r\n            else {\r\n              t = 1;//byte\r\n            }\r\n            break;\r\n          case 7: //double\r\n            if (0 === tc) {\r\n              t = dt;\r\n            }\r\n            else {\r\n              t = dt - 2 * tc + 1;\r\n            }\r\n            break;\r\n          default:\r\n            t = dt;\r\n            break;\r\n        }\r\n        return t;\r\n      },\r\n\r\n      getOnePixel: function(block, blockPtr, offsetType, view) {\r\n        var temp = 0;\r\n        switch (offsetType) {\r\n          case 0: //char\r\n            temp = view.getInt8(blockPtr);\r\n            break;\r\n          case 1: //byte\r\n            temp = view.getUint8(blockPtr);\r\n            break;\r\n          case 2:\r\n            temp = view.getInt16(blockPtr, true);\r\n            break;\r\n          case 3:\r\n            temp = view.getUint16(blockPtr, true);\r\n            break;\r\n          case 4:\r\n            temp = view.getInt32(blockPtr, true);\r\n            break;\r\n          case 5:\r\n            temp = view.getUInt32(blockPtr, true);\r\n            break;\r\n          case 6:\r\n            temp = view.getFloat32(blockPtr, true);\r\n            break;\r\n          case 7:\r\n            //temp = view.getFloat64(blockPtr, true);\r\n            //blockPtr += 8;\r\n            //lerc2 encoding doesnt handle float 64, force to float32???\r\n            temp = view.getFloat64(blockPtr, true);\r\n            break;\r\n          default:\r\n            throw (\"the decoder does not understand this pixel type\");\r\n        }\r\n        return temp;\r\n      }\r\n    };\r\n\r\n    /***************************************************\r\n    *private class for a tree node. Huffman code is in Lerc2Helpers\r\n    ****************************************************/\r\n    var TreeNode = function(val, left, right) {\r\n      this.val = val;\r\n      this.left = left;\r\n      this.right = right;\r\n    };\r\n\r\n    var Lerc2Decode = {\r\n      /*\r\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\r\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\r\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\r\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\r\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\r\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\r\n       *       We can add it back later if their's a clear requirement.\r\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\r\n       * removed computeUsedBitDepths.\r\n       *\r\n       *\r\n       * response changes compared to LERC1\r\n       * 1. encodedMaskData is not available\r\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\r\n       * 3. maskData is always available\r\n      */\r\n      /*****************\r\n      *  public properties\r\n      ******************/\r\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\r\n\r\n      /*****************\r\n      *  public methods\r\n      *****************/\r\n\r\n      /**\r\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\r\n       *\r\n       * @param {ArrayBuffer} input The LERC input byte stream\r\n       * @param {object} [options] options Decoding options\r\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\r\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\r\n       */\r\n      decode: function(/*byte array*/ input, /*object*/ options) {\r\n        //currently there's a bug in the sparse array, so please do not set to false\r\n        options = options || {};\r\n        var noDataValue = options.noDataValue;\r\n\r\n        //initialize\r\n        var i = 0, data = {};\r\n        data.ptr = options.inputOffset || 0;\r\n        data.pixels = {};\r\n\r\n        // File header\r\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\r\n          return;\r\n        }\r\n        var headerInfo = data.headerInfo;\r\n        var fileVersion = headerInfo.fileVersion;\r\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\r\n\r\n        // Mask Header\r\n        Lerc2Helpers.readMask(input, data);\r\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\r\n          data.pixels.resultMask = options.maskData;\r\n        }\r\n\r\n        var numPixels = headerInfo.width * headerInfo.height;\r\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\r\n\r\n        data.counter = {\r\n          onesweep: 0,\r\n          uncompressed: 0,\r\n          lut: 0,\r\n          bitstuffer: 0,\r\n          constant: 0,\r\n          constantoffset: 0\r\n        };\r\n        if (headerInfo.numValidPixel !== 0) {\r\n          //not tested\r\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\r\n          {\r\n            Lerc2Helpers.constructConstantSurface(data);\r\n          }\r\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\r\n            Lerc2Helpers.constructConstantSurface(data);\r\n          }\r\n          else {\r\n            var view = new DataView(input, data.ptr, 2);\r\n            var bReadDataOneSweep = view.getUint8(0);\r\n            data.ptr++;\r\n            if (bReadDataOneSweep) {\r\n              //console.debug(\"OneSweep\");\r\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray);\r\n            }\r\n            else {\r\n              //lerc2.1: //bitstuffing + lut\r\n              //lerc2.2: //bitstuffing + lut + huffman\r\n              //lerc2.3: new bitstuffer\r\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\r\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\r\n                var flagHuffman = view.getUint8(1);\r\n                data.ptr++;\r\n                data.encodeMode = flagHuffman;\r\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\r\n                  throw \"Invalid Huffman flag \" + flagHuffman;\r\n                }\r\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\r\n                  //console.log(\"Huffman\");\r\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray);\r\n                }\r\n                else {\r\n                  //console.log(\"Tiles\");\r\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray);\r\n                }\r\n              }\r\n              else { //lerc2.x non-8 bit data\r\n                //console.log(\"Tiles\");\r\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        data.eofOffset = data.ptr;\r\n        var diff;\r\n        if (options.inputOffset) {\r\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\r\n          if (Math.abs(diff) >= 1) {\r\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\r\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\r\n          }\r\n        }\r\n        else {\r\n          diff = data.headerInfo.blobSize - data.ptr;\r\n          if (Math.abs(diff) >= 1) {\r\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\r\n            data.eofOffset = data.headerInfo.blobSize;\r\n          }\r\n        }\r\n\r\n        var result = {\r\n          width: headerInfo.width,\r\n          height: headerInfo.height,\r\n          pixelData: data.pixels.resultPixels,\r\n          minValue: headerInfo.zMin,\r\n          maxValue: headerInfo.zMax,\r\n          validPixelCount: headerInfo.numValidPixel,\r\n          dimCount: headerInfo.numDims,\r\n          dimStats: {\r\n            minValues: headerInfo.minValues,\r\n            maxValues: headerInfo.maxValues\r\n          },\r\n          maskData: data.pixels.resultMask\r\n          //noDataValue: noDataValue\r\n        };\r\n\r\n        //we should remove this if there's no existing client\r\n        //optional noDataValue processing, it's user's responsiblity\r\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\r\n          var mask = data.pixels.resultMask;\r\n          for (i = 0; i < numPixels; i++) {\r\n            if (!mask[i]) {\r\n              result.pixelData[i] = noDataValue;\r\n            }\r\n          }\r\n          result.noDataValue = noDataValue;\r\n        }\r\n        data.noDataValue = noDataValue;\r\n        if (options.returnFileInfo) {\r\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\r\n        }\r\n        return result;\r\n      },\r\n\r\n      getBandCount: function(/*byte array*/ input) {\r\n        var count = 0;\r\n        var i = 0;\r\n        var temp = {};\r\n        temp.ptr = 0;\r\n        temp.pixels = {};\r\n        while (i < input.byteLength - 58) {\r\n          Lerc2Helpers.readHeaderInfo(input, temp);\r\n          i += temp.headerInfo.blobSize;\r\n          count++;\r\n          temp.ptr = i;\r\n        }\r\n        return count;\r\n      }\r\n    };\r\n\r\n    return Lerc2Decode;\r\n  })();\r\n\r\n  var isPlatformLittleEndian = (function() {\r\n    var a = new ArrayBuffer(4);\r\n    var b = new Uint8Array(a);\r\n    var c = new Uint32Array(a);\r\n    c[0] = 1;\r\n    return b[0] === 1;\r\n  })();\r\n\r\n  var Lerc = {\r\n    /************wrapper**********************************************/\r\n    /**\r\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\r\n     *\r\n     * @alias module:Lerc\r\n     * @param {ArrayBuffer} input The LERC input byte stream\r\n     * @param {object} [options] The decoding options below are optional.\r\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\r\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\r\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\r\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\r\n       * @property {number} width Width of decoded image.\r\n       * @property {number} height Height of decoded image.\r\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\r\n       * @property {string} pixelType The type of pixels represented in the output.\r\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\r\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\r\n    **/\r\n    decode: function(encodedData, options) {\r\n      if (!isPlatformLittleEndian) {\r\n        throw \"Big endian system is not supported.\";\r\n      }\r\n      options = options || {};\r\n      var inputOffset = options.inputOffset || 0;\r\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\r\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\r\n      var lerc, majorVersion;\r\n      if (fileIdentifierString.trim() === \"CntZImage\") {\r\n        lerc = LercDecode;\r\n        majorVersion = 1;\r\n      }\r\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\r\n        lerc = Lerc2Decode;\r\n        majorVersion = 2;\r\n      }\r\n      else {\r\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\r\n      }\r\n\r\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\r\n      var decodedPixelBlock = {\r\n        width: 0,\r\n        height: 0,\r\n        pixels: [],\r\n        pixelType: options.pixelType,\r\n        mask: null,\r\n        statistics: []\r\n      };\r\n\r\n      while (inputOffset < eof) {\r\n        var result = lerc.decode(encodedData, {\r\n          inputOffset: inputOffset,//for both lerc1 and lerc2\r\n          encodedMaskData: encodedMaskData,//lerc1 only\r\n          maskData: maskData,//lerc2 only\r\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\r\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\r\n          returnFileInfo: true,//for both lerc1 and lerc2\r\n          pixelType: options.pixelType || null,//lerc1 only\r\n          noDataValue: options.noDataValue || null//lerc1 only\r\n        });\r\n\r\n        inputOffset = result.fileInfo.eofOffset;\r\n        if (iPlane === 0) {\r\n          encodedMaskData = result.encodedMaskData;//lerc1\r\n          maskData = result.maskData;//lerc2\r\n          decodedPixelBlock.width = result.width;\r\n          decodedPixelBlock.height = result.height;\r\n          decodedPixelBlock.dimCount = result.dimCount || 1;\r\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\r\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\r\n          decodedPixelBlock.mask = result.maskData;\r\n        }\r\n        if (majorVersion >1 && result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\r\n          bandMasks.push(result.maskData);\r\n        }\r\n\r\n        iPlane++;\r\n        decodedPixelBlock.pixels.push(result.pixelData);\r\n        decodedPixelBlock.statistics.push({\r\n          minValue: result.minValue,\r\n          maxValue: result.maxValue,\r\n          noDataValue: result.noDataValue,\r\n          dimStats: result.dimStats\r\n        });\r\n      }\r\n      var i, j, numPixels;\r\n      if (majorVersion > 1 && bandMasks.length > 1) {\r\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\r\n        decodedPixelBlock.bandMasks = bandMasks;\r\n        maskData = new Uint8Array(numPixels);\r\n        maskData.set(bandMasks[0]);\r\n        for (i = 1; i < bandMasks.length; i++) {\r\n          bandMask = bandMasks[i];\r\n          for (j = 0; j < numPixels; j++) {\r\n            maskData[j] = maskData[j] & bandMask[j];\r\n          }\r\n        }\r\n        decodedPixelBlock.maskData = maskData;\r\n      }\r\n\r\n      return decodedPixelBlock;\r\n    }\r\n  };\r\n\r\n  tmp.Lerc = Lerc;\r\n})();\r\n\r\nexport default tmp.Lerc;\r\n","import Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport HeightmapEncoding from \"../Core/HeightmapEncoding.js\";\r\nimport HeightmapTessellator from \"../Core/HeightmapTessellator.js\";\r\nimport Rectangle from \"../Core/Rectangle.js\";\r\nimport RuntimeError from \"../Core/RuntimeError.js\";\r\nimport Lerc from \"../ThirdParty/LercDecode.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\n\r\nfunction createVerticesFromHeightmap(parameters, transferableObjects) {\r\n  // LERC encoded buffers must be decoded, then we can process them like normal\r\n  if (parameters.encoding === HeightmapEncoding.LERC) {\r\n    var result;\r\n    try {\r\n      result = Lerc.decode(parameters.heightmap);\r\n    } catch (error) {\r\n      throw new RuntimeError(error);\r\n    }\r\n\r\n    var lercStatistics = result.statistics[0];\r\n    if (lercStatistics.minValue === Number.MAX_VALUE) {\r\n      throw new RuntimeError(\"Invalid tile data\");\r\n    }\r\n\r\n    parameters.heightmap = result.pixels[0];\r\n    parameters.width = result.width;\r\n    parameters.height = result.height;\r\n  }\r\n\r\n  parameters.ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n  parameters.rectangle = Rectangle.clone(parameters.rectangle);\r\n\r\n  var statistics = HeightmapTessellator.computeVertices(parameters);\r\n  var vertices = statistics.vertices;\r\n  transferableObjects.push(vertices.buffer);\r\n\r\n  return {\r\n    vertices: vertices.buffer,\r\n    numberOfAttributes: statistics.encoding.getStride(),\r\n    minimumHeight: statistics.minimumHeight,\r\n    maximumHeight: statistics.maximumHeight,\r\n    gridWidth: parameters.width,\r\n    gridHeight: parameters.height,\r\n    boundingSphere3D: statistics.boundingSphere3D,\r\n    orientedBoundingBox: statistics.orientedBoundingBox,\r\n    occludeePointInScaledSpace: statistics.occludeePointInScaledSpace,\r\n    encoding: statistics.encoding,\r\n    westIndicesSouthToNorth: statistics.westIndicesSouthToNorth,\r\n    southIndicesEastToWest: statistics.southIndicesEastToWest,\r\n    eastIndicesNorthToSouth: statistics.eastIndicesNorthToSouth,\r\n    northIndicesWestToEast: statistics.northIndicesWestToEast,\r\n  };\r\n}\r\nexport default createTaskProcessorWorker(createVerticesFromHeightmap);\r\n"],"names":["Cartesian3","Matrix4","defined","DeveloperError","CesiumMath","defaultValue","Ellipsoid","Rectangle","Transforms","WebMercatorProjection","Cartesian2","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding","HeightmapEncoding","RuntimeError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;EAAA;EACA;EACA;EACA;EACA;EACA,IAAI,iBAAiB,GAAG;EACxB;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,IAAI,EAAE,CAAC;AACT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,IAAI,EAAE,CAAC;EACT,CAAC,CAAC;AACF,4BAAe,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC;;ECP/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAI,oBAAoB,GAAG,EAAE,CAAC;AAC9B;EACA;EACA;EACA;EACA;EACA;EACA,oBAAoB,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC;EACvD,EAAE,WAAW,EAAE,GAAG;EAClB,EAAE,YAAY,EAAE,GAAG;EACnB,EAAE,iBAAiB,EAAE,CAAC;EACtB,EAAE,MAAM,EAAE,CAAC;EACX,EAAE,iBAAiB,EAAE,KAAK;EAC1B,EAAE,WAAW,EAAE,KAAK;EACpB,CAAC,CAAC,CAAC;AACH;EACA,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;EACzC,IAAI,cAAc,GAAG,IAAIC,kBAAO,EAAE,CAAC;EACnC,IAAI,cAAc,GAAG,IAAID,qBAAU,EAAE,CAAC;EACtC,IAAI,cAAc,GAAG,IAAIA,qBAAU,EAAE,CAAC;AACtC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBAAoB,CAAC,eAAe,GAAG,UAAU,OAAO,EAAE;EAC1D;EACA,EAAE,IAAI,CAACE,YAAO,CAAC,OAAO,CA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"}