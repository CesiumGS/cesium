{"version":3,"file":"Cartesian2-e7502022.js","sources":["../../../../Source/Core/Cartesian3.js","../../../../Source/Core/scaleToGeodeticSurface.js","../../../../Source/Core/Cartographic.js","../../../../Source/Core/Ellipsoid.js","../../../../Source/Core/Rectangle.js","../../../../Source/Core/Cartesian2.js"],"sourcesContent":["import Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\n/**\r\n * A 3D Cartesian point.\r\n * @alias Cartesian3\r\n * @constructor\r\n *\r\n * @param {Number} [x=0.0] The X component.\r\n * @param {Number} [y=0.0] The Y component.\r\n * @param {Number} [z=0.0] The Z component.\r\n *\r\n * @see Cartesian2\r\n * @see Cartesian4\r\n * @see Packable\r\n */\r\nfunction Cartesian3(x, y, z) {\r\n  /**\r\n   * The X component.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.x = defaultValue(x, 0.0);\r\n\r\n  /**\r\n   * The Y component.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.y = defaultValue(y, 0.0);\r\n\r\n  /**\r\n   * The Z component.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.z = defaultValue(z, 0.0);\r\n}\r\n\r\n/**\r\n * Converts the provided Spherical into Cartesian3 coordinates.\r\n *\r\n * @param {Spherical} spherical The Spherical to be converted to Cartesian3.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n */\r\nCartesian3.fromSpherical = function (spherical, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"spherical\", spherical);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  var clock = spherical.clock;\r\n  var cone = spherical.cone;\r\n  var magnitude = defaultValue(spherical.magnitude, 1.0);\r\n  var radial = magnitude * Math.sin(cone);\r\n  result.x = radial * Math.cos(clock);\r\n  result.y = radial * Math.sin(clock);\r\n  result.z = magnitude * Math.cos(cone);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a Cartesian3 instance from x, y and z coordinates.\r\n *\r\n * @param {Number} x The x coordinate.\r\n * @param {Number} y The y coordinate.\r\n * @param {Number} z The z coordinate.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n */\r\nCartesian3.fromElements = function (x, y, z, result) {\r\n  if (!defined(result)) {\r\n    return new Cartesian3(x, y, z);\r\n  }\r\n\r\n  result.x = x;\r\n  result.y = y;\r\n  result.z = z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Duplicates a Cartesian3 instance.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian to duplicate.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n */\r\nCartesian3.clone = function (cartesian, result) {\r\n  if (!defined(cartesian)) {\r\n    return undefined;\r\n  }\r\n  if (!defined(result)) {\r\n    return new Cartesian3(cartesian.x, cartesian.y, cartesian.z);\r\n  }\r\n\r\n  result.x = cartesian.x;\r\n  result.y = cartesian.y;\r\n  result.z = cartesian.z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a Cartesian3 instance from an existing Cartesian4.  This simply takes the\r\n * x, y, and z properties of the Cartesian4 and drops w.\r\n * @function\r\n *\r\n * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian3 instance from.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n */\r\nCartesian3.fromCartesian4 = Cartesian3.clone;\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCartesian3.packedLength = 3;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {Cartesian3} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCartesian3.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  array[startingIndex++] = value.x;\r\n  array[startingIndex++] = value.y;\r\n  array[startingIndex] = value.z;\r\n\r\n  return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {Cartesian3} [result] The object into which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n */\r\nCartesian3.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n  result.x = array[startingIndex++];\r\n  result.y = array[startingIndex++];\r\n  result.z = array[startingIndex];\r\n  return result;\r\n};\r\n\r\n/**\r\n * Flattens an array of Cartesian3s into an array of components.\r\n *\r\n * @param {Cartesian3[]} array The array of cartesians to pack.\r\n * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 3 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 3) elements.\r\n * @returns {Number[]} The packed array.\r\n */\r\nCartesian3.packArray = function (array, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  var length = array.length;\r\n  var resultLength = length * 3;\r\n  if (!defined(result)) {\r\n    result = new Array(resultLength);\r\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\r\n    throw new DeveloperError(\r\n      \"If result is a typed array, it must have exactly array.length * 3 elements\"\r\n    );\r\n  } else if (result.length !== resultLength) {\r\n    result.length = resultLength;\r\n  }\r\n\r\n  for (var i = 0; i < length; ++i) {\r\n    Cartesian3.pack(array[i], result, i * 3);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Unpacks an array of cartesian components into an array of Cartesian3s.\r\n *\r\n * @param {Number[]} array The array of components to unpack.\r\n * @param {Cartesian3[]} [result] The array onto which to store the result.\r\n * @returns {Cartesian3[]} The unpacked array.\r\n */\r\nCartesian3.unpackArray = function (array, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  Check.typeOf.number.greaterThanOrEquals(\"array.length\", array.length, 3);\r\n  if (array.length % 3 !== 0) {\r\n    throw new DeveloperError(\"array length must be a multiple of 3.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = array.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length / 3);\r\n  } else {\r\n    result.length = length / 3;\r\n  }\r\n\r\n  for (var i = 0; i < length; i += 3) {\r\n    var index = i / 3;\r\n    result[index] = Cartesian3.unpack(array, i, result[index]);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a Cartesian3 from three consecutive elements in an array.\r\n * @function\r\n *\r\n * @param {Number[]} array The array whose three consecutive elements correspond to the x, y, and z components, respectively.\r\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n *\r\n * @example\r\n * // Create a Cartesian3 with (1.0, 2.0, 3.0)\r\n * var v = [1.0, 2.0, 3.0];\r\n * var p = Cesium.Cartesian3.fromArray(v);\r\n *\r\n * // Create a Cartesian3 with (1.0, 2.0, 3.0) using an offset into an array\r\n * var v2 = [0.0, 0.0, 1.0, 2.0, 3.0];\r\n * var p2 = Cesium.Cartesian3.fromArray(v2, 2);\r\n */\r\nCartesian3.fromArray = Cartesian3.unpack;\r\n\r\n/**\r\n * Computes the value of the maximum component for the supplied Cartesian.\r\n *\r\n * @param {Cartesian3} cartesian The cartesian to use.\r\n * @returns {Number} The value of the maximum component.\r\n */\r\nCartesian3.maximumComponent = function (cartesian) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  return Math.max(cartesian.x, cartesian.y, cartesian.z);\r\n};\r\n\r\n/**\r\n * Computes the value of the minimum component for the supplied Cartesian.\r\n *\r\n * @param {Cartesian3} cartesian The cartesian to use.\r\n * @returns {Number} The value of the minimum component.\r\n */\r\nCartesian3.minimumComponent = function (cartesian) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  return Math.min(cartesian.x, cartesian.y, cartesian.z);\r\n};\r\n\r\n/**\r\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n *\r\n * @param {Cartesian3} first A cartesian to compare.\r\n * @param {Cartesian3} second A cartesian to compare.\r\n * @param {Cartesian3} result The object into which to store the result.\r\n * @returns {Cartesian3} A cartesian with the minimum components.\r\n */\r\nCartesian3.minimumByComponent = function (first, second, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"first\", first);\r\n  Check.typeOf.object(\"second\", second);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = Math.min(first.x, second.x);\r\n  result.y = Math.min(first.y, second.y);\r\n  result.z = Math.min(first.z, second.z);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n *\r\n * @param {Cartesian3} first A cartesian to compare.\r\n * @param {Cartesian3} second A cartesian to compare.\r\n * @param {Cartesian3} result The object into which to store the result.\r\n * @returns {Cartesian3} A cartesian with the maximum components.\r\n */\r\nCartesian3.maximumByComponent = function (first, second, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"first\", first);\r\n  Check.typeOf.object(\"second\", second);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = Math.max(first.x, second.x);\r\n  result.y = Math.max(first.y, second.y);\r\n  result.z = Math.max(first.z, second.z);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the provided Cartesian's squared magnitude.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n * @returns {Number} The squared magnitude.\r\n */\r\nCartesian3.magnitudeSquared = function (cartesian) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  return (\r\n    cartesian.x * cartesian.x +\r\n    cartesian.y * cartesian.y +\r\n    cartesian.z * cartesian.z\r\n  );\r\n};\r\n\r\n/**\r\n * Computes the Cartesian's magnitude (length).\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian instance whose magnitude is to be computed.\r\n * @returns {Number} The magnitude.\r\n */\r\nCartesian3.magnitude = function (cartesian) {\r\n  return Math.sqrt(Cartesian3.magnitudeSquared(cartesian));\r\n};\r\n\r\nvar distanceScratch = new Cartesian3();\r\n\r\n/**\r\n * Computes the distance between two points.\r\n *\r\n * @param {Cartesian3} left The first point to compute the distance from.\r\n * @param {Cartesian3} right The second point to compute the distance to.\r\n * @returns {Number} The distance between two points.\r\n *\r\n * @example\r\n * // Returns 1.0\r\n * var d = Cesium.Cartesian3.distance(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(2.0, 0.0, 0.0));\r\n */\r\nCartesian3.distance = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian3.subtract(left, right, distanceScratch);\r\n  return Cartesian3.magnitude(distanceScratch);\r\n};\r\n\r\n/**\r\n * Computes the squared distance between two points.  Comparing squared distances\r\n * using this function is more efficient than comparing distances using {@link Cartesian3#distance}.\r\n *\r\n * @param {Cartesian3} left The first point to compute the distance from.\r\n * @param {Cartesian3} right The second point to compute the distance to.\r\n * @returns {Number} The distance between two points.\r\n *\r\n * @example\r\n * // Returns 4.0, not 2.0\r\n * var d = Cesium.Cartesian3.distanceSquared(new Cesium.Cartesian3(1.0, 0.0, 0.0), new Cesium.Cartesian3(3.0, 0.0, 0.0));\r\n */\r\nCartesian3.distanceSquared = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian3.subtract(left, right, distanceScratch);\r\n  return Cartesian3.magnitudeSquared(distanceScratch);\r\n};\r\n\r\n/**\r\n * Computes the normalized form of the supplied Cartesian.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian to be normalized.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.normalize = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var magnitude = Cartesian3.magnitude(cartesian);\r\n\r\n  result.x = cartesian.x / magnitude;\r\n  result.y = cartesian.y / magnitude;\r\n  result.z = cartesian.z / magnitude;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (isNaN(result.x) || isNaN(result.y) || isNaN(result.z)) {\r\n    throw new DeveloperError(\"normalized result is not a number\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the dot (scalar) product of two Cartesians.\r\n *\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @returns {Number} The dot product.\r\n */\r\nCartesian3.dot = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  return left.x * right.x + left.y * right.y + left.z * right.z;\r\n};\r\n\r\n/**\r\n * Computes the componentwise product of two Cartesians.\r\n *\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.multiplyComponents = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x * right.x;\r\n  result.y = left.y * right.y;\r\n  result.z = left.z * right.z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the componentwise quotient of two Cartesians.\r\n *\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.divideComponents = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x / right.x;\r\n  result.y = left.y / right.y;\r\n  result.z = left.z / right.z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the componentwise sum of two Cartesians.\r\n *\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.add = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x + right.x;\r\n  result.y = left.y + right.y;\r\n  result.z = left.z + right.z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the componentwise difference of two Cartesians.\r\n *\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.subtract = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x - right.x;\r\n  result.y = left.y - right.y;\r\n  result.z = left.z - right.z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian to be scaled.\r\n * @param {Number} scalar The scalar to multiply with.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.multiplyByScalar = function (cartesian, scalar, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.number(\"scalar\", scalar);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = cartesian.x * scalar;\r\n  result.y = cartesian.y * scalar;\r\n  result.z = cartesian.z * scalar;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Divides the provided Cartesian componentwise by the provided scalar.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian to be divided.\r\n * @param {Number} scalar The scalar to divide by.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.divideByScalar = function (cartesian, scalar, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.number(\"scalar\", scalar);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = cartesian.x / scalar;\r\n  result.y = cartesian.y / scalar;\r\n  result.z = cartesian.z / scalar;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Negates the provided Cartesian.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian to be negated.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.negate = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = -cartesian.x;\r\n  result.y = -cartesian.y;\r\n  result.z = -cartesian.z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the absolute value of the provided Cartesian.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian whose absolute value is to be computed.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.abs = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = Math.abs(cartesian.x);\r\n  result.y = Math.abs(cartesian.y);\r\n  result.z = Math.abs(cartesian.z);\r\n  return result;\r\n};\r\n\r\nvar lerpScratch = new Cartesian3();\r\n/**\r\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n *\r\n * @param {Cartesian3} start The value corresponding to t at 0.0.\r\n * @param {Cartesian3} end The value corresponding to t at 1.0.\r\n * @param {Number} t The point along t at which to interpolate.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter.\r\n */\r\nCartesian3.lerp = function (start, end, t, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"start\", start);\r\n  Check.typeOf.object(\"end\", end);\r\n  Check.typeOf.number(\"t\", t);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian3.multiplyByScalar(end, t, lerpScratch);\r\n  result = Cartesian3.multiplyByScalar(start, 1.0 - t, result);\r\n  return Cartesian3.add(lerpScratch, result, result);\r\n};\r\n\r\nvar angleBetweenScratch = new Cartesian3();\r\nvar angleBetweenScratch2 = new Cartesian3();\r\n/**\r\n * Returns the angle, in radians, between the provided Cartesians.\r\n *\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @returns {Number} The angle between the Cartesians.\r\n */\r\nCartesian3.angleBetween = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian3.normalize(left, angleBetweenScratch);\r\n  Cartesian3.normalize(right, angleBetweenScratch2);\r\n  var cosine = Cartesian3.dot(angleBetweenScratch, angleBetweenScratch2);\r\n  var sine = Cartesian3.magnitude(\r\n    Cartesian3.cross(\r\n      angleBetweenScratch,\r\n      angleBetweenScratch2,\r\n      angleBetweenScratch\r\n    )\r\n  );\r\n  return Math.atan2(sine, cosine);\r\n};\r\n\r\nvar mostOrthogonalAxisScratch = new Cartesian3();\r\n/**\r\n * Returns the axis that is most orthogonal to the provided Cartesian.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian on which to find the most orthogonal axis.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The most orthogonal axis.\r\n */\r\nCartesian3.mostOrthogonalAxis = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var f = Cartesian3.normalize(cartesian, mostOrthogonalAxisScratch);\r\n  Cartesian3.abs(f, f);\r\n\r\n  if (f.x <= f.y) {\r\n    if (f.x <= f.z) {\r\n      result = Cartesian3.clone(Cartesian3.UNIT_X, result);\r\n    } else {\r\n      result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n    }\r\n  } else if (f.y <= f.z) {\r\n    result = Cartesian3.clone(Cartesian3.UNIT_Y, result);\r\n  } else {\r\n    result = Cartesian3.clone(Cartesian3.UNIT_Z, result);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Projects vector a onto vector b\r\n * @param {Cartesian3} a The vector that needs projecting\r\n * @param {Cartesian3} b The vector to project onto\r\n * @param {Cartesian3} result The result cartesian\r\n * @returns {Cartesian3} The modified result parameter\r\n */\r\nCartesian3.projectVector = function (a, b, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"a\", a);\r\n  Check.defined(\"b\", b);\r\n  Check.defined(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var scalar = Cartesian3.dot(a, b) / Cartesian3.dot(b, b);\r\n  return Cartesian3.multiplyByScalar(b, scalar, result);\r\n};\r\n\r\n/**\r\n * Compares the provided Cartesians componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian3} [left] The first Cartesian.\r\n * @param {Cartesian3} [right] The second Cartesian.\r\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n */\r\nCartesian3.equals = function (left, right) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      left.x === right.x &&\r\n      left.y === right.y &&\r\n      left.z === right.z)\r\n  );\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nCartesian3.equalsArray = function (cartesian, array, offset) {\r\n  return (\r\n    cartesian.x === array[offset] &&\r\n    cartesian.y === array[offset + 1] &&\r\n    cartesian.z === array[offset + 2]\r\n  );\r\n};\r\n\r\n/**\r\n * Compares the provided Cartesians componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian3} [left] The first Cartesian.\r\n * @param {Cartesian3} [right] The second Cartesian.\r\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nCartesian3.equalsEpsilon = function (\r\n  left,\r\n  right,\r\n  relativeEpsilon,\r\n  absoluteEpsilon\r\n) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      CesiumMath.equalsEpsilon(\r\n        left.x,\r\n        right.x,\r\n        relativeEpsilon,\r\n        absoluteEpsilon\r\n      ) &&\r\n      CesiumMath.equalsEpsilon(\r\n        left.y,\r\n        right.y,\r\n        relativeEpsilon,\r\n        absoluteEpsilon\r\n      ) &&\r\n      CesiumMath.equalsEpsilon(\r\n        left.z,\r\n        right.z,\r\n        relativeEpsilon,\r\n        absoluteEpsilon\r\n      ))\r\n  );\r\n};\r\n\r\n/**\r\n * Computes the cross (outer) product of two Cartesians.\r\n *\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The cross product.\r\n */\r\nCartesian3.cross = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var leftX = left.x;\r\n  var leftY = left.y;\r\n  var leftZ = left.z;\r\n  var rightX = right.x;\r\n  var rightY = right.y;\r\n  var rightZ = right.z;\r\n\r\n  var x = leftY * rightZ - leftZ * rightY;\r\n  var y = leftZ * rightX - leftX * rightZ;\r\n  var z = leftX * rightY - leftY * rightX;\r\n\r\n  result.x = x;\r\n  result.y = y;\r\n  result.z = z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the midpoint between the right and left Cartesian.\r\n * @param {Cartesian3} left The first Cartesian.\r\n * @param {Cartesian3} right The second Cartesian.\r\n * @param {Cartesian3} result The object onto which to store the result.\r\n * @returns {Cartesian3} The midpoint.\r\n */\r\nCartesian3.midpoint = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = (left.x + right.x) * 0.5;\r\n  result.y = (left.y + right.y) * 0.5;\r\n  result.z = (left.z + right.z) * 0.5;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Returns a Cartesian3 position from longitude and latitude values given in degrees.\r\n *\r\n * @param {Number} longitude The longitude, in degrees\r\n * @param {Number} latitude The latitude, in degrees\r\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The position\r\n *\r\n * @example\r\n * var position = Cesium.Cartesian3.fromDegrees(-115.0, 37.0);\r\n */\r\nCartesian3.fromDegrees = function (\r\n  longitude,\r\n  latitude,\r\n  height,\r\n  ellipsoid,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"longitude\", longitude);\r\n  Check.typeOf.number(\"latitude\", latitude);\r\n  //>>includeEnd('debug');\r\n\r\n  longitude = CesiumMath.toRadians(longitude);\r\n  latitude = CesiumMath.toRadians(latitude);\r\n  return Cartesian3.fromRadians(longitude, latitude, height, ellipsoid, result);\r\n};\r\n\r\nvar scratchN = new Cartesian3();\r\nvar scratchK = new Cartesian3();\r\nvar wgs84RadiiSquared = new Cartesian3(\r\n  6378137.0 * 6378137.0,\r\n  6378137.0 * 6378137.0,\r\n  6356752.3142451793 * 6356752.3142451793\r\n);\r\n\r\n/**\r\n * Returns a Cartesian3 position from longitude and latitude values given in radians.\r\n *\r\n * @param {Number} longitude The longitude, in radians\r\n * @param {Number} latitude The latitude, in radians\r\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The position\r\n *\r\n * @example\r\n * var position = Cesium.Cartesian3.fromRadians(-2.007, 0.645);\r\n */\r\nCartesian3.fromRadians = function (\r\n  longitude,\r\n  latitude,\r\n  height,\r\n  ellipsoid,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"longitude\", longitude);\r\n  Check.typeOf.number(\"latitude\", latitude);\r\n  //>>includeEnd('debug');\r\n\r\n  height = defaultValue(height, 0.0);\r\n  var radiiSquared = defined(ellipsoid)\r\n    ? ellipsoid.radiiSquared\r\n    : wgs84RadiiSquared;\r\n\r\n  var cosLatitude = Math.cos(latitude);\r\n  scratchN.x = cosLatitude * Math.cos(longitude);\r\n  scratchN.y = cosLatitude * Math.sin(longitude);\r\n  scratchN.z = Math.sin(latitude);\r\n  scratchN = Cartesian3.normalize(scratchN, scratchN);\r\n\r\n  Cartesian3.multiplyComponents(radiiSquared, scratchN, scratchK);\r\n  var gamma = Math.sqrt(Cartesian3.dot(scratchN, scratchK));\r\n  scratchK = Cartesian3.divideByScalar(scratchK, gamma, scratchK);\r\n  scratchN = Cartesian3.multiplyByScalar(scratchN, height, scratchN);\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n  return Cartesian3.add(scratchK, scratchN, result);\r\n};\r\n\r\n/**\r\n * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in degrees.\r\n *\r\n * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\r\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n * @returns {Cartesian3[]} The array of positions.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArray([-115.0, 37.0, -107.0, 33.0]);\r\n */\r\nCartesian3.fromDegreesArray = function (coordinates, ellipsoid, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"coordinates\", coordinates);\r\n  if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\r\n    throw new DeveloperError(\r\n      \"the number of coordinates must be a multiple of 2 and at least 2\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = coordinates.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length / 2);\r\n  } else {\r\n    result.length = length / 2;\r\n  }\r\n\r\n  for (var i = 0; i < length; i += 2) {\r\n    var longitude = coordinates[i];\r\n    var latitude = coordinates[i + 1];\r\n    var index = i / 2;\r\n    result[index] = Cartesian3.fromDegrees(\r\n      longitude,\r\n      latitude,\r\n      0,\r\n      ellipsoid,\r\n      result[index]\r\n    );\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Returns an array of Cartesian3 positions given an array of longitude and latitude values given in radians.\r\n *\r\n * @param {Number[]} coordinates A list of longitude and latitude values. Values alternate [longitude, latitude, longitude, latitude...].\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the coordinates lie.\r\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n * @returns {Cartesian3[]} The array of positions.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromRadiansArray([-2.007, 0.645, -1.867, .575]);\r\n */\r\nCartesian3.fromRadiansArray = function (coordinates, ellipsoid, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"coordinates\", coordinates);\r\n  if (coordinates.length < 2 || coordinates.length % 2 !== 0) {\r\n    throw new DeveloperError(\r\n      \"the number of coordinates must be a multiple of 2 and at least 2\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = coordinates.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length / 2);\r\n  } else {\r\n    result.length = length / 2;\r\n  }\r\n\r\n  for (var i = 0; i < length; i += 2) {\r\n    var longitude = coordinates[i];\r\n    var latitude = coordinates[i + 1];\r\n    var index = i / 2;\r\n    result[index] = Cartesian3.fromRadians(\r\n      longitude,\r\n      latitude,\r\n      0,\r\n      ellipsoid,\r\n      result[index]\r\n    );\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in degrees.\r\n *\r\n * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n * @returns {Cartesian3[]} The array of positions.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromDegreesArrayHeights([-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]);\r\n */\r\nCartesian3.fromDegreesArrayHeights = function (coordinates, ellipsoid, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"coordinates\", coordinates);\r\n  if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\r\n    throw new DeveloperError(\r\n      \"the number of coordinates must be a multiple of 3 and at least 3\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = coordinates.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length / 3);\r\n  } else {\r\n    result.length = length / 3;\r\n  }\r\n\r\n  for (var i = 0; i < length; i += 3) {\r\n    var longitude = coordinates[i];\r\n    var latitude = coordinates[i + 1];\r\n    var height = coordinates[i + 2];\r\n    var index = i / 3;\r\n    result[index] = Cartesian3.fromDegrees(\r\n      longitude,\r\n      latitude,\r\n      height,\r\n      ellipsoid,\r\n      result[index]\r\n    );\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Returns an array of Cartesian3 positions given an array of longitude, latitude and height values where longitude and latitude are given in radians.\r\n *\r\n * @param {Number[]} coordinates A list of longitude, latitude and height values. Values alternate [longitude, latitude, height, longitude, latitude, height...].\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n * @param {Cartesian3[]} [result] An array of Cartesian3 objects to store the result.\r\n * @returns {Cartesian3[]} The array of positions.\r\n *\r\n * @example\r\n * var positions = Cesium.Cartesian3.fromRadiansArrayHeights([-2.007, 0.645, 100000.0, -1.867, .575, 150000.0]);\r\n */\r\nCartesian3.fromRadiansArrayHeights = function (coordinates, ellipsoid, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"coordinates\", coordinates);\r\n  if (coordinates.length < 3 || coordinates.length % 3 !== 0) {\r\n    throw new DeveloperError(\r\n      \"the number of coordinates must be a multiple of 3 and at least 3\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = coordinates.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length / 3);\r\n  } else {\r\n    result.length = length / 3;\r\n  }\r\n\r\n  for (var i = 0; i < length; i += 3) {\r\n    var longitude = coordinates[i];\r\n    var latitude = coordinates[i + 1];\r\n    var height = coordinates[i + 2];\r\n    var index = i / 3;\r\n    result[index] = Cartesian3.fromRadians(\r\n      longitude,\r\n      latitude,\r\n      height,\r\n      ellipsoid,\r\n      result[index]\r\n    );\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * An immutable Cartesian3 instance initialized to (0.0, 0.0, 0.0).\r\n *\r\n * @type {Cartesian3}\r\n * @constant\r\n */\r\nCartesian3.ZERO = Object.freeze(new Cartesian3(0.0, 0.0, 0.0));\r\n\r\n/**\r\n * An immutable Cartesian3 instance initialized to (1.0, 0.0, 0.0).\r\n *\r\n * @type {Cartesian3}\r\n * @constant\r\n */\r\nCartesian3.UNIT_X = Object.freeze(new Cartesian3(1.0, 0.0, 0.0));\r\n\r\n/**\r\n * An immutable Cartesian3 instance initialized to (0.0, 1.0, 0.0).\r\n *\r\n * @type {Cartesian3}\r\n * @constant\r\n */\r\nCartesian3.UNIT_Y = Object.freeze(new Cartesian3(0.0, 1.0, 0.0));\r\n\r\n/**\r\n * An immutable Cartesian3 instance initialized to (0.0, 0.0, 1.0).\r\n *\r\n * @type {Cartesian3}\r\n * @constant\r\n */\r\nCartesian3.UNIT_Z = Object.freeze(new Cartesian3(0.0, 0.0, 1.0));\r\n\r\n/**\r\n * Duplicates this Cartesian3 instance.\r\n *\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if one was not provided.\r\n */\r\nCartesian3.prototype.clone = function (result) {\r\n  return Cartesian3.clone(this, result);\r\n};\r\n\r\n/**\r\n * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian3} [right] The right hand side Cartesian.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nCartesian3.prototype.equals = function (right) {\r\n  return Cartesian3.equals(this, right);\r\n};\r\n\r\n/**\r\n * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian3} [right] The right hand side Cartesian.\r\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nCartesian3.prototype.equalsEpsilon = function (\r\n  right,\r\n  relativeEpsilon,\r\n  absoluteEpsilon\r\n) {\r\n  return Cartesian3.equalsEpsilon(\r\n    this,\r\n    right,\r\n    relativeEpsilon,\r\n    absoluteEpsilon\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a string representing this Cartesian in the format '(x, y, z)'.\r\n *\r\n * @returns {String} A string representing this Cartesian in the format '(x, y, z)'.\r\n */\r\nCartesian3.prototype.toString = function () {\r\n  return \"(\" + this.x + \", \" + this.y + \", \" + this.z + \")\";\r\n};\r\nexport default Cartesian3;\r\n","import Cartesian3 from \"./Cartesian3.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\nvar scaleToGeodeticSurfaceIntersection = new Cartesian3();\r\nvar scaleToGeodeticSurfaceGradient = new Cartesian3();\r\n\r\n/**\r\n * Scales the provided Cartesian position along the geodetic surface normal\r\n * so that it is on the surface of this ellipsoid.  If the position is\r\n * at the center of the ellipsoid, this function returns undefined.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n * @param {Cartesian3} oneOverRadii One over radii of the ellipsoid.\r\n * @param {Cartesian3} oneOverRadiiSquared One over radii squared of the ellipsoid.\r\n * @param {Number} centerToleranceSquared Tolerance for closeness to the center.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter, a new Cartesian3 instance if none was provided, or undefined if the position is at the center.\r\n *\r\n * @function scaleToGeodeticSurface\r\n *\r\n * @private\r\n */\r\nfunction scaleToGeodeticSurface(\r\n  cartesian,\r\n  oneOverRadii,\r\n  oneOverRadiiSquared,\r\n  centerToleranceSquared,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(cartesian)) {\r\n    throw new DeveloperError(\"cartesian is required.\");\r\n  }\r\n  if (!defined(oneOverRadii)) {\r\n    throw new DeveloperError(\"oneOverRadii is required.\");\r\n  }\r\n  if (!defined(oneOverRadiiSquared)) {\r\n    throw new DeveloperError(\"oneOverRadiiSquared is required.\");\r\n  }\r\n  if (!defined(centerToleranceSquared)) {\r\n    throw new DeveloperError(\"centerToleranceSquared is required.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var positionX = cartesian.x;\r\n  var positionY = cartesian.y;\r\n  var positionZ = cartesian.z;\r\n\r\n  var oneOverRadiiX = oneOverRadii.x;\r\n  var oneOverRadiiY = oneOverRadii.y;\r\n  var oneOverRadiiZ = oneOverRadii.z;\r\n\r\n  var x2 = positionX * positionX * oneOverRadiiX * oneOverRadiiX;\r\n  var y2 = positionY * positionY * oneOverRadiiY * oneOverRadiiY;\r\n  var z2 = positionZ * positionZ * oneOverRadiiZ * oneOverRadiiZ;\r\n\r\n  // Compute the squared ellipsoid norm.\r\n  var squaredNorm = x2 + y2 + z2;\r\n  var ratio = Math.sqrt(1.0 / squaredNorm);\r\n\r\n  // As an initial approximation, assume that the radial intersection is the projection point.\r\n  var intersection = Cartesian3.multiplyByScalar(\r\n    cartesian,\r\n    ratio,\r\n    scaleToGeodeticSurfaceIntersection\r\n  );\r\n\r\n  // If the position is near the center, the iteration will not converge.\r\n  if (squaredNorm < centerToleranceSquared) {\r\n    return !isFinite(ratio)\r\n      ? undefined\r\n      : Cartesian3.clone(intersection, result);\r\n  }\r\n\r\n  var oneOverRadiiSquaredX = oneOverRadiiSquared.x;\r\n  var oneOverRadiiSquaredY = oneOverRadiiSquared.y;\r\n  var oneOverRadiiSquaredZ = oneOverRadiiSquared.z;\r\n\r\n  // Use the gradient at the intersection point in place of the true unit normal.\r\n  // The difference in magnitude will be absorbed in the multiplier.\r\n  var gradient = scaleToGeodeticSurfaceGradient;\r\n  gradient.x = intersection.x * oneOverRadiiSquaredX * 2.0;\r\n  gradient.y = intersection.y * oneOverRadiiSquaredY * 2.0;\r\n  gradient.z = intersection.z * oneOverRadiiSquaredZ * 2.0;\r\n\r\n  // Compute the initial guess at the normal vector multiplier, lambda.\r\n  var lambda =\r\n    ((1.0 - ratio) * Cartesian3.magnitude(cartesian)) /\r\n    (0.5 * Cartesian3.magnitude(gradient));\r\n  var correction = 0.0;\r\n\r\n  var func;\r\n  var denominator;\r\n  var xMultiplier;\r\n  var yMultiplier;\r\n  var zMultiplier;\r\n  var xMultiplier2;\r\n  var yMultiplier2;\r\n  var zMultiplier2;\r\n  var xMultiplier3;\r\n  var yMultiplier3;\r\n  var zMultiplier3;\r\n\r\n  do {\r\n    lambda -= correction;\r\n\r\n    xMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredX);\r\n    yMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredY);\r\n    zMultiplier = 1.0 / (1.0 + lambda * oneOverRadiiSquaredZ);\r\n\r\n    xMultiplier2 = xMultiplier * xMultiplier;\r\n    yMultiplier2 = yMultiplier * yMultiplier;\r\n    zMultiplier2 = zMultiplier * zMultiplier;\r\n\r\n    xMultiplier3 = xMultiplier2 * xMultiplier;\r\n    yMultiplier3 = yMultiplier2 * yMultiplier;\r\n    zMultiplier3 = zMultiplier2 * zMultiplier;\r\n\r\n    func = x2 * xMultiplier2 + y2 * yMultiplier2 + z2 * zMultiplier2 - 1.0;\r\n\r\n    // \"denominator\" here refers to the use of this expression in the velocity and acceleration\r\n    // computations in the sections to follow.\r\n    denominator =\r\n      x2 * xMultiplier3 * oneOverRadiiSquaredX +\r\n      y2 * yMultiplier3 * oneOverRadiiSquaredY +\r\n      z2 * zMultiplier3 * oneOverRadiiSquaredZ;\r\n\r\n    var derivative = -2.0 * denominator;\r\n\r\n    correction = func / derivative;\r\n  } while (Math.abs(func) > CesiumMath.EPSILON12);\r\n\r\n  if (!defined(result)) {\r\n    return new Cartesian3(\r\n      positionX * xMultiplier,\r\n      positionY * yMultiplier,\r\n      positionZ * zMultiplier\r\n    );\r\n  }\r\n  result.x = positionX * xMultiplier;\r\n  result.y = positionY * yMultiplier;\r\n  result.z = positionZ * zMultiplier;\r\n  return result;\r\n}\r\nexport default scaleToGeodeticSurface;\r\n","import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport scaleToGeodeticSurface from \"./scaleToGeodeticSurface.js\";\r\n\r\n/**\r\n * A position defined by longitude, latitude, and height.\r\n * @alias Cartographic\r\n * @constructor\r\n *\r\n * @param {Number} [longitude=0.0] The longitude, in radians.\r\n * @param {Number} [latitude=0.0] The latitude, in radians.\r\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n *\r\n * @see Ellipsoid\r\n */\r\nfunction Cartographic(longitude, latitude, height) {\r\n  /**\r\n   * The longitude, in radians.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.longitude = defaultValue(longitude, 0.0);\r\n\r\n  /**\r\n   * The latitude, in radians.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.latitude = defaultValue(latitude, 0.0);\r\n\r\n  /**\r\n   * The height, in meters, above the ellipsoid.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.height = defaultValue(height, 0.0);\r\n}\r\n\r\n/**\r\n * Creates a new Cartographic instance from longitude and latitude\r\n * specified in radians.\r\n *\r\n * @param {Number} longitude The longitude, in radians.\r\n * @param {Number} latitude The latitude, in radians.\r\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n */\r\nCartographic.fromRadians = function (longitude, latitude, height, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"longitude\", longitude);\r\n  Check.typeOf.number(\"latitude\", latitude);\r\n  //>>includeEnd('debug');\r\n\r\n  height = defaultValue(height, 0.0);\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(longitude, latitude, height);\r\n  }\r\n\r\n  result.longitude = longitude;\r\n  result.latitude = latitude;\r\n  result.height = height;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a new Cartographic instance from longitude and latitude\r\n * specified in degrees.  The values in the resulting object will\r\n * be in radians.\r\n *\r\n * @param {Number} longitude The longitude, in degrees.\r\n * @param {Number} latitude The latitude, in degrees.\r\n * @param {Number} [height=0.0] The height, in meters, above the ellipsoid.\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n */\r\nCartographic.fromDegrees = function (longitude, latitude, height, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"longitude\", longitude);\r\n  Check.typeOf.number(\"latitude\", latitude);\r\n  //>>includeEnd('debug');\r\n  longitude = CesiumMath.toRadians(longitude);\r\n  latitude = CesiumMath.toRadians(latitude);\r\n\r\n  return Cartographic.fromRadians(longitude, latitude, height, result);\r\n};\r\n\r\nvar cartesianToCartographicN = new Cartesian3();\r\nvar cartesianToCartographicP = new Cartesian3();\r\nvar cartesianToCartographicH = new Cartesian3();\r\nvar wgs84OneOverRadii = new Cartesian3(\r\n  1.0 / 6378137.0,\r\n  1.0 / 6378137.0,\r\n  1.0 / 6356752.3142451793\r\n);\r\nvar wgs84OneOverRadiiSquared = new Cartesian3(\r\n  1.0 / (6378137.0 * 6378137.0),\r\n  1.0 / (6378137.0 * 6378137.0),\r\n  1.0 / (6356752.3142451793 * 6356752.3142451793)\r\n);\r\nvar wgs84CenterToleranceSquared = CesiumMath.EPSILON1;\r\n\r\n/**\r\n * Creates a new Cartographic instance from a Cartesian position. The values in the\r\n * resulting object will be in radians.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\r\n */\r\nCartographic.fromCartesian = function (cartesian, ellipsoid, result) {\r\n  var oneOverRadii = defined(ellipsoid)\r\n    ? ellipsoid.oneOverRadii\r\n    : wgs84OneOverRadii;\r\n  var oneOverRadiiSquared = defined(ellipsoid)\r\n    ? ellipsoid.oneOverRadiiSquared\r\n    : wgs84OneOverRadiiSquared;\r\n  var centerToleranceSquared = defined(ellipsoid)\r\n    ? ellipsoid._centerToleranceSquared\r\n    : wgs84CenterToleranceSquared;\r\n\r\n  //`cartesian is required.` is thrown from scaleToGeodeticSurface\r\n  var p = scaleToGeodeticSurface(\r\n    cartesian,\r\n    oneOverRadii,\r\n    oneOverRadiiSquared,\r\n    centerToleranceSquared,\r\n    cartesianToCartographicP\r\n  );\r\n\r\n  if (!defined(p)) {\r\n    return undefined;\r\n  }\r\n\r\n  var n = Cartesian3.multiplyComponents(\r\n    p,\r\n    oneOverRadiiSquared,\r\n    cartesianToCartographicN\r\n  );\r\n  n = Cartesian3.normalize(n, n);\r\n\r\n  var h = Cartesian3.subtract(cartesian, p, cartesianToCartographicH);\r\n\r\n  var longitude = Math.atan2(n.y, n.x);\r\n  var latitude = Math.asin(n.z);\r\n  var height =\r\n    CesiumMath.sign(Cartesian3.dot(h, cartesian)) * Cartesian3.magnitude(h);\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(longitude, latitude, height);\r\n  }\r\n  result.longitude = longitude;\r\n  result.latitude = latitude;\r\n  result.height = height;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a new Cartesian3 instance from a Cartographic input. The values in the inputted\r\n * object should be in radians.\r\n *\r\n * @param {Cartographic} cartographic Input to be converted into a Cartesian3 output.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid on which the position lies.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The position\r\n */\r\nCartographic.toCartesian = function (cartographic, ellipsoid, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartographic\", cartographic);\r\n  //>>includeEnd('debug');\r\n\r\n  return Cartesian3.fromRadians(\r\n    cartographic.longitude,\r\n    cartographic.latitude,\r\n    cartographic.height,\r\n    ellipsoid,\r\n    result\r\n  );\r\n};\r\n\r\n/**\r\n * Duplicates a Cartographic instance.\r\n *\r\n * @param {Cartographic} cartographic The cartographic to duplicate.\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided. (Returns undefined if cartographic is undefined)\r\n */\r\nCartographic.clone = function (cartographic, result) {\r\n  if (!defined(cartographic)) {\r\n    return undefined;\r\n  }\r\n  if (!defined(result)) {\r\n    return new Cartographic(\r\n      cartographic.longitude,\r\n      cartographic.latitude,\r\n      cartographic.height\r\n    );\r\n  }\r\n  result.longitude = cartographic.longitude;\r\n  result.latitude = cartographic.latitude;\r\n  result.height = cartographic.height;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compares the provided cartographics componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Cartographic} [left] The first cartographic.\r\n * @param {Cartographic} [right] The second cartographic.\r\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n */\r\nCartographic.equals = function (left, right) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      left.longitude === right.longitude &&\r\n      left.latitude === right.latitude &&\r\n      left.height === right.height)\r\n  );\r\n};\r\n\r\n/**\r\n * Compares the provided cartographics componentwise and returns\r\n * <code>true</code> if they are within the provided epsilon,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Cartographic} [left] The first cartographic.\r\n * @param {Cartographic} [right] The second cartographic.\r\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nCartographic.equalsEpsilon = function (left, right, epsilon) {\r\n  epsilon = defaultValue(epsilon, 0);\r\n\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      Math.abs(left.longitude - right.longitude) <= epsilon &&\r\n      Math.abs(left.latitude - right.latitude) <= epsilon &&\r\n      Math.abs(left.height - right.height) <= epsilon)\r\n  );\r\n};\r\n\r\n/**\r\n * An immutable Cartographic instance initialized to (0.0, 0.0, 0.0).\r\n *\r\n * @type {Cartographic}\r\n * @constant\r\n */\r\nCartographic.ZERO = Object.freeze(new Cartographic(0.0, 0.0, 0.0));\r\n\r\n/**\r\n * Duplicates this instance.\r\n *\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if one was not provided.\r\n */\r\nCartographic.prototype.clone = function (result) {\r\n  return Cartographic.clone(this, result);\r\n};\r\n\r\n/**\r\n * Compares the provided against this cartographic componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Cartographic} [right] The second cartographic.\r\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n */\r\nCartographic.prototype.equals = function (right) {\r\n  return Cartographic.equals(this, right);\r\n};\r\n\r\n/**\r\n * Compares the provided against this cartographic componentwise and returns\r\n * <code>true</code> if they are within the provided epsilon,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Cartographic} [right] The second cartographic.\r\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nCartographic.prototype.equalsEpsilon = function (right, epsilon) {\r\n  return Cartographic.equalsEpsilon(this, right, epsilon);\r\n};\r\n\r\n/**\r\n * Creates a string representing this cartographic in the format '(longitude, latitude, height)'.\r\n *\r\n * @returns {String} A string representing the provided cartographic in the format '(longitude, latitude, height)'.\r\n */\r\nCartographic.prototype.toString = function () {\r\n  return \"(\" + this.longitude + \", \" + this.latitude + \", \" + this.height + \")\";\r\n};\r\nexport default Cartographic;\r\n","import Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport scaleToGeodeticSurface from \"./scaleToGeodeticSurface.js\";\r\n\r\nfunction initialize(ellipsoid, x, y, z) {\r\n  x = defaultValue(x, 0.0);\r\n  y = defaultValue(y, 0.0);\r\n  z = defaultValue(z, 0.0);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number.greaterThanOrEquals(\"x\", x, 0.0);\r\n  Check.typeOf.number.greaterThanOrEquals(\"y\", y, 0.0);\r\n  Check.typeOf.number.greaterThanOrEquals(\"z\", z, 0.0);\r\n  //>>includeEnd('debug');\r\n\r\n  ellipsoid._radii = new Cartesian3(x, y, z);\r\n\r\n  ellipsoid._radiiSquared = new Cartesian3(x * x, y * y, z * z);\r\n\r\n  ellipsoid._radiiToTheFourth = new Cartesian3(\r\n    x * x * x * x,\r\n    y * y * y * y,\r\n    z * z * z * z\r\n  );\r\n\r\n  ellipsoid._oneOverRadii = new Cartesian3(\r\n    x === 0.0 ? 0.0 : 1.0 / x,\r\n    y === 0.0 ? 0.0 : 1.0 / y,\r\n    z === 0.0 ? 0.0 : 1.0 / z\r\n  );\r\n\r\n  ellipsoid._oneOverRadiiSquared = new Cartesian3(\r\n    x === 0.0 ? 0.0 : 1.0 / (x * x),\r\n    y === 0.0 ? 0.0 : 1.0 / (y * y),\r\n    z === 0.0 ? 0.0 : 1.0 / (z * z)\r\n  );\r\n\r\n  ellipsoid._minimumRadius = Math.min(x, y, z);\r\n\r\n  ellipsoid._maximumRadius = Math.max(x, y, z);\r\n\r\n  ellipsoid._centerToleranceSquared = CesiumMath.EPSILON1;\r\n\r\n  if (ellipsoid._radiiSquared.z !== 0) {\r\n    ellipsoid._squaredXOverSquaredZ =\r\n      ellipsoid._radiiSquared.x / ellipsoid._radiiSquared.z;\r\n  }\r\n}\r\n\r\n/**\r\n * A quadratic surface defined in Cartesian coordinates by the equation\r\n * <code>(x / a)^2 + (y / b)^2 + (z / c)^2 = 1</code>.  Primarily used\r\n * by Cesium to represent the shape of planetary bodies.\r\n *\r\n * Rather than constructing this object directly, one of the provided\r\n * constants is normally used.\r\n * @alias Ellipsoid\r\n * @constructor\r\n *\r\n * @param {Number} [x=0] The radius in the x direction.\r\n * @param {Number} [y=0] The radius in the y direction.\r\n * @param {Number} [z=0] The radius in the z direction.\r\n *\r\n * @exception {DeveloperError} All radii components must be greater than or equal to zero.\r\n *\r\n * @see Ellipsoid.fromCartesian3\r\n * @see Ellipsoid.WGS84\r\n * @see Ellipsoid.UNIT_SPHERE\r\n */\r\nfunction Ellipsoid(x, y, z) {\r\n  this._radii = undefined;\r\n  this._radiiSquared = undefined;\r\n  this._radiiToTheFourth = undefined;\r\n  this._oneOverRadii = undefined;\r\n  this._oneOverRadiiSquared = undefined;\r\n  this._minimumRadius = undefined;\r\n  this._maximumRadius = undefined;\r\n  this._centerToleranceSquared = undefined;\r\n  this._squaredXOverSquaredZ = undefined;\r\n\r\n  initialize(this, x, y, z);\r\n}\r\n\r\nObject.defineProperties(Ellipsoid.prototype, {\r\n  /**\r\n   * Gets the radii of the ellipsoid.\r\n   * @memberof Ellipsoid.prototype\r\n   * @type {Cartesian3}\r\n   * @readonly\r\n   */\r\n  radii: {\r\n    get: function () {\r\n      return this._radii;\r\n    },\r\n  },\r\n  /**\r\n   * Gets the squared radii of the ellipsoid.\r\n   * @memberof Ellipsoid.prototype\r\n   * @type {Cartesian3}\r\n   * @readonly\r\n   */\r\n  radiiSquared: {\r\n    get: function () {\r\n      return this._radiiSquared;\r\n    },\r\n  },\r\n  /**\r\n   * Gets the radii of the ellipsoid raise to the fourth power.\r\n   * @memberof Ellipsoid.prototype\r\n   * @type {Cartesian3}\r\n   * @readonly\r\n   */\r\n  radiiToTheFourth: {\r\n    get: function () {\r\n      return this._radiiToTheFourth;\r\n    },\r\n  },\r\n  /**\r\n   * Gets one over the radii of the ellipsoid.\r\n   * @memberof Ellipsoid.prototype\r\n   * @type {Cartesian3}\r\n   * @readonly\r\n   */\r\n  oneOverRadii: {\r\n    get: function () {\r\n      return this._oneOverRadii;\r\n    },\r\n  },\r\n  /**\r\n   * Gets one over the squared radii of the ellipsoid.\r\n   * @memberof Ellipsoid.prototype\r\n   * @type {Cartesian3}\r\n   * @readonly\r\n   */\r\n  oneOverRadiiSquared: {\r\n    get: function () {\r\n      return this._oneOverRadiiSquared;\r\n    },\r\n  },\r\n  /**\r\n   * Gets the minimum radius of the ellipsoid.\r\n   * @memberof Ellipsoid.prototype\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  minimumRadius: {\r\n    get: function () {\r\n      return this._minimumRadius;\r\n    },\r\n  },\r\n  /**\r\n   * Gets the maximum radius of the ellipsoid.\r\n   * @memberof Ellipsoid.prototype\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  maximumRadius: {\r\n    get: function () {\r\n      return this._maximumRadius;\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Duplicates an Ellipsoid instance.\r\n *\r\n * @param {Ellipsoid} ellipsoid The ellipsoid to duplicate.\r\n * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n *                    instance should be created.\r\n * @returns {Ellipsoid} The cloned Ellipsoid. (Returns undefined if ellipsoid is undefined)\r\n */\r\nEllipsoid.clone = function (ellipsoid, result) {\r\n  if (!defined(ellipsoid)) {\r\n    return undefined;\r\n  }\r\n  var radii = ellipsoid._radii;\r\n\r\n  if (!defined(result)) {\r\n    return new Ellipsoid(radii.x, radii.y, radii.z);\r\n  }\r\n\r\n  Cartesian3.clone(radii, result._radii);\r\n  Cartesian3.clone(ellipsoid._radiiSquared, result._radiiSquared);\r\n  Cartesian3.clone(ellipsoid._radiiToTheFourth, result._radiiToTheFourth);\r\n  Cartesian3.clone(ellipsoid._oneOverRadii, result._oneOverRadii);\r\n  Cartesian3.clone(ellipsoid._oneOverRadiiSquared, result._oneOverRadiiSquared);\r\n  result._minimumRadius = ellipsoid._minimumRadius;\r\n  result._maximumRadius = ellipsoid._maximumRadius;\r\n  result._centerToleranceSquared = ellipsoid._centerToleranceSquared;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes an Ellipsoid from a Cartesian specifying the radii in x, y, and z directions.\r\n *\r\n * @param {Cartesian3} [cartesian=Cartesian3.ZERO] The ellipsoid's radius in the x, y, and z directions.\r\n * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n *                    instance should be created.\r\n * @returns {Ellipsoid} A new Ellipsoid instance.\r\n *\r\n * @exception {DeveloperError} All radii components must be greater than or equal to zero.\r\n *\r\n * @see Ellipsoid.WGS84\r\n * @see Ellipsoid.UNIT_SPHERE\r\n */\r\nEllipsoid.fromCartesian3 = function (cartesian, result) {\r\n  if (!defined(result)) {\r\n    result = new Ellipsoid();\r\n  }\r\n\r\n  if (!defined(cartesian)) {\r\n    return result;\r\n  }\r\n\r\n  initialize(result, cartesian.x, cartesian.y, cartesian.z);\r\n  return result;\r\n};\r\n\r\n/**\r\n * An Ellipsoid instance initialized to the WGS84 standard.\r\n *\r\n * @type {Ellipsoid}\r\n * @constant\r\n */\r\nEllipsoid.WGS84 = Object.freeze(\r\n  new Ellipsoid(6378137.0, 6378137.0, 6356752.3142451793)\r\n);\r\n\r\n/**\r\n * An Ellipsoid instance initialized to radii of (1.0, 1.0, 1.0).\r\n *\r\n * @type {Ellipsoid}\r\n * @constant\r\n */\r\nEllipsoid.UNIT_SPHERE = Object.freeze(new Ellipsoid(1.0, 1.0, 1.0));\r\n\r\n/**\r\n * An Ellipsoid instance initialized to a sphere with the lunar radius.\r\n *\r\n * @type {Ellipsoid}\r\n * @constant\r\n */\r\nEllipsoid.MOON = Object.freeze(\r\n  new Ellipsoid(\r\n    CesiumMath.LUNAR_RADIUS,\r\n    CesiumMath.LUNAR_RADIUS,\r\n    CesiumMath.LUNAR_RADIUS\r\n  )\r\n);\r\n\r\n/**\r\n * Duplicates an Ellipsoid instance.\r\n *\r\n * @param {Ellipsoid} [result] The object onto which to store the result, or undefined if a new\r\n *                    instance should be created.\r\n * @returns {Ellipsoid} The cloned Ellipsoid.\r\n */\r\nEllipsoid.prototype.clone = function (result) {\r\n  return Ellipsoid.clone(this, result);\r\n};\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nEllipsoid.packedLength = Cartesian3.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {Ellipsoid} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nEllipsoid.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  Cartesian3.pack(value._radii, array, startingIndex);\r\n\r\n  return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {Ellipsoid} [result] The object into which to store the result.\r\n * @returns {Ellipsoid} The modified result parameter or a new Ellipsoid instance if one was not provided.\r\n */\r\nEllipsoid.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var radii = Cartesian3.unpack(array, startingIndex);\r\n  return Ellipsoid.fromCartesian3(radii, result);\r\n};\r\n\r\n/**\r\n * Computes the unit vector directed from the center of this ellipsoid toward the provided Cartesian position.\r\n * @function\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian for which to to determine the geocentric normal.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n */\r\nEllipsoid.prototype.geocentricSurfaceNormal = Cartesian3.normalize;\r\n\r\n/**\r\n * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\r\n *\r\n * @param {Cartographic} cartographic The cartographic position for which to to determine the geodetic normal.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n */\r\nEllipsoid.prototype.geodeticSurfaceNormalCartographic = function (\r\n  cartographic,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartographic\", cartographic);\r\n  //>>includeEnd('debug');\r\n\r\n  var longitude = cartographic.longitude;\r\n  var latitude = cartographic.latitude;\r\n  var cosLatitude = Math.cos(latitude);\r\n\r\n  var x = cosLatitude * Math.cos(longitude);\r\n  var y = cosLatitude * Math.sin(longitude);\r\n  var z = Math.sin(latitude);\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n  result.x = x;\r\n  result.y = y;\r\n  result.z = z;\r\n  return Cartesian3.normalize(result, result);\r\n};\r\n\r\n/**\r\n * Computes the normal of the plane tangent to the surface of the ellipsoid at the provided position.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian position for which to to determine the surface normal.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided, or undefined if a normal cannot be found.\r\n */\r\nEllipsoid.prototype.geodeticSurfaceNormal = function (cartesian, result) {\r\n  if (\r\n    Cartesian3.equalsEpsilon(cartesian, Cartesian3.ZERO, CesiumMath.EPSILON14)\r\n  ) {\r\n    return undefined;\r\n  }\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n  result = Cartesian3.multiplyComponents(\r\n    cartesian,\r\n    this._oneOverRadiiSquared,\r\n    result\r\n  );\r\n  return Cartesian3.normalize(result, result);\r\n};\r\n\r\nvar cartographicToCartesianNormal = new Cartesian3();\r\nvar cartographicToCartesianK = new Cartesian3();\r\n\r\n/**\r\n * Converts the provided cartographic to Cartesian representation.\r\n *\r\n * @param {Cartographic} cartographic The cartographic position.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n *\r\n * @example\r\n * //Create a Cartographic and determine it's Cartesian representation on a WGS84 ellipsoid.\r\n * var position = new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 5000);\r\n * var cartesianPosition = Cesium.Ellipsoid.WGS84.cartographicToCartesian(position);\r\n */\r\nEllipsoid.prototype.cartographicToCartesian = function (cartographic, result) {\r\n  //`cartographic is required` is thrown from geodeticSurfaceNormalCartographic.\r\n  var n = cartographicToCartesianNormal;\r\n  var k = cartographicToCartesianK;\r\n  this.geodeticSurfaceNormalCartographic(cartographic, n);\r\n  Cartesian3.multiplyComponents(this._radiiSquared, n, k);\r\n  var gamma = Math.sqrt(Cartesian3.dot(n, k));\r\n  Cartesian3.divideByScalar(k, gamma, k);\r\n  Cartesian3.multiplyByScalar(n, cartographic.height, n);\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n  return Cartesian3.add(k, n, result);\r\n};\r\n\r\n/**\r\n * Converts the provided array of cartographics to an array of Cartesians.\r\n *\r\n * @param {Cartographic[]} cartographics An array of cartographic positions.\r\n * @param {Cartesian3[]} [result] The object onto which to store the result.\r\n * @returns {Cartesian3[]} The modified result parameter or a new Array instance if none was provided.\r\n *\r\n * @example\r\n * //Convert an array of Cartographics and determine their Cartesian representation on a WGS84 ellipsoid.\r\n * var positions = [new Cesium.Cartographic(Cesium.Math.toRadians(21), Cesium.Math.toRadians(78), 0),\r\n *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.321), Cesium.Math.toRadians(78.123), 100),\r\n *                  new Cesium.Cartographic(Cesium.Math.toRadians(21.645), Cesium.Math.toRadians(78.456), 250)];\r\n * var cartesianPositions = Cesium.Ellipsoid.WGS84.cartographicArrayToCartesianArray(positions);\r\n */\r\nEllipsoid.prototype.cartographicArrayToCartesianArray = function (\r\n  cartographics,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartographics\", cartographics);\r\n  //>>includeEnd('debug')\r\n\r\n  var length = cartographics.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length);\r\n  } else {\r\n    result.length = length;\r\n  }\r\n  for (var i = 0; i < length; i++) {\r\n    result[i] = this.cartographicToCartesian(cartographics[i], result[i]);\r\n  }\r\n  return result;\r\n};\r\n\r\nvar cartesianToCartographicN = new Cartesian3();\r\nvar cartesianToCartographicP = new Cartesian3();\r\nvar cartesianToCartographicH = new Cartesian3();\r\n\r\n/**\r\n * Converts the provided cartesian to cartographic representation.\r\n * The cartesian is undefined at the center of the ellipsoid.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian position to convert to cartographic representation.\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter, new Cartographic instance if none was provided, or undefined if the cartesian is at the center of the ellipsoid.\r\n *\r\n * @example\r\n * //Create a Cartesian and determine it's Cartographic representation on a WGS84 ellipsoid.\r\n * var position = new Cesium.Cartesian3(17832.12, 83234.52, 952313.73);\r\n * var cartographicPosition = Cesium.Ellipsoid.WGS84.cartesianToCartographic(position);\r\n */\r\nEllipsoid.prototype.cartesianToCartographic = function (cartesian, result) {\r\n  //`cartesian is required.` is thrown from scaleToGeodeticSurface\r\n  var p = this.scaleToGeodeticSurface(cartesian, cartesianToCartographicP);\r\n\r\n  if (!defined(p)) {\r\n    return undefined;\r\n  }\r\n\r\n  var n = this.geodeticSurfaceNormal(p, cartesianToCartographicN);\r\n  var h = Cartesian3.subtract(cartesian, p, cartesianToCartographicH);\r\n\r\n  var longitude = Math.atan2(n.y, n.x);\r\n  var latitude = Math.asin(n.z);\r\n  var height =\r\n    CesiumMath.sign(Cartesian3.dot(h, cartesian)) * Cartesian3.magnitude(h);\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(longitude, latitude, height);\r\n  }\r\n  result.longitude = longitude;\r\n  result.latitude = latitude;\r\n  result.height = height;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Converts the provided array of cartesians to an array of cartographics.\r\n *\r\n * @param {Cartesian3[]} cartesians An array of Cartesian positions.\r\n * @param {Cartographic[]} [result] The object onto which to store the result.\r\n * @returns {Cartographic[]} The modified result parameter or a new Array instance if none was provided.\r\n *\r\n * @example\r\n * //Create an array of Cartesians and determine their Cartographic representation on a WGS84 ellipsoid.\r\n * var positions = [new Cesium.Cartesian3(17832.12, 83234.52, 952313.73),\r\n *                  new Cesium.Cartesian3(17832.13, 83234.53, 952313.73),\r\n *                  new Cesium.Cartesian3(17832.14, 83234.54, 952313.73)]\r\n * var cartographicPositions = Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(positions);\r\n */\r\nEllipsoid.prototype.cartesianArrayToCartographicArray = function (\r\n  cartesians,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesians\", cartesians);\r\n  //>>includeEnd('debug');\r\n\r\n  var length = cartesians.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length);\r\n  } else {\r\n    result.length = length;\r\n  }\r\n  for (var i = 0; i < length; ++i) {\r\n    result[i] = this.cartesianToCartographic(cartesians[i], result[i]);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Scales the provided Cartesian position along the geodetic surface normal\r\n * so that it is on the surface of this ellipsoid.  If the position is\r\n * at the center of the ellipsoid, this function returns undefined.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter, a new Cartesian3 instance if none was provided, or undefined if the position is at the center.\r\n */\r\nEllipsoid.prototype.scaleToGeodeticSurface = function (cartesian, result) {\r\n  return scaleToGeodeticSurface(\r\n    cartesian,\r\n    this._oneOverRadii,\r\n    this._oneOverRadiiSquared,\r\n    this._centerToleranceSquared,\r\n    result\r\n  );\r\n};\r\n\r\n/**\r\n * Scales the provided Cartesian position along the geocentric surface normal\r\n * so that it is on the surface of this ellipsoid.\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian position to scale.\r\n * @param {Cartesian3} [result] The object onto which to store the result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n */\r\nEllipsoid.prototype.scaleToGeocentricSurface = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  var positionX = cartesian.x;\r\n  var positionY = cartesian.y;\r\n  var positionZ = cartesian.z;\r\n  var oneOverRadiiSquared = this._oneOverRadiiSquared;\r\n\r\n  var beta =\r\n    1.0 /\r\n    Math.sqrt(\r\n      positionX * positionX * oneOverRadiiSquared.x +\r\n        positionY * positionY * oneOverRadiiSquared.y +\r\n        positionZ * positionZ * oneOverRadiiSquared.z\r\n    );\r\n\r\n  return Cartesian3.multiplyByScalar(cartesian, beta, result);\r\n};\r\n\r\n/**\r\n * Transforms a Cartesian X, Y, Z position to the ellipsoid-scaled space by multiplying\r\n * its components by the result of {@link Ellipsoid#oneOverRadii}.\r\n *\r\n * @param {Cartesian3} position The position to transform.\r\n * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\r\n *        return a new instance.\r\n * @returns {Cartesian3} The position expressed in the scaled space.  The returned instance is the\r\n *          one passed as the result parameter if it is not undefined, or a new instance of it is.\r\n */\r\nEllipsoid.prototype.transformPositionToScaledSpace = function (\r\n  position,\r\n  result\r\n) {\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  return Cartesian3.multiplyComponents(position, this._oneOverRadii, result);\r\n};\r\n\r\n/**\r\n * Transforms a Cartesian X, Y, Z position from the ellipsoid-scaled space by multiplying\r\n * its components by the result of {@link Ellipsoid#radii}.\r\n *\r\n * @param {Cartesian3} position The position to transform.\r\n * @param {Cartesian3} [result] The position to which to copy the result, or undefined to create and\r\n *        return a new instance.\r\n * @returns {Cartesian3} The position expressed in the unscaled space.  The returned instance is the\r\n *          one passed as the result parameter if it is not undefined, or a new instance of it is.\r\n */\r\nEllipsoid.prototype.transformPositionFromScaledSpace = function (\r\n  position,\r\n  result\r\n) {\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  return Cartesian3.multiplyComponents(position, this._radii, result);\r\n};\r\n\r\n/**\r\n * Compares this Ellipsoid against the provided Ellipsoid componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Ellipsoid} [right] The other Ellipsoid.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nEllipsoid.prototype.equals = function (right) {\r\n  return (\r\n    this === right ||\r\n    (defined(right) && Cartesian3.equals(this._radii, right._radii))\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a string representing this Ellipsoid in the format '(radii.x, radii.y, radii.z)'.\r\n *\r\n * @returns {String} A string representing this ellipsoid in the format '(radii.x, radii.y, radii.z)'.\r\n */\r\nEllipsoid.prototype.toString = function () {\r\n  return this._radii.toString();\r\n};\r\n\r\n/**\r\n * Computes a point which is the intersection of the surface normal with the z-axis.\r\n *\r\n * @param {Cartesian3} position the position. must be on the surface of the ellipsoid.\r\n * @param {Number} [buffer = 0.0] A buffer to subtract from the ellipsoid size when checking if the point is inside the ellipsoid.\r\n *                                In earth case, with common earth datums, there is no need for this buffer since the intersection point is always (relatively) very close to the center.\r\n *                                In WGS84 datum, intersection point is at max z = +-42841.31151331382 (0.673% of z-axis).\r\n *                                Intersection point could be outside the ellipsoid if the ratio of MajorAxis / AxisOfRotation is bigger than the square root of 2\r\n * @param {Cartesian3} [result] The cartesian to which to copy the result, or undefined to create and\r\n *        return a new instance.\r\n * @returns {Cartesian3 | undefined} the intersection point if it's inside the ellipsoid, undefined otherwise\r\n *\r\n * @exception {DeveloperError} position is required.\r\n * @exception {DeveloperError} Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y).\r\n * @exception {DeveloperError} Ellipsoid.radii.z must be greater than 0.\r\n */\r\nEllipsoid.prototype.getSurfaceNormalIntersectionWithZAxis = function (\r\n  position,\r\n  buffer,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"position\", position);\r\n\r\n  if (\r\n    !CesiumMath.equalsEpsilon(\r\n      this._radii.x,\r\n      this._radii.y,\r\n      CesiumMath.EPSILON15\r\n    )\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)\"\r\n    );\r\n  }\r\n\r\n  Check.typeOf.number.greaterThan(\"Ellipsoid.radii.z\", this._radii.z, 0);\r\n  //>>includeEnd('debug');\r\n\r\n  buffer = defaultValue(buffer, 0.0);\r\n\r\n  var squaredXOverSquaredZ = this._squaredXOverSquaredZ;\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  result.x = 0.0;\r\n  result.y = 0.0;\r\n  result.z = position.z * (1 - squaredXOverSquaredZ);\r\n\r\n  if (Math.abs(result.z) >= this._radii.z - buffer) {\r\n    return undefined;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nvar abscissas = [\r\n  0.14887433898163,\r\n  0.43339539412925,\r\n  0.67940956829902,\r\n  0.86506336668898,\r\n  0.97390652851717,\r\n  0.0,\r\n];\r\nvar weights = [\r\n  0.29552422471475,\r\n  0.26926671930999,\r\n  0.21908636251598,\r\n  0.14945134915058,\r\n  0.066671344308684,\r\n  0.0,\r\n];\r\n\r\n/**\r\n * Compute the 10th order Gauss-Legendre Quadrature of the given definite integral.\r\n *\r\n * @param {Number} a The lower bound for the integration.\r\n * @param {Number} b The upper bound for the integration.\r\n * @param {Ellipsoid~RealValuedScalarFunction} func The function to integrate.\r\n * @returns {Number} The value of the integral of the given function over the given domain.\r\n *\r\n * @private\r\n */\r\nfunction gaussLegendreQuadrature(a, b, func) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"a\", a);\r\n  Check.typeOf.number(\"b\", b);\r\n  Check.typeOf.func(\"func\", func);\r\n  //>>includeEnd('debug');\r\n\r\n  // The range is half of the normal range since the five weights add to one (ten weights add to two).\r\n  // The values of the abscissas are multiplied by two to account for this.\r\n  var xMean = 0.5 * (b + a);\r\n  var xRange = 0.5 * (b - a);\r\n\r\n  var sum = 0.0;\r\n  for (var i = 0; i < 5; i++) {\r\n    var dx = xRange * abscissas[i];\r\n    sum += weights[i] * (func(xMean + dx) + func(xMean - dx));\r\n  }\r\n\r\n  // Scale the sum to the range of x.\r\n  sum *= xRange;\r\n  return sum;\r\n}\r\n\r\n/**\r\n * A real valued scalar function.\r\n * @callback Ellipsoid~RealValuedScalarFunction\r\n *\r\n * @param {Number} x The value used to evaluate the function.\r\n * @returns {Number} The value of the function at x.\r\n *\r\n * @private\r\n */\r\n\r\n/**\r\n * Computes an approximation of the surface area of a rectangle on the surface of an ellipsoid using\r\n * Gauss-Legendre 10th order quadrature.\r\n *\r\n * @param {Rectangle} rectangle The rectangle used for computing the surface area.\r\n * @returns {Number} The approximate area of the rectangle on the surface of this ellipsoid.\r\n */\r\nEllipsoid.prototype.surfaceArea = function (rectangle) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n  var minLongitude = rectangle.west;\r\n  var maxLongitude = rectangle.east;\r\n  var minLatitude = rectangle.south;\r\n  var maxLatitude = rectangle.north;\r\n\r\n  while (maxLongitude < minLongitude) {\r\n    maxLongitude += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  var radiiSquared = this._radiiSquared;\r\n  var a2 = radiiSquared.x;\r\n  var b2 = radiiSquared.y;\r\n  var c2 = radiiSquared.z;\r\n  var a2b2 = a2 * b2;\r\n  return gaussLegendreQuadrature(minLatitude, maxLatitude, function (lat) {\r\n    // phi represents the angle measured from the north pole\r\n    // sin(phi) = sin(pi / 2 - lat) = cos(lat), cos(phi) is similar\r\n    var sinPhi = Math.cos(lat);\r\n    var cosPhi = Math.sin(lat);\r\n    return (\r\n      Math.cos(lat) *\r\n      gaussLegendreQuadrature(minLongitude, maxLongitude, function (lon) {\r\n        var cosTheta = Math.cos(lon);\r\n        var sinTheta = Math.sin(lon);\r\n        return Math.sqrt(\r\n          a2b2 * cosPhi * cosPhi +\r\n            c2 *\r\n              (b2 * cosTheta * cosTheta + a2 * sinTheta * sinTheta) *\r\n              sinPhi *\r\n              sinPhi\r\n        );\r\n      })\r\n    );\r\n  });\r\n};\r\n\r\nexport default Ellipsoid;\r\n","import Cartographic from \"./Cartographic.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\n/**\r\n * A two dimensional region specified as longitude and latitude coordinates.\r\n *\r\n * @alias Rectangle\r\n * @constructor\r\n *\r\n * @param {Number} [west=0.0] The westernmost longitude, in radians, in the range [-Pi, Pi].\r\n * @param {Number} [south=0.0] The southernmost latitude, in radians, in the range [-Pi/2, Pi/2].\r\n * @param {Number} [east=0.0] The easternmost longitude, in radians, in the range [-Pi, Pi].\r\n * @param {Number} [north=0.0] The northernmost latitude, in radians, in the range [-Pi/2, Pi/2].\r\n *\r\n * @see Packable\r\n */\r\nfunction Rectangle(west, south, east, north) {\r\n  /**\r\n   * The westernmost longitude in radians in the range [-Pi, Pi].\r\n   *\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.west = defaultValue(west, 0.0);\r\n\r\n  /**\r\n   * The southernmost latitude in radians in the range [-Pi/2, Pi/2].\r\n   *\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.south = defaultValue(south, 0.0);\r\n\r\n  /**\r\n   * The easternmost longitude in radians in the range [-Pi, Pi].\r\n   *\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.east = defaultValue(east, 0.0);\r\n\r\n  /**\r\n   * The northernmost latitude in radians in the range [-Pi/2, Pi/2].\r\n   *\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.north = defaultValue(north, 0.0);\r\n}\r\n\r\nObject.defineProperties(Rectangle.prototype, {\r\n  /**\r\n   * Gets the width of the rectangle in radians.\r\n   * @memberof Rectangle.prototype\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  width: {\r\n    get: function () {\r\n      return Rectangle.computeWidth(this);\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the height of the rectangle in radians.\r\n   * @memberof Rectangle.prototype\r\n   * @type {Number}\r\n   * @readonly\r\n   */\r\n  height: {\r\n    get: function () {\r\n      return Rectangle.computeHeight(this);\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nRectangle.packedLength = 4;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {Rectangle} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nRectangle.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  array[startingIndex++] = value.west;\r\n  array[startingIndex++] = value.south;\r\n  array[startingIndex++] = value.east;\r\n  array[startingIndex] = value.north;\r\n\r\n  return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {Rectangle} [result] The object into which to store the result.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\r\n */\r\nRectangle.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  if (!defined(result)) {\r\n    result = new Rectangle();\r\n  }\r\n\r\n  result.west = array[startingIndex++];\r\n  result.south = array[startingIndex++];\r\n  result.east = array[startingIndex++];\r\n  result.north = array[startingIndex];\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the width of a rectangle in radians.\r\n * @param {Rectangle} rectangle The rectangle to compute the width of.\r\n * @returns {Number} The width.\r\n */\r\nRectangle.computeWidth = function (rectangle) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n  var east = rectangle.east;\r\n  var west = rectangle.west;\r\n  if (east < west) {\r\n    east += CesiumMath.TWO_PI;\r\n  }\r\n  return east - west;\r\n};\r\n\r\n/**\r\n * Computes the height of a rectangle in radians.\r\n * @param {Rectangle} rectangle The rectangle to compute the height of.\r\n * @returns {Number} The height.\r\n */\r\nRectangle.computeHeight = function (rectangle) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n  return rectangle.north - rectangle.south;\r\n};\r\n\r\n/**\r\n * Creates a rectangle given the boundary longitude and latitude in degrees.\r\n *\r\n * @param {Number} [west=0.0] The westernmost longitude in degrees in the range [-180.0, 180.0].\r\n * @param {Number} [south=0.0] The southernmost latitude in degrees in the range [-90.0, 90.0].\r\n * @param {Number} [east=0.0] The easternmost longitude in degrees in the range [-180.0, 180.0].\r\n * @param {Number} [north=0.0] The northernmost latitude in degrees in the range [-90.0, 90.0].\r\n * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n *\r\n * @example\r\n * var rectangle = Cesium.Rectangle.fromDegrees(0.0, 20.0, 10.0, 30.0);\r\n */\r\nRectangle.fromDegrees = function (west, south, east, north, result) {\r\n  west = CesiumMath.toRadians(defaultValue(west, 0.0));\r\n  south = CesiumMath.toRadians(defaultValue(south, 0.0));\r\n  east = CesiumMath.toRadians(defaultValue(east, 0.0));\r\n  north = CesiumMath.toRadians(defaultValue(north, 0.0));\r\n\r\n  if (!defined(result)) {\r\n    return new Rectangle(west, south, east, north);\r\n  }\r\n\r\n  result.west = west;\r\n  result.south = south;\r\n  result.east = east;\r\n  result.north = north;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a rectangle given the boundary longitude and latitude in radians.\r\n *\r\n * @param {Number} [west=0.0] The westernmost longitude in radians in the range [-Math.PI, Math.PI].\r\n * @param {Number} [south=0.0] The southernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\r\n * @param {Number} [east=0.0] The easternmost longitude in radians in the range [-Math.PI, Math.PI].\r\n * @param {Number} [north=0.0] The northernmost latitude in radians in the range [-Math.PI/2, Math.PI/2].\r\n * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n *\r\n * @example\r\n * var rectangle = Cesium.Rectangle.fromRadians(0.0, Math.PI/4, Math.PI/8, 3*Math.PI/4);\r\n */\r\nRectangle.fromRadians = function (west, south, east, north, result) {\r\n  if (!defined(result)) {\r\n    return new Rectangle(west, south, east, north);\r\n  }\r\n\r\n  result.west = defaultValue(west, 0.0);\r\n  result.south = defaultValue(south, 0.0);\r\n  result.east = defaultValue(east, 0.0);\r\n  result.north = defaultValue(north, 0.0);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates the smallest possible Rectangle that encloses all positions in the provided array.\r\n *\r\n * @param {Cartographic[]} cartographics The list of Cartographic instances.\r\n * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n */\r\nRectangle.fromCartographicArray = function (cartographics, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartographics\", cartographics);\r\n  //>>includeEnd('debug');\r\n\r\n  var west = Number.MAX_VALUE;\r\n  var east = -Number.MAX_VALUE;\r\n  var westOverIDL = Number.MAX_VALUE;\r\n  var eastOverIDL = -Number.MAX_VALUE;\r\n  var south = Number.MAX_VALUE;\r\n  var north = -Number.MAX_VALUE;\r\n\r\n  for (var i = 0, len = cartographics.length; i < len; i++) {\r\n    var position = cartographics[i];\r\n    west = Math.min(west, position.longitude);\r\n    east = Math.max(east, position.longitude);\r\n    south = Math.min(south, position.latitude);\r\n    north = Math.max(north, position.latitude);\r\n\r\n    var lonAdjusted =\r\n      position.longitude >= 0\r\n        ? position.longitude\r\n        : position.longitude + CesiumMath.TWO_PI;\r\n    westOverIDL = Math.min(westOverIDL, lonAdjusted);\r\n    eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\r\n  }\r\n\r\n  if (east - west > eastOverIDL - westOverIDL) {\r\n    west = westOverIDL;\r\n    east = eastOverIDL;\r\n\r\n    if (east > CesiumMath.PI) {\r\n      east = east - CesiumMath.TWO_PI;\r\n    }\r\n    if (west > CesiumMath.PI) {\r\n      west = west - CesiumMath.TWO_PI;\r\n    }\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return new Rectangle(west, south, east, north);\r\n  }\r\n\r\n  result.west = west;\r\n  result.south = south;\r\n  result.east = east;\r\n  result.north = north;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates the smallest possible Rectangle that encloses all positions in the provided array.\r\n *\r\n * @param {Cartesian3[]} cartesians The list of Cartesian instances.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid the cartesians are on.\r\n * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n */\r\nRectangle.fromCartesianArray = function (cartesians, ellipsoid, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesians\", cartesians);\r\n  //>>includeEnd('debug');\r\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n\r\n  var west = Number.MAX_VALUE;\r\n  var east = -Number.MAX_VALUE;\r\n  var westOverIDL = Number.MAX_VALUE;\r\n  var eastOverIDL = -Number.MAX_VALUE;\r\n  var south = Number.MAX_VALUE;\r\n  var north = -Number.MAX_VALUE;\r\n\r\n  for (var i = 0, len = cartesians.length; i < len; i++) {\r\n    var position = ellipsoid.cartesianToCartographic(cartesians[i]);\r\n    west = Math.min(west, position.longitude);\r\n    east = Math.max(east, position.longitude);\r\n    south = Math.min(south, position.latitude);\r\n    north = Math.max(north, position.latitude);\r\n\r\n    var lonAdjusted =\r\n      position.longitude >= 0\r\n        ? position.longitude\r\n        : position.longitude + CesiumMath.TWO_PI;\r\n    westOverIDL = Math.min(westOverIDL, lonAdjusted);\r\n    eastOverIDL = Math.max(eastOverIDL, lonAdjusted);\r\n  }\r\n\r\n  if (east - west > eastOverIDL - westOverIDL) {\r\n    west = westOverIDL;\r\n    east = eastOverIDL;\r\n\r\n    if (east > CesiumMath.PI) {\r\n      east = east - CesiumMath.TWO_PI;\r\n    }\r\n    if (west > CesiumMath.PI) {\r\n      west = west - CesiumMath.TWO_PI;\r\n    }\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return new Rectangle(west, south, east, north);\r\n  }\r\n\r\n  result.west = west;\r\n  result.south = south;\r\n  result.east = east;\r\n  result.north = north;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Duplicates a Rectangle.\r\n *\r\n * @param {Rectangle} rectangle The rectangle to clone.\r\n * @param {Rectangle} [result] The object onto which to store the result, or undefined if a new instance should be created.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided. (Returns undefined if rectangle is undefined)\r\n */\r\nRectangle.clone = function (rectangle, result) {\r\n  if (!defined(rectangle)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return new Rectangle(\r\n      rectangle.west,\r\n      rectangle.south,\r\n      rectangle.east,\r\n      rectangle.north\r\n    );\r\n  }\r\n\r\n  result.west = rectangle.west;\r\n  result.south = rectangle.south;\r\n  result.east = rectangle.east;\r\n  result.north = rectangle.north;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compares the provided Rectangles componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Rectangle} [left] The first Rectangle.\r\n * @param {Rectangle} [right] The second Rectangle.\r\n * @param {Number} [absoluteEpsilon=0] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nRectangle.equalsEpsilon = function (left, right, absoluteEpsilon) {\r\n  absoluteEpsilon = defaultValue(absoluteEpsilon, 0);\r\n\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      Math.abs(left.west - right.west) <= absoluteEpsilon &&\r\n      Math.abs(left.south - right.south) <= absoluteEpsilon &&\r\n      Math.abs(left.east - right.east) <= absoluteEpsilon &&\r\n      Math.abs(left.north - right.north) <= absoluteEpsilon)\r\n  );\r\n};\r\n\r\n/**\r\n * Duplicates this Rectangle.\r\n *\r\n * @param {Rectangle} [result] The object onto which to store the result.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n */\r\nRectangle.prototype.clone = function (result) {\r\n  return Rectangle.clone(this, result);\r\n};\r\n\r\n/**\r\n * Compares the provided Rectangle with this Rectangle componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Rectangle} [other] The Rectangle to compare.\r\n * @returns {Boolean} <code>true</code> if the Rectangles are equal, <code>false</code> otherwise.\r\n */\r\nRectangle.prototype.equals = function (other) {\r\n  return Rectangle.equals(this, other);\r\n};\r\n\r\n/**\r\n * Compares the provided rectangles and returns <code>true</code> if they are equal,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Rectangle} [left] The first Rectangle.\r\n * @param {Rectangle} [right] The second Rectangle.\r\n * @returns {Boolean} <code>true</code> if left and right are equal; otherwise <code>false</code>.\r\n */\r\nRectangle.equals = function (left, right) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      left.west === right.west &&\r\n      left.south === right.south &&\r\n      left.east === right.east &&\r\n      left.north === right.north)\r\n  );\r\n};\r\n\r\n/**\r\n * Compares the provided Rectangle with this Rectangle componentwise and returns\r\n * <code>true</code> if they are within the provided epsilon,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Rectangle} [other] The Rectangle to compare.\r\n * @param {Number} [epsilon=0] The epsilon to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if the Rectangles are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nRectangle.prototype.equalsEpsilon = function (other, epsilon) {\r\n  return Rectangle.equalsEpsilon(this, other, epsilon);\r\n};\r\n\r\n/**\r\n * Checks a Rectangle's properties and throws if they are not in valid ranges.\r\n *\r\n * @param {Rectangle} rectangle The rectangle to validate\r\n *\r\n * @exception {DeveloperError} <code>north</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n * @exception {DeveloperError} <code>south</code> must be in the interval [<code>-Pi/2</code>, <code>Pi/2</code>].\r\n * @exception {DeveloperError} <code>east</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n * @exception {DeveloperError} <code>west</code> must be in the interval [<code>-Pi</code>, <code>Pi</code>].\r\n */\r\nRectangle.validate = function (rectangle) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n\r\n  var north = rectangle.north;\r\n  Check.typeOf.number.greaterThanOrEquals(\r\n    \"north\",\r\n    north,\r\n    -CesiumMath.PI_OVER_TWO\r\n  );\r\n  Check.typeOf.number.lessThanOrEquals(\"north\", north, CesiumMath.PI_OVER_TWO);\r\n\r\n  var south = rectangle.south;\r\n  Check.typeOf.number.greaterThanOrEquals(\r\n    \"south\",\r\n    south,\r\n    -CesiumMath.PI_OVER_TWO\r\n  );\r\n  Check.typeOf.number.lessThanOrEquals(\"south\", south, CesiumMath.PI_OVER_TWO);\r\n\r\n  var west = rectangle.west;\r\n  Check.typeOf.number.greaterThanOrEquals(\"west\", west, -Math.PI);\r\n  Check.typeOf.number.lessThanOrEquals(\"west\", west, Math.PI);\r\n\r\n  var east = rectangle.east;\r\n  Check.typeOf.number.greaterThanOrEquals(\"east\", east, -Math.PI);\r\n  Check.typeOf.number.lessThanOrEquals(\"east\", east, Math.PI);\r\n  //>>includeEnd('debug');\r\n};\r\n\r\n/**\r\n * Computes the southwest corner of a rectangle.\r\n *\r\n * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n */\r\nRectangle.southwest = function (rectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(rectangle.west, rectangle.south);\r\n  }\r\n  result.longitude = rectangle.west;\r\n  result.latitude = rectangle.south;\r\n  result.height = 0.0;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the northwest corner of a rectangle.\r\n *\r\n * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n */\r\nRectangle.northwest = function (rectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(rectangle.west, rectangle.north);\r\n  }\r\n  result.longitude = rectangle.west;\r\n  result.latitude = rectangle.north;\r\n  result.height = 0.0;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the northeast corner of a rectangle.\r\n *\r\n * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n */\r\nRectangle.northeast = function (rectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(rectangle.east, rectangle.north);\r\n  }\r\n  result.longitude = rectangle.east;\r\n  result.latitude = rectangle.north;\r\n  result.height = 0.0;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the southeast corner of a rectangle.\r\n *\r\n * @param {Rectangle} rectangle The rectangle for which to find the corner\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n */\r\nRectangle.southeast = function (rectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(rectangle.east, rectangle.south);\r\n  }\r\n  result.longitude = rectangle.east;\r\n  result.latitude = rectangle.south;\r\n  result.height = 0.0;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the center of a rectangle.\r\n *\r\n * @param {Rectangle} rectangle The rectangle for which to find the center\r\n * @param {Cartographic} [result] The object onto which to store the result.\r\n * @returns {Cartographic} The modified result parameter or a new Cartographic instance if none was provided.\r\n */\r\nRectangle.center = function (rectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  var east = rectangle.east;\r\n  var west = rectangle.west;\r\n\r\n  if (east < west) {\r\n    east += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  var longitude = CesiumMath.negativePiToPi((west + east) * 0.5);\r\n  var latitude = (rectangle.south + rectangle.north) * 0.5;\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(longitude, latitude);\r\n  }\r\n\r\n  result.longitude = longitude;\r\n  result.latitude = latitude;\r\n  result.height = 0.0;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the intersection of two rectangles.  This function assumes that the rectangle's coordinates are\r\n * latitude and longitude in radians and produces a correct intersection, taking into account the fact that\r\n * the same angle can be represented with multiple values as well as the wrapping of longitude at the\r\n * anti-meridian.  For a simple intersection that ignores these factors and can be used with projected\r\n * coordinates, see {@link Rectangle.simpleIntersection}.\r\n *\r\n * @param {Rectangle} rectangle On rectangle to find an intersection\r\n * @param {Rectangle} otherRectangle Another rectangle to find an intersection\r\n * @param {Rectangle} [result] The object onto which to store the result.\r\n * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\r\n */\r\nRectangle.intersection = function (rectangle, otherRectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  Check.typeOf.object(\"otherRectangle\", otherRectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  var rectangleEast = rectangle.east;\r\n  var rectangleWest = rectangle.west;\r\n\r\n  var otherRectangleEast = otherRectangle.east;\r\n  var otherRectangleWest = otherRectangle.west;\r\n\r\n  if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\r\n    rectangleEast += CesiumMath.TWO_PI;\r\n  } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\r\n    otherRectangleEast += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\r\n    otherRectangleWest += CesiumMath.TWO_PI;\r\n  } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\r\n    rectangleWest += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  var west = CesiumMath.negativePiToPi(\r\n    Math.max(rectangleWest, otherRectangleWest)\r\n  );\r\n  var east = CesiumMath.negativePiToPi(\r\n    Math.min(rectangleEast, otherRectangleEast)\r\n  );\r\n\r\n  if (\r\n    (rectangle.west < rectangle.east ||\r\n      otherRectangle.west < otherRectangle.east) &&\r\n    east <= west\r\n  ) {\r\n    return undefined;\r\n  }\r\n\r\n  var south = Math.max(rectangle.south, otherRectangle.south);\r\n  var north = Math.min(rectangle.north, otherRectangle.north);\r\n\r\n  if (south >= north) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return new Rectangle(west, south, east, north);\r\n  }\r\n  result.west = west;\r\n  result.south = south;\r\n  result.east = east;\r\n  result.north = north;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes a simple intersection of two rectangles.  Unlike {@link Rectangle.intersection}, this function\r\n * does not attempt to put the angular coordinates into a consistent range or to account for crossing the\r\n * anti-meridian.  As such, it can be used for rectangles where the coordinates are not simply latitude\r\n * and longitude (i.e. projected coordinates).\r\n *\r\n * @param {Rectangle} rectangle On rectangle to find an intersection\r\n * @param {Rectangle} otherRectangle Another rectangle to find an intersection\r\n * @param {Rectangle} [result] The object onto which to store the result.\r\n * @returns {Rectangle|undefined} The modified result parameter, a new Rectangle instance if none was provided or undefined if there is no intersection.\r\n */\r\nRectangle.simpleIntersection = function (rectangle, otherRectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  Check.typeOf.object(\"otherRectangle\", otherRectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  var west = Math.max(rectangle.west, otherRectangle.west);\r\n  var south = Math.max(rectangle.south, otherRectangle.south);\r\n  var east = Math.min(rectangle.east, otherRectangle.east);\r\n  var north = Math.min(rectangle.north, otherRectangle.north);\r\n\r\n  if (south >= north || west >= east) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return new Rectangle(west, south, east, north);\r\n  }\r\n\r\n  result.west = west;\r\n  result.south = south;\r\n  result.east = east;\r\n  result.north = north;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes a rectangle that is the union of two rectangles.\r\n *\r\n * @param {Rectangle} rectangle A rectangle to enclose in rectangle.\r\n * @param {Rectangle} otherRectangle A rectangle to enclose in a rectangle.\r\n * @param {Rectangle} [result] The object onto which to store the result.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if none was provided.\r\n */\r\nRectangle.union = function (rectangle, otherRectangle, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  Check.typeOf.object(\"otherRectangle\", otherRectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Rectangle();\r\n  }\r\n\r\n  var rectangleEast = rectangle.east;\r\n  var rectangleWest = rectangle.west;\r\n\r\n  var otherRectangleEast = otherRectangle.east;\r\n  var otherRectangleWest = otherRectangle.west;\r\n\r\n  if (rectangleEast < rectangleWest && otherRectangleEast > 0.0) {\r\n    rectangleEast += CesiumMath.TWO_PI;\r\n  } else if (otherRectangleEast < otherRectangleWest && rectangleEast > 0.0) {\r\n    otherRectangleEast += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  if (rectangleEast < rectangleWest && otherRectangleWest < 0.0) {\r\n    otherRectangleWest += CesiumMath.TWO_PI;\r\n  } else if (otherRectangleEast < otherRectangleWest && rectangleWest < 0.0) {\r\n    rectangleWest += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  var west = CesiumMath.convertLongitudeRange(\r\n    Math.min(rectangleWest, otherRectangleWest)\r\n  );\r\n  var east = CesiumMath.convertLongitudeRange(\r\n    Math.max(rectangleEast, otherRectangleEast)\r\n  );\r\n\r\n  result.west = west;\r\n  result.south = Math.min(rectangle.south, otherRectangle.south);\r\n  result.east = east;\r\n  result.north = Math.max(rectangle.north, otherRectangle.north);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes a rectangle by enlarging the provided rectangle until it contains the provided cartographic.\r\n *\r\n * @param {Rectangle} rectangle A rectangle to expand.\r\n * @param {Cartographic} cartographic A cartographic to enclose in a rectangle.\r\n * @param {Rectangle} [result] The object onto which to store the result.\r\n * @returns {Rectangle} The modified result parameter or a new Rectangle instance if one was not provided.\r\n */\r\nRectangle.expand = function (rectangle, cartographic, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  Check.typeOf.object(\"cartographic\", cartographic);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Rectangle();\r\n  }\r\n\r\n  result.west = Math.min(rectangle.west, cartographic.longitude);\r\n  result.south = Math.min(rectangle.south, cartographic.latitude);\r\n  result.east = Math.max(rectangle.east, cartographic.longitude);\r\n  result.north = Math.max(rectangle.north, cartographic.latitude);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Returns true if the cartographic is on or inside the rectangle, false otherwise.\r\n *\r\n * @param {Rectangle} rectangle The rectangle\r\n * @param {Cartographic} cartographic The cartographic to test.\r\n * @returns {Boolean} true if the provided cartographic is inside the rectangle, false otherwise.\r\n */\r\nRectangle.contains = function (rectangle, cartographic) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  Check.typeOf.object(\"cartographic\", cartographic);\r\n  //>>includeEnd('debug');\r\n\r\n  var longitude = cartographic.longitude;\r\n  var latitude = cartographic.latitude;\r\n\r\n  var west = rectangle.west;\r\n  var east = rectangle.east;\r\n\r\n  if (east < west) {\r\n    east += CesiumMath.TWO_PI;\r\n    if (longitude < 0.0) {\r\n      longitude += CesiumMath.TWO_PI;\r\n    }\r\n  }\r\n  return (\r\n    (longitude > west ||\r\n      CesiumMath.equalsEpsilon(longitude, west, CesiumMath.EPSILON14)) &&\r\n    (longitude < east ||\r\n      CesiumMath.equalsEpsilon(longitude, east, CesiumMath.EPSILON14)) &&\r\n    latitude >= rectangle.south &&\r\n    latitude <= rectangle.north\r\n  );\r\n};\r\n\r\nvar subsampleLlaScratch = new Cartographic();\r\n/**\r\n * Samples a rectangle so that it includes a list of Cartesian points suitable for passing to\r\n * {@link BoundingSphere#fromPoints}.  Sampling is necessary to account\r\n * for rectangles that cover the poles or cross the equator.\r\n *\r\n * @param {Rectangle} rectangle The rectangle to subsample.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n * @param {Number} [surfaceHeight=0.0] The height of the rectangle above the ellipsoid.\r\n * @param {Cartesian3[]} [result] The array of Cartesians onto which to store the result.\r\n * @returns {Cartesian3[]} The modified result parameter or a new Array of Cartesians instances if none was provided.\r\n */\r\nRectangle.subsample = function (rectangle, ellipsoid, surfaceHeight, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  //>>includeEnd('debug');\r\n\r\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n  surfaceHeight = defaultValue(surfaceHeight, 0.0);\r\n\r\n  if (!defined(result)) {\r\n    result = [];\r\n  }\r\n  var length = 0;\r\n\r\n  var north = rectangle.north;\r\n  var south = rectangle.south;\r\n  var east = rectangle.east;\r\n  var west = rectangle.west;\r\n\r\n  var lla = subsampleLlaScratch;\r\n  lla.height = surfaceHeight;\r\n\r\n  lla.longitude = west;\r\n  lla.latitude = north;\r\n  result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n  length++;\r\n\r\n  lla.longitude = east;\r\n  result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n  length++;\r\n\r\n  lla.latitude = south;\r\n  result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n  length++;\r\n\r\n  lla.longitude = west;\r\n  result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n  length++;\r\n\r\n  if (north < 0.0) {\r\n    lla.latitude = north;\r\n  } else if (south > 0.0) {\r\n    lla.latitude = south;\r\n  } else {\r\n    lla.latitude = 0.0;\r\n  }\r\n\r\n  for (var i = 1; i < 8; ++i) {\r\n    lla.longitude = -Math.PI + i * CesiumMath.PI_OVER_TWO;\r\n    if (Rectangle.contains(rectangle, lla)) {\r\n      result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n      length++;\r\n    }\r\n  }\r\n\r\n  if (lla.latitude === 0.0) {\r\n    lla.longitude = west;\r\n    result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n    length++;\r\n    lla.longitude = east;\r\n    result[length] = ellipsoid.cartographicToCartesian(lla, result[length]);\r\n    length++;\r\n  }\r\n  result.length = length;\r\n  return result;\r\n};\r\n\r\n/**\r\n * The largest possible rectangle.\r\n *\r\n * @type {Rectangle}\r\n * @constant\r\n */\r\nRectangle.MAX_VALUE = Object.freeze(\r\n  new Rectangle(\r\n    -Math.PI,\r\n    -CesiumMath.PI_OVER_TWO,\r\n    Math.PI,\r\n    CesiumMath.PI_OVER_TWO\r\n  )\r\n);\r\nexport default Rectangle;\r\n","import Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\n/**\r\n * A 2D Cartesian point.\r\n * @alias Cartesian2\r\n * @constructor\r\n *\r\n * @param {Number} [x=0.0] The X component.\r\n * @param {Number} [y=0.0] The Y component.\r\n *\r\n * @see Cartesian3\r\n * @see Cartesian4\r\n * @see Packable\r\n */\r\nfunction Cartesian2(x, y) {\r\n  /**\r\n   * The X component.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.x = defaultValue(x, 0.0);\r\n\r\n  /**\r\n   * The Y component.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.y = defaultValue(y, 0.0);\r\n}\r\n\r\n/**\r\n * Creates a Cartesian2 instance from x and y coordinates.\r\n *\r\n * @param {Number} x The x coordinate.\r\n * @param {Number} y The y coordinate.\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n */\r\nCartesian2.fromElements = function (x, y, result) {\r\n  if (!defined(result)) {\r\n    return new Cartesian2(x, y);\r\n  }\r\n\r\n  result.x = x;\r\n  result.y = y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Duplicates a Cartesian2 instance.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian to duplicate.\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided. (Returns undefined if cartesian is undefined)\r\n */\r\nCartesian2.clone = function (cartesian, result) {\r\n  if (!defined(cartesian)) {\r\n    return undefined;\r\n  }\r\n  if (!defined(result)) {\r\n    return new Cartesian2(cartesian.x, cartesian.y);\r\n  }\r\n\r\n  result.x = cartesian.x;\r\n  result.y = cartesian.y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a Cartesian2 instance from an existing Cartesian3.  This simply takes the\r\n * x and y properties of the Cartesian3 and drops z.\r\n * @function\r\n *\r\n * @param {Cartesian3} cartesian The Cartesian3 instance to create a Cartesian2 instance from.\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n */\r\nCartesian2.fromCartesian3 = Cartesian2.clone;\r\n\r\n/**\r\n * Creates a Cartesian2 instance from an existing Cartesian4.  This simply takes the\r\n * x and y properties of the Cartesian4 and drops z and w.\r\n * @function\r\n *\r\n * @param {Cartesian4} cartesian The Cartesian4 instance to create a Cartesian2 instance from.\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n */\r\nCartesian2.fromCartesian4 = Cartesian2.clone;\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCartesian2.packedLength = 2;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {Cartesian2} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCartesian2.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  array[startingIndex++] = value.x;\r\n  array[startingIndex] = value.y;\r\n\r\n  return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {Cartesian2} [result] The object into which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n */\r\nCartesian2.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian2();\r\n  }\r\n  result.x = array[startingIndex++];\r\n  result.y = array[startingIndex];\r\n  return result;\r\n};\r\n\r\n/**\r\n     * Flattens an array of Cartesian2s into and array of components.\r\n     *\r\n     * @param {Cartesian2[]} array The array of cartesians to pack.\r\n     * @param {Number[]} [result] The array onto which to store the result. If this is a typed array, it must have array.length * 2 components, else a {@link DeveloperError} will be thrown. If it is a regular array, it will be resized to have (array.length * 2) elements.\r\n\r\n     * @returns {Number[]} The packed array.\r\n     */\r\nCartesian2.packArray = function (array, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  var length = array.length;\r\n  var resultLength = length * 2;\r\n  if (!defined(result)) {\r\n    result = new Array(resultLength);\r\n  } else if (!Array.isArray(result) && result.length !== resultLength) {\r\n    throw new DeveloperError(\r\n      \"If result is a typed array, it must have exactly array.length * 2 elements\"\r\n    );\r\n  } else if (result.length !== resultLength) {\r\n    result.length = resultLength;\r\n  }\r\n\r\n  for (var i = 0; i < length; ++i) {\r\n    Cartesian2.pack(array[i], result, i * 2);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Unpacks an array of cartesian components into and array of Cartesian2s.\r\n *\r\n * @param {Number[]} array The array of components to unpack.\r\n * @param {Cartesian2[]} [result] The array onto which to store the result.\r\n * @returns {Cartesian2[]} The unpacked array.\r\n */\r\nCartesian2.unpackArray = function (array, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  Check.typeOf.number.greaterThanOrEquals(\"array.length\", array.length, 2);\r\n  if (array.length % 2 !== 0) {\r\n    throw new DeveloperError(\"array length must be a multiple of 2.\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var length = array.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length / 2);\r\n  } else {\r\n    result.length = length / 2;\r\n  }\r\n\r\n  for (var i = 0; i < length; i += 2) {\r\n    var index = i / 2;\r\n    result[index] = Cartesian2.unpack(array, i, result[index]);\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates a Cartesian2 from two consecutive elements in an array.\r\n * @function\r\n *\r\n * @param {Number[]} array The array whose two consecutive elements correspond to the x and y components, respectively.\r\n * @param {Number} [startingIndex=0] The offset into the array of the first element, which corresponds to the x component.\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n *\r\n * @example\r\n * // Create a Cartesian2 with (1.0, 2.0)\r\n * var v = [1.0, 2.0];\r\n * var p = Cesium.Cartesian2.fromArray(v);\r\n *\r\n * // Create a Cartesian2 with (1.0, 2.0) using an offset into an array\r\n * var v2 = [0.0, 0.0, 1.0, 2.0];\r\n * var p2 = Cesium.Cartesian2.fromArray(v2, 2);\r\n */\r\nCartesian2.fromArray = Cartesian2.unpack;\r\n\r\n/**\r\n * Computes the value of the maximum component for the supplied Cartesian.\r\n *\r\n * @param {Cartesian2} cartesian The cartesian to use.\r\n * @returns {Number} The value of the maximum component.\r\n */\r\nCartesian2.maximumComponent = function (cartesian) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  return Math.max(cartesian.x, cartesian.y);\r\n};\r\n\r\n/**\r\n * Computes the value of the minimum component for the supplied Cartesian.\r\n *\r\n * @param {Cartesian2} cartesian The cartesian to use.\r\n * @returns {Number} The value of the minimum component.\r\n */\r\nCartesian2.minimumComponent = function (cartesian) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  return Math.min(cartesian.x, cartesian.y);\r\n};\r\n\r\n/**\r\n * Compares two Cartesians and computes a Cartesian which contains the minimum components of the supplied Cartesians.\r\n *\r\n * @param {Cartesian2} first A cartesian to compare.\r\n * @param {Cartesian2} second A cartesian to compare.\r\n * @param {Cartesian2} result The object into which to store the result.\r\n * @returns {Cartesian2} A cartesian with the minimum components.\r\n */\r\nCartesian2.minimumByComponent = function (first, second, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"first\", first);\r\n  Check.typeOf.object(\"second\", second);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = Math.min(first.x, second.x);\r\n  result.y = Math.min(first.y, second.y);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compares two Cartesians and computes a Cartesian which contains the maximum components of the supplied Cartesians.\r\n *\r\n * @param {Cartesian2} first A cartesian to compare.\r\n * @param {Cartesian2} second A cartesian to compare.\r\n * @param {Cartesian2} result The object into which to store the result.\r\n * @returns {Cartesian2} A cartesian with the maximum components.\r\n */\r\nCartesian2.maximumByComponent = function (first, second, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"first\", first);\r\n  Check.typeOf.object(\"second\", second);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = Math.max(first.x, second.x);\r\n  result.y = Math.max(first.y, second.y);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the provided Cartesian's squared magnitude.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian instance whose squared magnitude is to be computed.\r\n * @returns {Number} The squared magnitude.\r\n */\r\nCartesian2.magnitudeSquared = function (cartesian) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  return cartesian.x * cartesian.x + cartesian.y * cartesian.y;\r\n};\r\n\r\n/**\r\n * Computes the Cartesian's magnitude (length).\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian instance whose magnitude is to be computed.\r\n * @returns {Number} The magnitude.\r\n */\r\nCartesian2.magnitude = function (cartesian) {\r\n  return Math.sqrt(Cartesian2.magnitudeSquared(cartesian));\r\n};\r\n\r\nvar distanceScratch = new Cartesian2();\r\n\r\n/**\r\n * Computes the distance between two points.\r\n *\r\n * @param {Cartesian2} left The first point to compute the distance from.\r\n * @param {Cartesian2} right The second point to compute the distance to.\r\n * @returns {Number} The distance between two points.\r\n *\r\n * @example\r\n * // Returns 1.0\r\n * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(2.0, 0.0));\r\n */\r\nCartesian2.distance = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian2.subtract(left, right, distanceScratch);\r\n  return Cartesian2.magnitude(distanceScratch);\r\n};\r\n\r\n/**\r\n * Computes the squared distance between two points.  Comparing squared distances\r\n * using this function is more efficient than comparing distances using {@link Cartesian2#distance}.\r\n *\r\n * @param {Cartesian2} left The first point to compute the distance from.\r\n * @param {Cartesian2} right The second point to compute the distance to.\r\n * @returns {Number} The distance between two points.\r\n *\r\n * @example\r\n * // Returns 4.0, not 2.0\r\n * var d = Cesium.Cartesian2.distance(new Cesium.Cartesian2(1.0, 0.0), new Cesium.Cartesian2(3.0, 0.0));\r\n */\r\nCartesian2.distanceSquared = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian2.subtract(left, right, distanceScratch);\r\n  return Cartesian2.magnitudeSquared(distanceScratch);\r\n};\r\n\r\n/**\r\n * Computes the normalized form of the supplied Cartesian.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian to be normalized.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.normalize = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var magnitude = Cartesian2.magnitude(cartesian);\r\n\r\n  result.x = cartesian.x / magnitude;\r\n  result.y = cartesian.y / magnitude;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (isNaN(result.x) || isNaN(result.y)) {\r\n    throw new DeveloperError(\"normalized result is not a number\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the dot (scalar) product of two Cartesians.\r\n *\r\n * @param {Cartesian2} left The first Cartesian.\r\n * @param {Cartesian2} right The second Cartesian.\r\n * @returns {Number} The dot product.\r\n */\r\nCartesian2.dot = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  return left.x * right.x + left.y * right.y;\r\n};\r\n\r\n/**\r\n * Computes the magnitude of the cross product that would result from implicitly setting the Z coordinate of the input vectors to 0\r\n *\r\n * @param {Cartesian2} left The first Cartesian.\r\n * @param {Cartesian2} right The second Cartesian.\r\n * @returns {Number} The cross product.\r\n */\r\nCartesian2.cross = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  return left.x * right.y - left.y * right.x;\r\n};\r\n\r\n/**\r\n * Computes the componentwise product of two Cartesians.\r\n *\r\n * @param {Cartesian2} left The first Cartesian.\r\n * @param {Cartesian2} right The second Cartesian.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.multiplyComponents = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x * right.x;\r\n  result.y = left.y * right.y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the componentwise quotient of two Cartesians.\r\n *\r\n * @param {Cartesian2} left The first Cartesian.\r\n * @param {Cartesian2} right The second Cartesian.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.divideComponents = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x / right.x;\r\n  result.y = left.y / right.y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the componentwise sum of two Cartesians.\r\n *\r\n * @param {Cartesian2} left The first Cartesian.\r\n * @param {Cartesian2} right The second Cartesian.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.add = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x + right.x;\r\n  result.y = left.y + right.y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the componentwise difference of two Cartesians.\r\n *\r\n * @param {Cartesian2} left The first Cartesian.\r\n * @param {Cartesian2} right The second Cartesian.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.subtract = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = left.x - right.x;\r\n  result.y = left.y - right.y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Multiplies the provided Cartesian componentwise by the provided scalar.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian to be scaled.\r\n * @param {Number} scalar The scalar to multiply with.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.multiplyByScalar = function (cartesian, scalar, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.number(\"scalar\", scalar);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = cartesian.x * scalar;\r\n  result.y = cartesian.y * scalar;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Divides the provided Cartesian componentwise by the provided scalar.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian to be divided.\r\n * @param {Number} scalar The scalar to divide by.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.divideByScalar = function (cartesian, scalar, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.number(\"scalar\", scalar);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = cartesian.x / scalar;\r\n  result.y = cartesian.y / scalar;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Negates the provided Cartesian.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian to be negated.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.negate = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = -cartesian.x;\r\n  result.y = -cartesian.y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the absolute value of the provided Cartesian.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian whose absolute value is to be computed.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.abs = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  result.x = Math.abs(cartesian.x);\r\n  result.y = Math.abs(cartesian.y);\r\n  return result;\r\n};\r\n\r\nvar lerpScratch = new Cartesian2();\r\n/**\r\n * Computes the linear interpolation or extrapolation at t using the provided cartesians.\r\n *\r\n * @param {Cartesian2} start The value corresponding to t at 0.0.\r\n * @param {Cartesian2} end The value corresponding to t at 1.0.\r\n * @param {Number} t The point along t at which to interpolate.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter.\r\n */\r\nCartesian2.lerp = function (start, end, t, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"start\", start);\r\n  Check.typeOf.object(\"end\", end);\r\n  Check.typeOf.number(\"t\", t);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian2.multiplyByScalar(end, t, lerpScratch);\r\n  result = Cartesian2.multiplyByScalar(start, 1.0 - t, result);\r\n  return Cartesian2.add(lerpScratch, result, result);\r\n};\r\n\r\nvar angleBetweenScratch = new Cartesian2();\r\nvar angleBetweenScratch2 = new Cartesian2();\r\n/**\r\n * Returns the angle, in radians, between the provided Cartesians.\r\n *\r\n * @param {Cartesian2} left The first Cartesian.\r\n * @param {Cartesian2} right The second Cartesian.\r\n * @returns {Number} The angle between the Cartesians.\r\n */\r\nCartesian2.angleBetween = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  Cartesian2.normalize(left, angleBetweenScratch);\r\n  Cartesian2.normalize(right, angleBetweenScratch2);\r\n  return CesiumMath.acosClamped(\r\n    Cartesian2.dot(angleBetweenScratch, angleBetweenScratch2)\r\n  );\r\n};\r\n\r\nvar mostOrthogonalAxisScratch = new Cartesian2();\r\n/**\r\n * Returns the axis that is most orthogonal to the provided Cartesian.\r\n *\r\n * @param {Cartesian2} cartesian The Cartesian on which to find the most orthogonal axis.\r\n * @param {Cartesian2} result The object onto which to store the result.\r\n * @returns {Cartesian2} The most orthogonal axis.\r\n */\r\nCartesian2.mostOrthogonalAxis = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"cartesian\", cartesian);\r\n  Check.typeOf.object(\"result\", result);\r\n  //>>includeEnd('debug');\r\n\r\n  var f = Cartesian2.normalize(cartesian, mostOrthogonalAxisScratch);\r\n  Cartesian2.abs(f, f);\r\n\r\n  if (f.x <= f.y) {\r\n    result = Cartesian2.clone(Cartesian2.UNIT_X, result);\r\n  } else {\r\n    result = Cartesian2.clone(Cartesian2.UNIT_Y, result);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compares the provided Cartesians componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian2} [left] The first Cartesian.\r\n * @param {Cartesian2} [right] The second Cartesian.\r\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n */\r\nCartesian2.equals = function (left, right) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      left.x === right.x &&\r\n      left.y === right.y)\r\n  );\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nCartesian2.equalsArray = function (cartesian, array, offset) {\r\n  return cartesian.x === array[offset] && cartesian.y === array[offset + 1];\r\n};\r\n\r\n/**\r\n * Compares the provided Cartesians componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian2} [left] The first Cartesian.\r\n * @param {Cartesian2} [right] The second Cartesian.\r\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if left and right are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nCartesian2.equalsEpsilon = function (\r\n  left,\r\n  right,\r\n  relativeEpsilon,\r\n  absoluteEpsilon\r\n) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      CesiumMath.equalsEpsilon(\r\n        left.x,\r\n        right.x,\r\n        relativeEpsilon,\r\n        absoluteEpsilon\r\n      ) &&\r\n      CesiumMath.equalsEpsilon(\r\n        left.y,\r\n        right.y,\r\n        relativeEpsilon,\r\n        absoluteEpsilon\r\n      ))\r\n  );\r\n};\r\n\r\n/**\r\n * An immutable Cartesian2 instance initialized to (0.0, 0.0).\r\n *\r\n * @type {Cartesian2}\r\n * @constant\r\n */\r\nCartesian2.ZERO = Object.freeze(new Cartesian2(0.0, 0.0));\r\n\r\n/**\r\n * An immutable Cartesian2 instance initialized to (1.0, 0.0).\r\n *\r\n * @type {Cartesian2}\r\n * @constant\r\n */\r\nCartesian2.UNIT_X = Object.freeze(new Cartesian2(1.0, 0.0));\r\n\r\n/**\r\n * An immutable Cartesian2 instance initialized to (0.0, 1.0).\r\n *\r\n * @type {Cartesian2}\r\n * @constant\r\n */\r\nCartesian2.UNIT_Y = Object.freeze(new Cartesian2(0.0, 1.0));\r\n\r\n/**\r\n * Duplicates this Cartesian2 instance.\r\n *\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if one was not provided.\r\n */\r\nCartesian2.prototype.clone = function (result) {\r\n  return Cartesian2.clone(this, result);\r\n};\r\n\r\n/**\r\n * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian2} [right] The right hand side Cartesian.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nCartesian2.prototype.equals = function (right) {\r\n  return Cartesian2.equals(this, right);\r\n};\r\n\r\n/**\r\n * Compares this Cartesian against the provided Cartesian componentwise and returns\r\n * <code>true</code> if they pass an absolute or relative tolerance test,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param {Cartesian2} [right] The right hand side Cartesian.\r\n * @param {Number} [relativeEpsilon=0] The relative epsilon tolerance to use for equality testing.\r\n * @param {Number} [absoluteEpsilon=relativeEpsilon] The absolute epsilon tolerance to use for equality testing.\r\n * @returns {Boolean} <code>true</code> if they are within the provided epsilon, <code>false</code> otherwise.\r\n */\r\nCartesian2.prototype.equalsEpsilon = function (\r\n  right,\r\n  relativeEpsilon,\r\n  absoluteEpsilon\r\n) {\r\n  return Cartesian2.equalsEpsilon(\r\n    this,\r\n    right,\r\n    relativeEpsilon,\r\n    absoluteEpsilon\r\n  );\r\n};\r\n\r\n/**\r\n * Creates a string representing this Cartesian in the format '(x, y)'.\r\n *\r\n * @returns {String} A string representing the provided Cartesian in the format '(x, y)'.\r\n */\r\nCartesian2.prototype.toString = function () {\r\n  return \"(\" + this.x + \", \" + this.y + \")\";\r\n};\r\nexport default Cartesian2;\r\n"],"names":["defaultValue","Check","defined","DeveloperError","distanceScratch","lerpScratch","angleBetweenScratch","angleBetweenScratch2","mostOrthogonalAxisScratch","CesiumMath","cartesianToCartographicN","cartesianToCartographicP","cartesianToCartographicH"],"mappings":"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"}