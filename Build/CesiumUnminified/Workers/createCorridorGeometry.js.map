{"version":3,"file":"createCorridorGeometry.js","sources":["../../../../Source/Core/CorridorGeometry.js","../../../../Source/WorkersES6/createCorridorGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\r\nimport arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport CorridorGeometryLibrary from \"./CorridorGeometryLibrary.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport Rectangle from \"./Rectangle.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nvar cartesian1 = new Cartesian3();\r\nvar cartesian2 = new Cartesian3();\r\nvar cartesian3 = new Cartesian3();\r\nvar cartesian4 = new Cartesian3();\r\nvar cartesian5 = new Cartesian3();\r\nvar cartesian6 = new Cartesian3();\r\n\r\nvar scratch1 = new Cartesian3();\r\nvar scratch2 = new Cartesian3();\r\n\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n  for (var i = 0; i < positions.length; i++) {\r\n    positions[i] = ellipsoid.scaleToGeodeticSurface(positions[i], positions[i]);\r\n  }\r\n  return positions;\r\n}\r\n\r\nfunction addNormals(attr, normal, left, front, back, vertexFormat) {\r\n  var normals = attr.normals;\r\n  var tangents = attr.tangents;\r\n  var bitangents = attr.bitangents;\r\n  var forward = Cartesian3.normalize(\r\n    Cartesian3.cross(left, normal, scratch1),\r\n    scratch1\r\n  );\r\n  if (vertexFormat.normal) {\r\n    CorridorGeometryLibrary.addAttribute(normals, normal, front, back);\r\n  }\r\n  if (vertexFormat.tangent) {\r\n    CorridorGeometryLibrary.addAttribute(tangents, forward, front, back);\r\n  }\r\n  if (vertexFormat.bitangent) {\r\n    CorridorGeometryLibrary.addAttribute(bitangents, left, front, back);\r\n  }\r\n}\r\n\r\nfunction combine(computedPositions, vertexFormat, ellipsoid) {\r\n  var positions = computedPositions.positions;\r\n  var corners = computedPositions.corners;\r\n  var endPositions = computedPositions.endPositions;\r\n  var computedLefts = computedPositions.lefts;\r\n  var computedNormals = computedPositions.normals;\r\n  var attributes = new GeometryAttributes();\r\n  var corner;\r\n  var leftCount = 0;\r\n  var rightCount = 0;\r\n  var i;\r\n  var indicesLength = 0;\r\n  var length;\r\n  for (i = 0; i < positions.length; i += 2) {\r\n    length = positions[i].length - 3;\r\n    leftCount += length; //subtracting 3 to account for duplicate points at corners\r\n    indicesLength += length * 2;\r\n    rightCount += positions[i + 1].length - 3;\r\n  }\r\n  leftCount += 3; //add back count for end positions\r\n  rightCount += 3;\r\n  for (i = 0; i < corners.length; i++) {\r\n    corner = corners[i];\r\n    var leftSide = corners[i].leftPositions;\r\n    if (defined(leftSide)) {\r\n      length = leftSide.length;\r\n      leftCount += length;\r\n      indicesLength += length;\r\n    } else {\r\n      length = corners[i].rightPositions.length;\r\n      rightCount += length;\r\n      indicesLength += length;\r\n    }\r\n  }\r\n\r\n  var addEndPositions = defined(endPositions);\r\n  var endPositionLength;\r\n  if (addEndPositions) {\r\n    endPositionLength = endPositions[0].length - 3;\r\n    leftCount += endPositionLength;\r\n    rightCount += endPositionLength;\r\n    endPositionLength /= 3;\r\n    indicesLength += endPositionLength * 6;\r\n  }\r\n  var size = leftCount + rightCount;\r\n  var finalPositions = new Float64Array(size);\r\n  var normals = vertexFormat.normal ? new Float32Array(size) : undefined;\r\n  var tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\r\n  var bitangents = vertexFormat.bitangent ? new Float32Array(size) : undefined;\r\n  var attr = {\r\n    normals: normals,\r\n    tangents: tangents,\r\n    bitangents: bitangents,\r\n  };\r\n  var front = 0;\r\n  var back = size - 1;\r\n  var UL, LL, UR, LR;\r\n  var normal = cartesian1;\r\n  var left = cartesian2;\r\n  var rightPos, leftPos;\r\n  var halfLength = endPositionLength / 2;\r\n\r\n  var indices = IndexDatatype.createTypedArray(size / 3, indicesLength);\r\n  var index = 0;\r\n  if (addEndPositions) {\r\n    // add rounded end\r\n    leftPos = cartesian3;\r\n    rightPos = cartesian4;\r\n    var firstEndPositions = endPositions[0];\r\n    normal = Cartesian3.fromArray(computedNormals, 0, normal);\r\n    left = Cartesian3.fromArray(computedLefts, 0, left);\r\n    for (i = 0; i < halfLength; i++) {\r\n      leftPos = Cartesian3.fromArray(\r\n        firstEndPositions,\r\n        (halfLength - 1 - i) * 3,\r\n        leftPos\r\n      );\r\n      rightPos = Cartesian3.fromArray(\r\n        firstEndPositions,\r\n        (halfLength + i) * 3,\r\n        rightPos\r\n      );\r\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n      CorridorGeometryLibrary.addAttribute(\r\n        finalPositions,\r\n        leftPos,\r\n        undefined,\r\n        back\r\n      );\r\n      addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n      LL = front / 3;\r\n      LR = LL + 1;\r\n      UL = (back - 2) / 3;\r\n      UR = UL - 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = LL;\r\n      indices[index++] = UR;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n  }\r\n\r\n  var posIndex = 0;\r\n  var compIndex = 0;\r\n  var rightEdge = positions[posIndex++]; //add first two edges\r\n  var leftEdge = positions[posIndex++];\r\n  finalPositions.set(rightEdge, front);\r\n  finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n\r\n  left = Cartesian3.fromArray(computedLefts, compIndex, left);\r\n  var rightNormal;\r\n  var leftNormal;\r\n  length = leftEdge.length - 3;\r\n  for (i = 0; i < length; i += 3) {\r\n    rightNormal = ellipsoid.geodeticSurfaceNormal(\r\n      Cartesian3.fromArray(rightEdge, i, scratch1),\r\n      scratch1\r\n    );\r\n    leftNormal = ellipsoid.geodeticSurfaceNormal(\r\n      Cartesian3.fromArray(leftEdge, length - i, scratch2),\r\n      scratch2\r\n    );\r\n    normal = Cartesian3.normalize(\r\n      Cartesian3.add(rightNormal, leftNormal, normal),\r\n      normal\r\n    );\r\n    addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n    LL = front / 3;\r\n    LR = LL + 1;\r\n    UL = (back - 2) / 3;\r\n    UR = UL - 1;\r\n    indices[index++] = UL;\r\n    indices[index++] = LL;\r\n    indices[index++] = UR;\r\n    indices[index++] = UR;\r\n    indices[index++] = LL;\r\n    indices[index++] = LR;\r\n\r\n    front += 3;\r\n    back -= 3;\r\n  }\r\n\r\n  rightNormal = ellipsoid.geodeticSurfaceNormal(\r\n    Cartesian3.fromArray(rightEdge, length, scratch1),\r\n    scratch1\r\n  );\r\n  leftNormal = ellipsoid.geodeticSurfaceNormal(\r\n    Cartesian3.fromArray(leftEdge, length, scratch2),\r\n    scratch2\r\n  );\r\n  normal = Cartesian3.normalize(\r\n    Cartesian3.add(rightNormal, leftNormal, normal),\r\n    normal\r\n  );\r\n  compIndex += 3;\r\n  for (i = 0; i < corners.length; i++) {\r\n    var j;\r\n    corner = corners[i];\r\n    var l = corner.leftPositions;\r\n    var r = corner.rightPositions;\r\n    var pivot;\r\n    var start;\r\n    var outsidePoint = cartesian6;\r\n    var previousPoint = cartesian3;\r\n    var nextPoint = cartesian4;\r\n    normal = Cartesian3.fromArray(computedNormals, compIndex, normal);\r\n    if (defined(l)) {\r\n      addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n      back -= 3;\r\n      pivot = LR;\r\n      start = UR;\r\n      for (j = 0; j < l.length / 3; j++) {\r\n        outsidePoint = Cartesian3.fromArray(l, j * 3, outsidePoint);\r\n        indices[index++] = pivot;\r\n        indices[index++] = start - j - 1;\r\n        indices[index++] = start - j;\r\n        CorridorGeometryLibrary.addAttribute(\r\n          finalPositions,\r\n          outsidePoint,\r\n          undefined,\r\n          back\r\n        );\r\n        previousPoint = Cartesian3.fromArray(\r\n          finalPositions,\r\n          (start - j - 1) * 3,\r\n          previousPoint\r\n        );\r\n        nextPoint = Cartesian3.fromArray(finalPositions, pivot * 3, nextPoint);\r\n        left = Cartesian3.normalize(\r\n          Cartesian3.subtract(previousPoint, nextPoint, left),\r\n          left\r\n        );\r\n        addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n        back -= 3;\r\n      }\r\n      outsidePoint = Cartesian3.fromArray(\r\n        finalPositions,\r\n        pivot * 3,\r\n        outsidePoint\r\n      );\r\n      previousPoint = Cartesian3.subtract(\r\n        Cartesian3.fromArray(finalPositions, start * 3, previousPoint),\r\n        outsidePoint,\r\n        previousPoint\r\n      );\r\n      nextPoint = Cartesian3.subtract(\r\n        Cartesian3.fromArray(finalPositions, (start - j) * 3, nextPoint),\r\n        outsidePoint,\r\n        nextPoint\r\n      );\r\n      left = Cartesian3.normalize(\r\n        Cartesian3.add(previousPoint, nextPoint, left),\r\n        left\r\n      );\r\n      addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n      front += 3;\r\n    } else {\r\n      addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n      front += 3;\r\n      pivot = UR;\r\n      start = LR;\r\n      for (j = 0; j < r.length / 3; j++) {\r\n        outsidePoint = Cartesian3.fromArray(r, j * 3, outsidePoint);\r\n        indices[index++] = pivot;\r\n        indices[index++] = start + j;\r\n        indices[index++] = start + j + 1;\r\n        CorridorGeometryLibrary.addAttribute(\r\n          finalPositions,\r\n          outsidePoint,\r\n          front\r\n        );\r\n        previousPoint = Cartesian3.fromArray(\r\n          finalPositions,\r\n          pivot * 3,\r\n          previousPoint\r\n        );\r\n        nextPoint = Cartesian3.fromArray(\r\n          finalPositions,\r\n          (start + j) * 3,\r\n          nextPoint\r\n        );\r\n        left = Cartesian3.normalize(\r\n          Cartesian3.subtract(previousPoint, nextPoint, left),\r\n          left\r\n        );\r\n        addNormals(attr, normal, left, front, undefined, vertexFormat);\r\n        front += 3;\r\n      }\r\n      outsidePoint = Cartesian3.fromArray(\r\n        finalPositions,\r\n        pivot * 3,\r\n        outsidePoint\r\n      );\r\n      previousPoint = Cartesian3.subtract(\r\n        Cartesian3.fromArray(finalPositions, (start + j) * 3, previousPoint),\r\n        outsidePoint,\r\n        previousPoint\r\n      );\r\n      nextPoint = Cartesian3.subtract(\r\n        Cartesian3.fromArray(finalPositions, start * 3, nextPoint),\r\n        outsidePoint,\r\n        nextPoint\r\n      );\r\n      left = Cartesian3.normalize(\r\n        Cartesian3.negate(Cartesian3.add(nextPoint, previousPoint, left), left),\r\n        left\r\n      );\r\n      addNormals(attr, normal, left, undefined, back, vertexFormat);\r\n      back -= 3;\r\n    }\r\n    rightEdge = positions[posIndex++];\r\n    leftEdge = positions[posIndex++];\r\n    rightEdge.splice(0, 3); //remove duplicate points added by corner\r\n    leftEdge.splice(leftEdge.length - 3, 3);\r\n    finalPositions.set(rightEdge, front);\r\n    finalPositions.set(leftEdge, back - leftEdge.length + 1);\r\n    length = leftEdge.length - 3;\r\n\r\n    compIndex += 3;\r\n    left = Cartesian3.fromArray(computedLefts, compIndex, left);\r\n    for (j = 0; j < leftEdge.length; j += 3) {\r\n      rightNormal = ellipsoid.geodeticSurfaceNormal(\r\n        Cartesian3.fromArray(rightEdge, j, scratch1),\r\n        scratch1\r\n      );\r\n      leftNormal = ellipsoid.geodeticSurfaceNormal(\r\n        Cartesian3.fromArray(leftEdge, length - j, scratch2),\r\n        scratch2\r\n      );\r\n      normal = Cartesian3.normalize(\r\n        Cartesian3.add(rightNormal, leftNormal, normal),\r\n        normal\r\n      );\r\n      addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n      LR = front / 3;\r\n      LL = LR - 1;\r\n      UR = (back - 2) / 3;\r\n      UL = UR + 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = LL;\r\n      indices[index++] = UR;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n    front -= 3;\r\n    back += 3;\r\n  }\r\n  normal = Cartesian3.fromArray(\r\n    computedNormals,\r\n    computedNormals.length - 3,\r\n    normal\r\n  );\r\n  addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n  if (addEndPositions) {\r\n    // add rounded end\r\n    front += 3;\r\n    back -= 3;\r\n    leftPos = cartesian3;\r\n    rightPos = cartesian4;\r\n    var lastEndPositions = endPositions[1];\r\n    for (i = 0; i < halfLength; i++) {\r\n      leftPos = Cartesian3.fromArray(\r\n        lastEndPositions,\r\n        (endPositionLength - i - 1) * 3,\r\n        leftPos\r\n      );\r\n      rightPos = Cartesian3.fromArray(lastEndPositions, i * 3, rightPos);\r\n      CorridorGeometryLibrary.addAttribute(\r\n        finalPositions,\r\n        leftPos,\r\n        undefined,\r\n        back\r\n      );\r\n      CorridorGeometryLibrary.addAttribute(finalPositions, rightPos, front);\r\n      addNormals(attr, normal, left, front, back, vertexFormat);\r\n\r\n      LR = front / 3;\r\n      LL = LR - 1;\r\n      UR = (back - 2) / 3;\r\n      UL = UR + 1;\r\n      indices[index++] = UL;\r\n      indices[index++] = LL;\r\n      indices[index++] = UR;\r\n      indices[index++] = UR;\r\n      indices[index++] = LL;\r\n      indices[index++] = LR;\r\n\r\n      front += 3;\r\n      back -= 3;\r\n    }\r\n  }\r\n\r\n  attributes.position = new GeometryAttribute({\r\n    componentDatatype: ComponentDatatype.DOUBLE,\r\n    componentsPerAttribute: 3,\r\n    values: finalPositions,\r\n  });\r\n\r\n  if (vertexFormat.st) {\r\n    var st = new Float32Array((size / 3) * 2);\r\n    var rightSt;\r\n    var leftSt;\r\n    var stIndex = 0;\r\n    if (addEndPositions) {\r\n      leftCount /= 3;\r\n      rightCount /= 3;\r\n      var theta = Math.PI / (endPositionLength + 1);\r\n      leftSt = 1 / (leftCount - endPositionLength + 1);\r\n      rightSt = 1 / (rightCount - endPositionLength + 1);\r\n      var a;\r\n      var halfEndPos = endPositionLength / 2;\r\n      for (i = halfEndPos + 1; i < endPositionLength + 1; i++) {\r\n        // lower left rounded end\r\n        a = CesiumMath.PI_OVER_TWO + theta * i;\r\n        st[stIndex++] = rightSt * (1 + Math.cos(a));\r\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n      }\r\n      for (i = 1; i < rightCount - endPositionLength + 1; i++) {\r\n        // bottom edge\r\n        st[stIndex++] = i * rightSt;\r\n        st[stIndex++] = 0;\r\n      }\r\n      for (i = endPositionLength; i > halfEndPos; i--) {\r\n        // lower right rounded end\r\n        a = CesiumMath.PI_OVER_TWO - i * theta;\r\n        st[stIndex++] = 1 - rightSt * (1 + Math.cos(a));\r\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n      }\r\n      for (i = halfEndPos; i > 0; i--) {\r\n        // upper right rounded end\r\n        a = CesiumMath.PI_OVER_TWO - theta * i;\r\n        st[stIndex++] = 1 - leftSt * (1 + Math.cos(a));\r\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n      }\r\n      for (i = leftCount - endPositionLength; i > 0; i--) {\r\n        // top edge\r\n        st[stIndex++] = i * leftSt;\r\n        st[stIndex++] = 1;\r\n      }\r\n      for (i = 1; i < halfEndPos + 1; i++) {\r\n        // upper left rounded end\r\n        a = CesiumMath.PI_OVER_TWO + theta * i;\r\n        st[stIndex++] = leftSt * (1 + Math.cos(a));\r\n        st[stIndex++] = 0.5 * (1 + Math.sin(a));\r\n      }\r\n    } else {\r\n      leftCount /= 3;\r\n      rightCount /= 3;\r\n      leftSt = 1 / (leftCount - 1);\r\n      rightSt = 1 / (rightCount - 1);\r\n      for (i = 0; i < rightCount; i++) {\r\n        // bottom edge\r\n        st[stIndex++] = i * rightSt;\r\n        st[stIndex++] = 0;\r\n      }\r\n      for (i = leftCount; i > 0; i--) {\r\n        // top edge\r\n        st[stIndex++] = (i - 1) * leftSt;\r\n        st[stIndex++] = 1;\r\n      }\r\n    }\r\n\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: st,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.normal) {\r\n    attributes.normal = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: attr.normals,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.tangent) {\r\n    attributes.tangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: attr.tangents,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.bitangent) {\r\n    attributes.bitangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: attr.bitangents,\r\n    });\r\n  }\r\n\r\n  return {\r\n    attributes: attributes,\r\n    indices: indices,\r\n  };\r\n}\r\n\r\nfunction extrudedAttributes(attributes, vertexFormat) {\r\n  if (\r\n    !vertexFormat.normal &&\r\n    !vertexFormat.tangent &&\r\n    !vertexFormat.bitangent &&\r\n    !vertexFormat.st\r\n  ) {\r\n    return attributes;\r\n  }\r\n  var positions = attributes.position.values;\r\n  var topNormals;\r\n  var topBitangents;\r\n  if (vertexFormat.normal || vertexFormat.bitangent) {\r\n    topNormals = attributes.normal.values;\r\n    topBitangents = attributes.bitangent.values;\r\n  }\r\n  var size = attributes.position.values.length / 18;\r\n  var threeSize = size * 3;\r\n  var twoSize = size * 2;\r\n  var sixSize = threeSize * 2;\r\n  var i;\r\n  if (vertexFormat.normal || vertexFormat.bitangent || vertexFormat.tangent) {\r\n    var normals = vertexFormat.normal\r\n      ? new Float32Array(threeSize * 6)\r\n      : undefined;\r\n    var tangents = vertexFormat.tangent\r\n      ? new Float32Array(threeSize * 6)\r\n      : undefined;\r\n    var bitangents = vertexFormat.bitangent\r\n      ? new Float32Array(threeSize * 6)\r\n      : undefined;\r\n    var topPosition = cartesian1;\r\n    var bottomPosition = cartesian2;\r\n    var previousPosition = cartesian3;\r\n    var normal = cartesian4;\r\n    var tangent = cartesian5;\r\n    var bitangent = cartesian6;\r\n    var attrIndex = sixSize;\r\n    for (i = 0; i < threeSize; i += 3) {\r\n      var attrIndexOffset = attrIndex + sixSize;\r\n      topPosition = Cartesian3.fromArray(positions, i, topPosition);\r\n      bottomPosition = Cartesian3.fromArray(\r\n        positions,\r\n        i + threeSize,\r\n        bottomPosition\r\n      );\r\n      previousPosition = Cartesian3.fromArray(\r\n        positions,\r\n        (i + 3) % threeSize,\r\n        previousPosition\r\n      );\r\n      bottomPosition = Cartesian3.subtract(\r\n        bottomPosition,\r\n        topPosition,\r\n        bottomPosition\r\n      );\r\n      previousPosition = Cartesian3.subtract(\r\n        previousPosition,\r\n        topPosition,\r\n        previousPosition\r\n      );\r\n      normal = Cartesian3.normalize(\r\n        Cartesian3.cross(bottomPosition, previousPosition, normal),\r\n        normal\r\n      );\r\n      if (vertexFormat.normal) {\r\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndexOffset);\r\n        CorridorGeometryLibrary.addAttribute(\r\n          normals,\r\n          normal,\r\n          attrIndexOffset + 3\r\n        );\r\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex);\r\n        CorridorGeometryLibrary.addAttribute(normals, normal, attrIndex + 3);\r\n      }\r\n      if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n        bitangent = Cartesian3.fromArray(topNormals, i, bitangent);\r\n        if (vertexFormat.bitangent) {\r\n          CorridorGeometryLibrary.addAttribute(\r\n            bitangents,\r\n            bitangent,\r\n            attrIndexOffset\r\n          );\r\n          CorridorGeometryLibrary.addAttribute(\r\n            bitangents,\r\n            bitangent,\r\n            attrIndexOffset + 3\r\n          );\r\n          CorridorGeometryLibrary.addAttribute(\r\n            bitangents,\r\n            bitangent,\r\n            attrIndex\r\n          );\r\n          CorridorGeometryLibrary.addAttribute(\r\n            bitangents,\r\n            bitangent,\r\n            attrIndex + 3\r\n          );\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n          tangent = Cartesian3.normalize(\r\n            Cartesian3.cross(bitangent, normal, tangent),\r\n            tangent\r\n          );\r\n          CorridorGeometryLibrary.addAttribute(\r\n            tangents,\r\n            tangent,\r\n            attrIndexOffset\r\n          );\r\n          CorridorGeometryLibrary.addAttribute(\r\n            tangents,\r\n            tangent,\r\n            attrIndexOffset + 3\r\n          );\r\n          CorridorGeometryLibrary.addAttribute(tangents, tangent, attrIndex);\r\n          CorridorGeometryLibrary.addAttribute(\r\n            tangents,\r\n            tangent,\r\n            attrIndex + 3\r\n          );\r\n        }\r\n      }\r\n      attrIndex += 6;\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n      normals.set(topNormals); //top\r\n      for (i = 0; i < threeSize; i += 3) {\r\n        //bottom normals\r\n        normals[i + threeSize] = -topNormals[i];\r\n        normals[i + threeSize + 1] = -topNormals[i + 1];\r\n        normals[i + threeSize + 2] = -topNormals[i + 2];\r\n      }\r\n      attributes.normal.values = normals;\r\n    } else {\r\n      attributes.normal = undefined;\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n      bitangents.set(topBitangents); //top\r\n      bitangents.set(topBitangents, threeSize); //bottom\r\n      attributes.bitangent.values = bitangents;\r\n    } else {\r\n      attributes.bitangent = undefined;\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n      var topTangents = attributes.tangent.values;\r\n      tangents.set(topTangents); //top\r\n      tangents.set(topTangents, threeSize); //bottom\r\n      attributes.tangent.values = tangents;\r\n    }\r\n  }\r\n  if (vertexFormat.st) {\r\n    var topSt = attributes.st.values;\r\n    var st = new Float32Array(twoSize * 6);\r\n    st.set(topSt); //top\r\n    st.set(topSt, twoSize); //bottom\r\n    var index = twoSize * 2;\r\n\r\n    for (var j = 0; j < 2; j++) {\r\n      st[index++] = topSt[0];\r\n      st[index++] = topSt[1];\r\n      for (i = 2; i < twoSize; i += 2) {\r\n        var s = topSt[i];\r\n        var t = topSt[i + 1];\r\n        st[index++] = s;\r\n        st[index++] = t;\r\n        st[index++] = s;\r\n        st[index++] = t;\r\n      }\r\n      st[index++] = topSt[0];\r\n      st[index++] = topSt[1];\r\n    }\r\n    attributes.st.values = st;\r\n  }\r\n\r\n  return attributes;\r\n}\r\n\r\nfunction addWallPositions(positions, index, wallPositions) {\r\n  wallPositions[index++] = positions[0];\r\n  wallPositions[index++] = positions[1];\r\n  wallPositions[index++] = positions[2];\r\n  for (var i = 3; i < positions.length; i += 3) {\r\n    var x = positions[i];\r\n    var y = positions[i + 1];\r\n    var z = positions[i + 2];\r\n    wallPositions[index++] = x;\r\n    wallPositions[index++] = y;\r\n    wallPositions[index++] = z;\r\n    wallPositions[index++] = x;\r\n    wallPositions[index++] = y;\r\n    wallPositions[index++] = z;\r\n  }\r\n  wallPositions[index++] = positions[0];\r\n  wallPositions[index++] = positions[1];\r\n  wallPositions[index++] = positions[2];\r\n\r\n  return wallPositions;\r\n}\r\n\r\nfunction computePositionsExtruded(params, vertexFormat) {\r\n  var topVertexFormat = new VertexFormat({\r\n    position: vertexFormat.position,\r\n    normal:\r\n      vertexFormat.normal || vertexFormat.bitangent || params.shadowVolume,\r\n    tangent: vertexFormat.tangent,\r\n    bitangent: vertexFormat.normal || vertexFormat.bitangent,\r\n    st: vertexFormat.st,\r\n  });\r\n  var ellipsoid = params.ellipsoid;\r\n  var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n  var attr = combine(computedPositions, topVertexFormat, ellipsoid);\r\n  var height = params.height;\r\n  var extrudedHeight = params.extrudedHeight;\r\n  var attributes = attr.attributes;\r\n  var indices = attr.indices;\r\n  var positions = attributes.position.values;\r\n  var length = positions.length;\r\n  var newPositions = new Float64Array(length * 6);\r\n  var extrudedPositions = new Float64Array(length);\r\n  extrudedPositions.set(positions);\r\n  var wallPositions = new Float64Array(length * 4);\r\n\r\n  positions = PolygonPipeline.scaleToGeodeticHeight(\r\n    positions,\r\n    height,\r\n    ellipsoid\r\n  );\r\n  wallPositions = addWallPositions(positions, 0, wallPositions);\r\n  extrudedPositions = PolygonPipeline.scaleToGeodeticHeight(\r\n    extrudedPositions,\r\n    extrudedHeight,\r\n    ellipsoid\r\n  );\r\n  wallPositions = addWallPositions(\r\n    extrudedPositions,\r\n    length * 2,\r\n    wallPositions\r\n  );\r\n  newPositions.set(positions);\r\n  newPositions.set(extrudedPositions, length);\r\n  newPositions.set(wallPositions, length * 2);\r\n  attributes.position.values = newPositions;\r\n\r\n  attributes = extrudedAttributes(attributes, vertexFormat);\r\n  var i;\r\n  var size = length / 3;\r\n  if (params.shadowVolume) {\r\n    var topNormals = attributes.normal.values;\r\n    length = topNormals.length;\r\n\r\n    var extrudeNormals = new Float32Array(length * 6);\r\n    for (i = 0; i < length; i++) {\r\n      topNormals[i] = -topNormals[i];\r\n    }\r\n    //only get normals for bottom layer that's going to be pushed down\r\n    extrudeNormals.set(topNormals, length); //bottom face\r\n    extrudeNormals = addWallPositions(topNormals, length * 4, extrudeNormals); //bottom wall\r\n    attributes.extrudeDirection = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: extrudeNormals,\r\n    });\r\n    if (!vertexFormat.normal) {\r\n      attributes.normal = undefined;\r\n    }\r\n  }\r\n  if (defined(params.offsetAttribute)) {\r\n    var applyOffset = new Uint8Array(size * 6);\r\n    if (params.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n      applyOffset = arrayFill(applyOffset, 1, 0, size); // top face\r\n      applyOffset = arrayFill(applyOffset, 1, size * 2, size * 4); // top wall\r\n    } else {\r\n      var applyOffsetValue =\r\n        params.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n      applyOffset = arrayFill(applyOffset, applyOffsetValue);\r\n    }\r\n    attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: applyOffset,\r\n    });\r\n  }\r\n\r\n  var iLength = indices.length;\r\n  var twoSize = size + size;\r\n  var newIndices = IndexDatatype.createTypedArray(\r\n    newPositions.length / 3,\r\n    iLength * 2 + twoSize * 3\r\n  );\r\n  newIndices.set(indices);\r\n  var index = iLength;\r\n  for (i = 0; i < iLength; i += 3) {\r\n    // bottom indices\r\n    var v0 = indices[i];\r\n    var v1 = indices[i + 1];\r\n    var v2 = indices[i + 2];\r\n    newIndices[index++] = v2 + size;\r\n    newIndices[index++] = v1 + size;\r\n    newIndices[index++] = v0 + size;\r\n  }\r\n\r\n  var UL, LL, UR, LR;\r\n\r\n  for (i = 0; i < twoSize; i += 2) {\r\n    //wall indices\r\n    UL = i + twoSize;\r\n    LL = UL + twoSize;\r\n    UR = UL + 1;\r\n    LR = LL + 1;\r\n    newIndices[index++] = UL;\r\n    newIndices[index++] = LL;\r\n    newIndices[index++] = UR;\r\n    newIndices[index++] = UR;\r\n    newIndices[index++] = LL;\r\n    newIndices[index++] = LR;\r\n  }\r\n\r\n  return {\r\n    attributes: attributes,\r\n    indices: newIndices,\r\n  };\r\n}\r\n\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartographic = new Cartographic();\r\n\r\nfunction computeOffsetPoints(\r\n  position1,\r\n  position2,\r\n  ellipsoid,\r\n  halfWidth,\r\n  min,\r\n  max\r\n) {\r\n  // Compute direction of offset the point\r\n  var direction = Cartesian3.subtract(position2, position1, scratchCartesian1);\r\n  Cartesian3.normalize(direction, direction);\r\n  var normal = ellipsoid.geodeticSurfaceNormal(position1, scratchCartesian2);\r\n  var offsetDirection = Cartesian3.cross(direction, normal, scratchCartesian1);\r\n  Cartesian3.multiplyByScalar(offsetDirection, halfWidth, offsetDirection);\r\n\r\n  var minLat = min.latitude;\r\n  var minLon = min.longitude;\r\n  var maxLat = max.latitude;\r\n  var maxLon = max.longitude;\r\n\r\n  // Compute 2 offset points\r\n  Cartesian3.add(position1, offsetDirection, scratchCartesian2);\r\n  ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\r\n\r\n  var lat = scratchCartographic.latitude;\r\n  var lon = scratchCartographic.longitude;\r\n  minLat = Math.min(minLat, lat);\r\n  minLon = Math.min(minLon, lon);\r\n  maxLat = Math.max(maxLat, lat);\r\n  maxLon = Math.max(maxLon, lon);\r\n\r\n  Cartesian3.subtract(position1, offsetDirection, scratchCartesian2);\r\n  ellipsoid.cartesianToCartographic(scratchCartesian2, scratchCartographic);\r\n\r\n  lat = scratchCartographic.latitude;\r\n  lon = scratchCartographic.longitude;\r\n  minLat = Math.min(minLat, lat);\r\n  minLon = Math.min(minLon, lon);\r\n  maxLat = Math.max(maxLat, lat);\r\n  maxLon = Math.max(maxLon, lon);\r\n\r\n  min.latitude = minLat;\r\n  min.longitude = minLon;\r\n  max.latitude = maxLat;\r\n  max.longitude = maxLon;\r\n}\r\n\r\nvar scratchCartesianOffset = new Cartesian3();\r\nvar scratchCartesianEnds = new Cartesian3();\r\nvar scratchCartographicMin = new Cartographic();\r\nvar scratchCartographicMax = new Cartographic();\r\n\r\nfunction computeRectangle(positions, ellipsoid, width, cornerType, result) {\r\n  positions = scaleToSurface(positions, ellipsoid);\r\n  var cleanPositions = arrayRemoveDuplicates(\r\n    positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n  var length = cleanPositions.length;\r\n  if (length < 2 || width <= 0) {\r\n    return new Rectangle();\r\n  }\r\n  var halfWidth = width * 0.5;\r\n\r\n  scratchCartographicMin.latitude = Number.POSITIVE_INFINITY;\r\n  scratchCartographicMin.longitude = Number.POSITIVE_INFINITY;\r\n  scratchCartographicMax.latitude = Number.NEGATIVE_INFINITY;\r\n  scratchCartographicMax.longitude = Number.NEGATIVE_INFINITY;\r\n\r\n  var lat, lon;\r\n  if (cornerType === CornerType.ROUNDED) {\r\n    // Compute start cap\r\n    var first = cleanPositions[0];\r\n    Cartesian3.subtract(first, cleanPositions[1], scratchCartesianOffset);\r\n    Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\r\n    Cartesian3.multiplyByScalar(\r\n      scratchCartesianOffset,\r\n      halfWidth,\r\n      scratchCartesianOffset\r\n    );\r\n    Cartesian3.add(first, scratchCartesianOffset, scratchCartesianEnds);\r\n\r\n    ellipsoid.cartesianToCartographic(\r\n      scratchCartesianEnds,\r\n      scratchCartographic\r\n    );\r\n    lat = scratchCartographic.latitude;\r\n    lon = scratchCartographic.longitude;\r\n    scratchCartographicMin.latitude = Math.min(\r\n      scratchCartographicMin.latitude,\r\n      lat\r\n    );\r\n    scratchCartographicMin.longitude = Math.min(\r\n      scratchCartographicMin.longitude,\r\n      lon\r\n    );\r\n    scratchCartographicMax.latitude = Math.max(\r\n      scratchCartographicMax.latitude,\r\n      lat\r\n    );\r\n    scratchCartographicMax.longitude = Math.max(\r\n      scratchCartographicMax.longitude,\r\n      lon\r\n    );\r\n  }\r\n\r\n  // Compute the rest\r\n  for (var i = 0; i < length - 1; ++i) {\r\n    computeOffsetPoints(\r\n      cleanPositions[i],\r\n      cleanPositions[i + 1],\r\n      ellipsoid,\r\n      halfWidth,\r\n      scratchCartographicMin,\r\n      scratchCartographicMax\r\n    );\r\n  }\r\n\r\n  // Compute ending point\r\n  var last = cleanPositions[length - 1];\r\n  Cartesian3.subtract(last, cleanPositions[length - 2], scratchCartesianOffset);\r\n  Cartesian3.normalize(scratchCartesianOffset, scratchCartesianOffset);\r\n  Cartesian3.multiplyByScalar(\r\n    scratchCartesianOffset,\r\n    halfWidth,\r\n    scratchCartesianOffset\r\n  );\r\n  Cartesian3.add(last, scratchCartesianOffset, scratchCartesianEnds);\r\n  computeOffsetPoints(\r\n    last,\r\n    scratchCartesianEnds,\r\n    ellipsoid,\r\n    halfWidth,\r\n    scratchCartographicMin,\r\n    scratchCartographicMax\r\n  );\r\n\r\n  if (cornerType === CornerType.ROUNDED) {\r\n    // Compute end cap\r\n    ellipsoid.cartesianToCartographic(\r\n      scratchCartesianEnds,\r\n      scratchCartographic\r\n    );\r\n    lat = scratchCartographic.latitude;\r\n    lon = scratchCartographic.longitude;\r\n    scratchCartographicMin.latitude = Math.min(\r\n      scratchCartographicMin.latitude,\r\n      lat\r\n    );\r\n    scratchCartographicMin.longitude = Math.min(\r\n      scratchCartographicMin.longitude,\r\n      lon\r\n    );\r\n    scratchCartographicMax.latitude = Math.max(\r\n      scratchCartographicMax.latitude,\r\n      lat\r\n    );\r\n    scratchCartographicMax.longitude = Math.max(\r\n      scratchCartographicMax.longitude,\r\n      lon\r\n    );\r\n  }\r\n\r\n  var rectangle = defined(result) ? result : new Rectangle();\r\n  rectangle.north = scratchCartographicMax.latitude;\r\n  rectangle.south = scratchCartographicMin.latitude;\r\n  rectangle.east = scratchCartographicMax.longitude;\r\n  rectangle.west = scratchCartographicMin.longitude;\r\n\r\n  return rectangle;\r\n}\r\n\r\n/**\r\n * A description of a corridor. Corridor geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias CorridorGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\r\n * @param {Number} options.width The distance between the edges of the corridor in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Number} [options.height=0] The distance in meters between the ellipsoid surface and the positions.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the ellipsoid surface and the extruded face.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n *\r\n * @see CorridorGeometry.createGeometry\r\n * @see Packable\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Corridor.html|Cesium Sandcastle Corridor Demo}\r\n *\r\n * @example\r\n * var corridor = new Cesium.CorridorGeometry({\r\n *   vertexFormat : Cesium.VertexFormat.POSITION_ONLY,\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([-72.0, 40.0, -70.0, 35.0]),\r\n *   width : 100000\r\n * });\r\n */\r\nfunction CorridorGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var positions = options.positions;\r\n  var width = options.width;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"options.positions\", positions);\r\n  Check.defined(\"options.width\", width);\r\n  //>>includeEnd('debug');\r\n\r\n  var height = defaultValue(options.height, 0.0);\r\n  var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n  this._positions = positions;\r\n  this._ellipsoid = Ellipsoid.clone(\r\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\r\n  );\r\n  this._vertexFormat = VertexFormat.clone(\r\n    defaultValue(options.vertexFormat, VertexFormat.DEFAULT)\r\n  );\r\n  this._width = width;\r\n  this._height = Math.max(height, extrudedHeight);\r\n  this._extrudedHeight = Math.min(height, extrudedHeight);\r\n  this._cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n  this._granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n  this._workerName = \"createCorridorGeometry\";\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._rectangle = undefined;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    1 +\r\n    positions.length * Cartesian3.packedLength +\r\n    Ellipsoid.packedLength +\r\n    VertexFormat.packedLength +\r\n    7;\r\n}\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CorridorGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCorridorGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var positions = value._positions;\r\n  var length = positions.length;\r\n  array[startingIndex++] = length;\r\n\r\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    Cartesian3.pack(positions[i], array, startingIndex);\r\n  }\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._width;\r\n  array[startingIndex++] = value._height;\r\n  array[startingIndex++] = value._extrudedHeight;\r\n  array[startingIndex++] = value._cornerType;\r\n  array[startingIndex++] = value._granularity;\r\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n  return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n  positions: undefined,\r\n  ellipsoid: scratchEllipsoid,\r\n  vertexFormat: scratchVertexFormat,\r\n  width: undefined,\r\n  height: undefined,\r\n  extrudedHeight: undefined,\r\n  cornerType: undefined,\r\n  granularity: undefined,\r\n  shadowVolume: undefined,\r\n  offsetAttribute: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CorridorGeometry} [result] The object into which to store the result.\r\n * @returns {CorridorGeometry} The modified result parameter or a new CorridorGeometry instance if one was not provided.\r\n */\r\nCorridorGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var length = array[startingIndex++];\r\n  var positions = new Array(length);\r\n\r\n  for (var i = 0; i < length; ++i, startingIndex += Cartesian3.packedLength) {\r\n    positions[i] = Cartesian3.unpack(array, startingIndex);\r\n  }\r\n\r\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  var vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  var width = array[startingIndex++];\r\n  var height = array[startingIndex++];\r\n  var extrudedHeight = array[startingIndex++];\r\n  var cornerType = array[startingIndex++];\r\n  var granularity = array[startingIndex++];\r\n  var shadowVolume = array[startingIndex++] === 1.0;\r\n  var offsetAttribute = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.positions = positions;\r\n    scratchOptions.width = width;\r\n    scratchOptions.height = height;\r\n    scratchOptions.extrudedHeight = extrudedHeight;\r\n    scratchOptions.cornerType = cornerType;\r\n    scratchOptions.granularity = granularity;\r\n    scratchOptions.shadowVolume = shadowVolume;\r\n    scratchOptions.offsetAttribute =\r\n      offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n    return new CorridorGeometry(scratchOptions);\r\n  }\r\n\r\n  result._positions = positions;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._width = width;\r\n  result._height = height;\r\n  result._extrudedHeight = extrudedHeight;\r\n  result._cornerType = cornerType;\r\n  result._granularity = granularity;\r\n  result._shadowVolume = shadowVolume;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the bounding rectangle given the provided options\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that define the center of the corridor.\r\n * @param {Number} options.width The distance between the edges of the corridor in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {CornerType} [options.cornerType=CornerType.ROUNDED] Determines the style of the corners.\r\n * @param {Rectangle} [result] An object in which to store the result.\r\n *\r\n * @returns {Rectangle} The result rectangle.\r\n */\r\nCorridorGeometry.computeRectangle = function (options, result) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var positions = options.positions;\r\n  var width = options.width;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"options.positions\", positions);\r\n  Check.defined(\"options.width\", width);\r\n  //>>includeEnd('debug');\r\n\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n  var cornerType = defaultValue(options.cornerType, CornerType.ROUNDED);\r\n\r\n  return computeRectangle(positions, ellipsoid, width, cornerType, result);\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a corridor, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CorridorGeometry} corridorGeometry A description of the corridor.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCorridorGeometry.createGeometry = function (corridorGeometry) {\r\n  var positions = corridorGeometry._positions;\r\n  var width = corridorGeometry._width;\r\n  var ellipsoid = corridorGeometry._ellipsoid;\r\n\r\n  positions = scaleToSurface(positions, ellipsoid);\r\n  var cleanPositions = arrayRemoveDuplicates(\r\n    positions,\r\n    Cartesian3.equalsEpsilon\r\n  );\r\n\r\n  if (cleanPositions.length < 2 || width <= 0) {\r\n    return;\r\n  }\r\n\r\n  var height = corridorGeometry._height;\r\n  var extrudedHeight = corridorGeometry._extrudedHeight;\r\n  var extrude = !CesiumMath.equalsEpsilon(\r\n    height,\r\n    extrudedHeight,\r\n    0,\r\n    CesiumMath.EPSILON2\r\n  );\r\n\r\n  var vertexFormat = corridorGeometry._vertexFormat;\r\n  var params = {\r\n    ellipsoid: ellipsoid,\r\n    positions: cleanPositions,\r\n    width: width,\r\n    cornerType: corridorGeometry._cornerType,\r\n    granularity: corridorGeometry._granularity,\r\n    saveAttributes: true,\r\n  };\r\n  var attr;\r\n  if (extrude) {\r\n    params.height = height;\r\n    params.extrudedHeight = extrudedHeight;\r\n    params.shadowVolume = corridorGeometry._shadowVolume;\r\n    params.offsetAttribute = corridorGeometry._offsetAttribute;\r\n    attr = computePositionsExtruded(params, vertexFormat);\r\n  } else {\r\n    var computedPositions = CorridorGeometryLibrary.computePositions(params);\r\n    attr = combine(computedPositions, vertexFormat, ellipsoid);\r\n    attr.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\r\n      attr.attributes.position.values,\r\n      height,\r\n      ellipsoid\r\n    );\r\n\r\n    if (defined(corridorGeometry._offsetAttribute)) {\r\n      var applyOffsetValue =\r\n        corridorGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\r\n          ? 0\r\n          : 1;\r\n      var length = attr.attributes.position.values.length;\r\n      var applyOffset = new Uint8Array(length / 3);\r\n      arrayFill(applyOffset, applyOffsetValue);\r\n      attr.attributes.applyOffset = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n        componentsPerAttribute: 1,\r\n        values: applyOffset,\r\n      });\r\n    }\r\n  }\r\n  var attributes = attr.attributes;\r\n  var boundingSphere = BoundingSphere.fromVertices(\r\n    attributes.position.values,\r\n    undefined,\r\n    3\r\n  );\r\n  if (!vertexFormat.position) {\r\n    attr.attributes.position.values = undefined;\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: attr.indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: boundingSphere,\r\n    offsetAttribute: corridorGeometry._offsetAttribute,\r\n  });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nCorridorGeometry.createShadowVolume = function (\r\n  corridorGeometry,\r\n  minHeightFunc,\r\n  maxHeightFunc\r\n) {\r\n  var granularity = corridorGeometry._granularity;\r\n  var ellipsoid = corridorGeometry._ellipsoid;\r\n\r\n  var minHeight = minHeightFunc(granularity, ellipsoid);\r\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n  return new CorridorGeometry({\r\n    positions: corridorGeometry._positions,\r\n    width: corridorGeometry._width,\r\n    cornerType: corridorGeometry._cornerType,\r\n    ellipsoid: ellipsoid,\r\n    granularity: granularity,\r\n    extrudedHeight: minHeight,\r\n    height: maxHeight,\r\n    vertexFormat: VertexFormat.POSITION_ONLY,\r\n    shadowVolume: true,\r\n  });\r\n};\r\n\r\nObject.defineProperties(CorridorGeometry.prototype, {\r\n  /**\r\n   * @private\r\n   */\r\n  rectangle: {\r\n    get: function () {\r\n      if (!defined(this._rectangle)) {\r\n        this._rectangle = computeRectangle(\r\n          this._positions,\r\n          this._ellipsoid,\r\n          this._width,\r\n          this._cornerType\r\n        );\r\n      }\r\n      return this._rectangle;\r\n    },\r\n  },\r\n  /**\r\n   * For remapping texture coordinates when rendering CorridorGeometries as GroundPrimitives.\r\n   *\r\n   * Corridors don't support stRotation,\r\n   * so just return the corners of the original system.\r\n   * @private\r\n   */\r\n  textureCoordinateRotationPoints: {\r\n    get: function () {\r\n      return [0, 0, 0, 1, 1, 0];\r\n    },\r\n  },\r\n});\r\nexport default CorridorGeometry;\r\n","import CorridorGeometry from \"../Core/CorridorGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\n\r\nfunction createCorridorGeometry(corridorGeometry, offset) {\r\n  if (defined(offset)) {\r\n    corridorGeometry = CorridorGeometry.unpack(corridorGeometry, offset);\r\n  }\r\n  corridorGeometry._ellipsoid = Ellipsoid.clone(corridorGeometry._ellipsoid);\r\n  return CorridorGeometry.createGeometry(corridorGeometry);\r\n}\r\nexport default createCorridorGeometry;\r\n"],"names":["Cartesian3","CorridorGeometryLibrary","GeometryAttributes","defined","IndexDatatype","GeometryAttribute","ComponentDatatype","CesiumMath","VertexFormat","PolygonPipeline","GeometryOffsetAttribute","arrayFill","Cartographic","arrayRemoveDuplicates","Rectangle","CornerType","defaultValue","Check","Ellipsoid","BoundingSphere","Geometry","PrimitiveType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;EAuBA,IAAI,UAAU,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAClC,IAAI,UAAU,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAClC,IAAI,UAAU,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAClC,IAAI,UAAU,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAClC,IAAI,UAAU,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAClC,IAAI,UAAU,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAClC;EACA,IAAI,QAAQ,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAChC,IAAI,QAAQ,GAAG,IAAIA,qBAAU,EAAE,CAAC;AAChC;EACA,SAAS,cAAc,CAAC,SAAS,EAAE,SAAS,EAAE;EAC9C,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC7C,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;EAChF,GAAG;EACH,EAAE,OAAO,SAAS,CAAC;EACnB,CAAC;AACD;EACA,SAAS,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE;EACnE,EAAE,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;EAC7B,EAAE,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;EAC/B,EAAE,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;EACnC,EAAE,IAAI,OAAO,GAAGA,qBAAU,CAAC,SAAS;EACpC,IAAIA,qBAAU,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC;EAC5C,IAAI,QAAQ;EACZ,GAAG,CAAC;EACJ,EAAE,IAAI,YAAY,CAAC,MAAM,EAAE;EAC3B,IAAIC,+CAAuB,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;EACvE,GAAG;EACH,EAAE,IAAI,YAAY,CAAC,OAAO,EAAE;EAC5B,IAAIA,+CAAuB,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;EACzE,GAAG;EACH,EAAE,IAAI,YAAY,CAAC,SAAS,EAAE;EAC9B,IAAIA,+CAAuB,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;EACxE,GAAG;EACH,CAAC;AACD;EACA,SAAS,OAAO,CAAC,iBAAiB,EAAE,YAAY,EAAE,SAAS,EAAE;EAC7D,EAAE,IAAI,SAAS,GAAG,iBAAiB,CAAC,SAAS,CAAC;EAC9C,EAAE,IAAI,OAAO,GAAG,iBAAiB,CAAC,OAAO,CAAC;EAC1C,EAAE,IAAI,YAAY,GAAG,iBAAiB,CAAC,YAAY,CAAC;EACpD,EAAE,IAAI,aAAa,GAAG,iBAAiB,CAAC,KAAK,CAAC;EAC9C,EAAE,IAAI,eAAe,GAAG,iBAAiB,CAAC,OAAO,CAAC;EAClD,EAAE,IAAI,UAAU,GAAG,IAAIC,qCAAkB,EAAE,CAAC;EAC5C,EAAE,IAAI,MAAM,CAAC;EACb,EAAE,IAAI,SAAS,GAAG,CAAC,CAAC;EACpB,EAAE,IAAI,UAAU,GAAG,CAAC,CAAC;EACrB,EAAE,IAAI,CAAC,CAAC;EACR,EAAE,IAAI,aAAa,GAAG,CAAC,CAAC;EACxB,EAAE,IAAI,MAAM,CAAC;EACb,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;EAC5C,IAAI,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;EACrC,IAAI,SAAS,IAAI,MAAM,CAAC;EACxB,IAAI,aAAa,IAAI,MAAM,GAAG,CAAC,CAAC;EAChC,IAAI,UAAU,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;EAC9C,GAAG;EACH,EAAE,SAAS,IAAI,CAAC,CAAC;EACjB,EAAE,UAAU,IAAI,CAAC,CAAC;EAClB,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACvC,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACxB,IAAI,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;EAC5C,IAAI,IAAIC,YAAO,CAAC,QAAQ,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;EAC/B,MAAM,SAAS,IAAI,MAAM,CAAC;EAC1B,MAAM,aAAa,IAAI,MAAM,CAAC;EAC9B,KAAK,MAAM;EACX,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC;EAChD,MAAM,UAAU,IAAI,MAAM,CAAC;EAC3B,MAAM,aAAa,IAAI,MAAM,CAAC;EAC9B,KAAK;EACL,GAAG;AACH;EACA,EAAE,IAAI,eAAe,GAAGA,YAAO,CAAC,YAAY,CAAC,CAAC;EAC9C,EAAE,IAAI,iBAAiB,CAAC;EACxB,EAAE,IAAI,eAAe,EAAE;EACvB,IAAI,iBAAiB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;EACnD,IAAI,SAAS,IAAI,iBAAiB,CAAC;EACnC,IAAI,UAAU,IAAI,iBAAiB,CAAC;EACpC,IAAI,iBAAiB,IAAI,CAAC,CAAC;EAC3B,IAAI,aAAa,IAAI,iBAAiB,GAAG,CAAC,CAAC;EAC3C,GAAG;EACH,EAAE,IAAI,IAAI,GAAG,SAAS,GAAG,UAAU,CAAC;EACpC,EAAE,IAAI,cAAc,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC;EAC9C,EAAE,IAAI,OAAO,GAAG,YAAY,CAAC,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;EACzE,EAAE,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;EAC3E,EAAE,IAAI,UAAU,GAAG,YAAY,CAAC,SAAS,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;EAC/E,EAAE,IAAI,IAAI,GAAG;EACb,IAAI,OAAO,EAAE,OAAO;EACpB,IAAI,QAAQ,EAAE,QAAQ;EACtB,IAAI,UAAU,EAAE,UAAU;EAC1B,GAAG,CAAC;EACJ,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC;EAChB,EAAE,IAAI,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;EACtB,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EACrB,EAAE,IAAI,MAAM,GAAG,UAAU,CAAC;EAC1B,EAAE,IAAI,IAAI,GAAG,UAAU,CAAC;EACxB,EAAE,IAAI,QAAQ,EAAE,OAAO,CAAC;EACxB,EAAE,IAAI,UAAU,GAAG,iBAAiB,GAAG,CAAC,CAAC;AACzC;EACA,EAAE,IAAI,OAAO,GAAGC,2BAAa,CAAC,gBAAgB,CAAC,IAAI,GAAG,CAAC,EAAE,aAAa,CAAC,CAAC;EACxE,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC;EAChB,EAAE,IAAI,eAAe,EAAE;EACvB;EACA,IAAI,OAAO,GAAG,UAAU,CAAC;EACzB,IAAI,QAAQ,GAAG,UAAU,CAAC;EAC1B,IAAI,IAAI,iBAAiB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;EAC5C,IAAI,MAAM,GAAGJ,qBAAU,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;EAC9D,IAAI,IAAI,GAAGA,qBAAU,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;EACxD,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;EACrC,MAAM,OAAO,GAAGA,qBAAU,CAAC,SAAS;EACpC,QAAQ,iBAAiB;EACzB,QAAQ,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;EAChC,QAAQ,OAAO;EACf,OAAO,CAAC;EACR,MAAM,QAAQ,GAAGA,qBAAU,CAAC,SAAS;EACrC,QAAQ,iBAAiB;EACzB,QAAQ,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC;EAC5B,QAAQ,QAAQ;EAChB,OAAO,CAAC;EACR,MAAMC,+CAAuB,CAAC,YAAY,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAC5E,MAAMA,+CAAuB,CAAC,YAAY;EAC1C,QAAQ,cAAc;EACtB,QAAQ,OAAO;EACf,QAAQ,SAAS;EACjB,QAAQ,IAAI;EACZ,OAAO,CAAC;EACR,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AAChE;EACA,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;EACrB,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAClB,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;EAC1B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAClB,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;AAC5B;EACA,MAAM,KAAK,IAAI,CAAC,CAAC;EACjB,MAAM,IAAI,IAAI,CAAC,CAAC;EAChB,KAAK;EACL,GAAG;AACH;EACA,EAAE,IAAI,QAAQ,GAAG,CAAC,CAAC;EACnB,EAAE,IAAI,SAAS,GAAG,CAAC,CAAC;EACpB,EAAE,IAAI,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;EACxC,EAAE,IAAI,QAAQ,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;EACvC,EAAE,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;EACvC,EAAE,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC3D;EACA,EAAE,IAAI,GAAGD,qBAAU,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;EAC9D,EAAE,IAAI,WAAW,CAAC;EAClB,EAAE,IAAI,UAAU,CAAC;EACjB,EAAE,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;EAC/B,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;EAClC,IAAI,WAAW,GAAG,SAAS,CAAC,qBAAqB;EACjD,MAAMA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC;EAClD,MAAM,QAAQ;EACd,KAAK,CAAC;EACN,IAAI,UAAU,GAAG,SAAS,CAAC,qBAAqB;EAChD,MAAMA,qBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC;EAC1D,MAAM,QAAQ;EACd,KAAK,CAAC;EACN,IAAI,MAAM,GAAGA,qBAAU,CAAC,SAAS;EACjC,MAAMA,qBAAU,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC;EACrD,MAAM,MAAM;EACZ,KAAK,CAAC;EACN,IAAI,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AAC9D;EACA,IAAI,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;EACnB,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAChB,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;EACxB,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAChB,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC1B,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC1B,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC1B,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC1B,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC1B,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;AAC1B;EACA,IAAI,KAAK,IAAI,CAAC,CAAC;EACf,IAAI,IAAI,IAAI,CAAC,CAAC;EACd,GAAG;AACH;EACA,EAAE,WAAW,GAAG,SAAS,CAAC,qBAAqB;EAC/C,IAAIA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC;EACrD,IAAI,QAAQ;EACZ,GAAG,CAAC;EACJ,EAAE,UAAU,GAAG,SAAS,CAAC,qBAAqB;EAC9C,IAAIA,qBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC;EACpD,IAAI,QAAQ;EACZ,GAAG,CAAC;EACJ,EAAE,MAAM,GAAGA,qBAAU,CAAC,SAAS;EAC/B,IAAIA,qBAAU,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC;EACnD,IAAI,MAAM;EACV,GAAG,CAAC;EACJ,EAAE,SAAS,IAAI,CAAC,CAAC;EACjB,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACvC,IAAI,IAAI,CAAC,CAAC;EACV,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,aAAa,CAAC;EACjC,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,cAAc,CAAC;EAClC,IAAI,IAAI,KAAK,CAAC;EACd,IAAI,IAAI,KAAK,CAAC;EACd,IAAI,IAAI,YAAY,GAAG,UAAU,CAAC;EAClC,IAAI,IAAI,aAAa,GAAG,UAAU,CAAC;EACnC,IAAI,IAAI,SAAS,GAAG,UAAU,CAAC;EAC/B,IAAI,MAAM,GAAGA,qBAAU,CAAC,SAAS,CAAC,eAAe,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;EACtE,IAAI,IAAIG,YAAO,CAAC,CAAC,CAAC,EAAE;EACpB,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;EACpE,MAAM,IAAI,IAAI,CAAC,CAAC;EAChB,MAAM,KAAK,GAAG,EAAE,CAAC;EACjB,MAAM,KAAK,GAAG,EAAE,CAAC;EACjB,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACzC,QAAQ,YAAY,GAAGH,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC;EACpE,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC;EACjC,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;EACzC,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;EACrC,QAAQC,+CAAuB,CAAC,YAAY;EAC5C,UAAU,cAAc;EACxB,UAAU,YAAY;EACtB,UAAU,SAAS;EACnB,UAAU,IAAI;EACd,SAAS,CAAC;EACV,QAAQ,aAAa,GAAGD,qBAAU,CAAC,SAAS;EAC5C,UAAU,cAAc;EACxB,UAAU,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;EAC7B,UAAU,aAAa;EACvB,SAAS,CAAC;EACV,QAAQ,SAAS,GAAGA,qBAAU,CAAC,SAAS,CAAC,cAAc,EAAE,KAAK,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;EAC/E,QAAQ,IAAI,GAAGA,qBAAU,CAAC,SAAS;EACnC,UAAUA,qBAAU,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC;EAC7D,UAAU,IAAI;EACd,SAAS,CAAC;EACV,QAAQ,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;EACtE,QAAQ,IAAI,IAAI,CAAC,CAAC;EAClB,OAAO;EACP,MAAM,YAAY,GAAGA,qBAAU,CAAC,SAAS;EACzC,QAAQ,cAAc;EACtB,QAAQ,KAAK,GAAG,CAAC;EACjB,QAAQ,YAAY;EACpB,OAAO,CAAC;EACR,MAAM,aAAa,GAAGA,qBAAU,CAAC,QAAQ;EACzC,QAAQA,qBAAU,CAAC,SAAS,CAAC,cAAc,EAAE,KAAK,GAAG,CAAC,EAAE,aAAa,CAAC;EACtE,QAAQ,YAAY;EACpB,QAAQ,aAAa;EACrB,OAAO,CAAC;EACR,MAAM,SAAS,GAAGA,qBAAU,CAAC,QAAQ;EACrC,QAAQA,qBAAU,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC;EACxE,QAAQ,YAAY;EACpB,QAAQ,SAAS;EACjB,OAAO,CAAC;EACR,MAAM,IAAI,GAAGA,qBAAU,CAAC,SAAS;EACjC,QAAQA,qBAAU,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC;EACtD,QAAQ,IAAI;EACZ,OAAO,CAAC;EACR,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;EACrE,MAAM,KAAK,IAAI,CAAC,CAAC;EACjB,KAAK,MAAM;EACX,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;EACrE,MAAM,KAAK,IAAI,CAAC,CAAC;EACjB,MAAM,KAAK,GAAG,EAAE,CAAC;EACjB,MAAM,KAAK,GAAG,EAAE,CAAC;EACjB,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACzC,QAAQ,YAAY,GAAGA,qBAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC;EACpE,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC;EACjC,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;EACrC,QAAQ,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;EACzC,QAAQC,+CAAuB,CAAC,YAAY;EAC5C,UAAU,cAAc;EACxB,UAAU,YAAY;EACtB,UAAU,KAAK;EACf,SAAS,CAAC;EACV,QAAQ,aAAa,GAAGD,qBAAU,CAAC,SAAS;EAC5C,UAAU,cAAc;EACxB,UAAU,KAAK,GAAG,CAAC;EACnB,UAAU,aAAa;EACvB,SAAS,CAAC;EACV,QAAQ,SAAS,GAAGA,qBAAU,CAAC,SAAS;EACxC,UAAU,cAAc;EACxB,UAAU,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC;EACzB,UAAU,SAAS;EACnB,SAAS,CAAC;EACV,QAAQ,IAAI,GAAGA,qBAAU,CAAC,SAAS;EACnC,UAAUA,qBAAU,CAAC,QAAQ,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC;EAC7D,UAAU,IAAI;EACd,SAAS,CAAC;EACV,QAAQ,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;EACvE,QAAQ,KAAK,IAAI,CAAC,CAAC;EACnB,OAAO;EACP,MAAM,YAAY,GAAGA,qBAAU,CAAC,SAAS;EACzC,QAAQ,cAAc;EACtB,QAAQ,KAAK,GAAG,CAAC;EACjB,QAAQ,YAAY;EACpB,OAAO,CAAC;EACR,MAAM,aAAa,GAAGA,qBAAU,CAAC,QAAQ;EACzC,QAAQA,qBAAU,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC;EAC5E,QAAQ,YAAY;EACpB,QAAQ,aAAa;EACrB,OAAO,CAAC;EACR,MAAM,SAAS,GAAGA,qBAAU,CAAC,QAAQ;EACrC,QAAQA,qBAAU,CAAC,SAAS,CAAC,cAAc,EAAE,KAAK,GAAG,CAAC,EAAE,SAAS,CAAC;EAClE,QAAQ,YAAY;EACpB,QAAQ,SAAS;EACjB,OAAO,CAAC;EACR,MAAM,IAAI,GAAGA,qBAAU,CAAC,SAAS;EACjC,QAAQA,qBAAU,CAAC,MAAM,CAACA,qBAAU,CAAC,GAAG,CAAC,SAAS,EAAE,aAAa,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC;EAC/E,QAAQ,IAAI;EACZ,OAAO,CAAC;EACR,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;EACpE,MAAM,IAAI,IAAI,CAAC,CAAC;EAChB,KAAK;EACL,IAAI,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;EACtC,IAAI,QAAQ,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;EACrC,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3B,IAAI,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,IAAI,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;EACzC,IAAI,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;EAC7D,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AACjC;EACA,IAAI,SAAS,IAAI,CAAC,CAAC;EACnB,IAAI,IAAI,GAAGA,qBAAU,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;EAChE,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;EAC7C,MAAM,WAAW,GAAG,SAAS,CAAC,qBAAqB;EACnD,QAAQA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,QAAQ,CAAC;EACpD,QAAQ,QAAQ;EAChB,OAAO,CAAC;EACR,MAAM,UAAU,GAAG,SAAS,CAAC,qBAAqB;EAClD,QAAQA,qBAAU,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC;EAC5D,QAAQ,QAAQ;EAChB,OAAO,CAAC;EACR,MAAM,MAAM,GAAGA,qBAAU,CAAC,SAAS;EACnC,QAAQA,qBAAU,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC;EACvD,QAAQ,MAAM;EACd,OAAO,CAAC;EACR,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AAChE;EACA,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;EACrB,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAClB,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;EAC1B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAClB,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;AAC5B;EACA,MAAM,KAAK,IAAI,CAAC,CAAC;EACjB,MAAM,IAAI,IAAI,CAAC,CAAC;EAChB,KAAK;EACL,IAAI,KAAK,IAAI,CAAC,CAAC;EACf,IAAI,IAAI,IAAI,CAAC,CAAC;EACd,GAAG;EACH,EAAE,MAAM,GAAGA,qBAAU,CAAC,SAAS;EAC/B,IAAI,eAAe;EACnB,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC;EAC9B,IAAI,MAAM;EACV,GAAG,CAAC;EACJ,EAAE,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AAC5D;EACA,EAAE,IAAI,eAAe,EAAE;EACvB;EACA,IAAI,KAAK,IAAI,CAAC,CAAC;EACf,IAAI,IAAI,IAAI,CAAC,CAAC;EACd,IAAI,OAAO,GAAG,UAAU,CAAC;EACzB,IAAI,QAAQ,GAAG,UAAU,CAAC;EAC1B,IAAI,IAAI,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;EAC3C,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;EACrC,MAAM,OAAO,GAAGA,qBAAU,CAAC,SAAS;EACpC,QAAQ,gBAAgB;EACxB,QAAQ,CAAC,iBAAiB,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;EACvC,QAAQ,OAAO;EACf,OAAO,CAAC;EACR,MAAM,QAAQ,GAAGA,qBAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;EACzE,MAAMC,+CAAuB,CAAC,YAAY;EAC1C,QAAQ,cAAc;EACtB,QAAQ,OAAO;EACf,QAAQ,SAAS;EACjB,QAAQ,IAAI;EACZ,OAAO,CAAC;EACR,MAAMA,+CAAuB,CAAC,YAAY,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;EAC5E,MAAM,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;AAChE;EACA,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;EACrB,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAClB,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;EAC1B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAClB,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC5B,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;AAC5B;EACA,MAAM,KAAK,IAAI,CAAC,CAAC;EACjB,MAAM,IAAI,IAAI,CAAC,CAAC;EAChB,KAAK;EACL,GAAG;AACH;EACA,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAII,mCAAiB,CAAC;EAC9C,IAAI,iBAAiB,EAAEC,mCAAiB,CAAC,MAAM;EAC/C,IAAI,sBAAsB,EAAE,CAAC;EAC7B,IAAI,MAAM,EAAE,cAAc;EAC1B,GAAG,CAAC,CAAC;AACL;EACA,EAAE,IAAI,YAAY,CAAC,EAAE,EAAE;EACvB,IAAI,IAAI,EAAE,GAAG,IAAI,YAAY,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,IAAI,IAAI,OAAO,CAAC;EAChB,IAAI,IAAI,MAAM,CAAC;EACf,IAAI,IAAI,OAAO,GAAG,CAAC,CAAC;EACpB,IAAI,IAAI,eAAe,EAAE;EACzB,MAAM,SAAS,IAAI,CAAC,CAAC;EACrB,MAAM,UAAU,IAAI,CAAC,CAAC;EACtB,MAAM,IAAI,KAAK,GAAG,IAAI,CAAC,EAAE,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;EACpD,MAAM,MAAM,GAAG,CAAC,IAAI,SAAS,GAAG,iBAAiB,GAAG,CAAC,CAAC,CAAC;EACvD,MAAM,OAAO,GAAG,CAAC,IAAI,UAAU,GAAG,iBAAiB,GAAG,CAAC,CAAC,CAAC;EACzD,MAAM,IAAI,CAAC,CAAC;EACZ,MAAM,IAAI,UAAU,GAAG,iBAAiB,GAAG,CAAC,CAAC;EAC7C,MAAM,KAAK,CAAC,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC/D;EACA,QAAQ,CAAC,GAAGC,gBAAU,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC;EAC/C,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,OAAO,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACpD,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChD,OAAO;EACP,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,GAAG,iBAAiB,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC/D;EACA,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;EACpC,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;EAC1B,OAAO;EACP,MAAM,KAAK,CAAC,GAAG,iBAAiB,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;EACvD;EACA,QAAQ,CAAC,GAAGA,gBAAU,CAAC,WAAW,GAAG,CAAC,GAAG,KAAK,CAAC;EAC/C,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,OAAO,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACxD,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChD,OAAO;EACP,MAAM,KAAK,CAAC,GAAG,UAAU,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACvC;EACA,QAAQ,CAAC,GAAGA,gBAAU,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC;EAC/C,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChD,OAAO;EACP,MAAM,KAAK,CAAC,GAAG,SAAS,GAAG,iBAAiB,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC1D;EACA,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;EACnC,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;EAC1B,OAAO;EACP,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC3C;EACA,QAAQ,CAAC,GAAGA,gBAAU,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC;EAC/C,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChD,OAAO;EACP,KAAK,MAAM;EACX,MAAM,SAAS,IAAI,CAAC,CAAC;EACrB,MAAM,UAAU,IAAI,CAAC,CAAC;EACtB,MAAM,MAAM,GAAG,CAAC,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;EACnC,MAAM,OAAO,GAAG,CAAC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;EACrC,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;EACvC;EACA,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;EACpC,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;EAC1B,OAAO;EACP,MAAM,KAAK,CAAC,GAAG,SAAS,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACtC;EACA,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC;EACzC,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;EAC1B,OAAO;EACP,KAAK;AACL;EACA,IAAI,UAAU,CAAC,EAAE,GAAG,IAAIF,mCAAiB,CAAC;EAC1C,MAAM,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;EAChD,MAAM,sBAAsB,EAAE,CAAC;EAC/B,MAAM,MAAM,EAAE,EAAE;EAChB,KAAK,CAAC,CAAC;EACP,GAAG;AACH;EACA,EAAE,IAAI,YAAY,CAAC,MAAM,EAAE;EAC3B,IAAI,UAAU,CAAC,MAAM,GAAG,IAAID,mCAAiB,CAAC;EAC9C,MAAM,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;EAChD,MAAM,sBAAsB,EAAE,CAAC;EAC/B,MAAM,MAAM,EAAE,IAAI,CAAC,OAAO;EAC1B,KAAK,CAAC,CAAC;EACP,GAAG;AACH;EACA,EAAE,IAAI,YAAY,CAAC,OAAO,EAAE;EAC5B,IAAI,UAAU,CAAC,OAAO,GAAG,IAAID,mCAAiB,CAAC;EAC/C,MAAM,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;EAChD,MAAM,sBAAsB,EAAE,CAAC;EAC/B,MAAM,MAAM,EAAE,IAAI,CAAC,QAAQ;EAC3B,KAAK,CAAC,CAAC;EACP,GAAG;AACH;EACA,EAAE,IAAI,YAAY,CAAC,SAAS,EAAE;EAC9B,IAAI,UAAU,CAAC,SAAS,GAAG,IAAID,mCAAiB,CAAC;EACjD,MAAM,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;EAChD,MAAM,sBAAsB,EAAE,CAAC;EAC/B,MAAM,MAAM,EAAE,IAAI,CAAC,UAAU;EAC7B,KAAK,CAAC,CAAC;EACP,GAAG;AACH;EACA,EAAE,OAAO;EACT,IAAI,UAAU,EAAE,UAAU;EAC1B,IAAI,OAAO,EAAE,OAAO;EACpB,GAAG,CAAC;EACJ,CAAC;AACD;EACA,SAAS,kBAAkB,CAAC,UAAU,EAAE,YAAY,EAAE;EACtD,EAAE;EACF,IAAI,CAAC,YAAY,CAAC,MAAM;EACxB,IAAI,CAAC,YAAY,CAAC,OAAO;EACzB,IAAI,CAAC,YAAY,CAAC,SAAS;EAC3B,IAAI,CAAC,YAAY,CAAC,EAAE;EACpB,IAAI;EACJ,IAAI,OAAO,UAAU,CAAC;EACtB,GAAG;EACH,EAAE,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;EAC7C,EAAE,IAAI,UAAU,CAAC;EACjB,EAAE,IAAI,aAAa,CAAC;EACpB,EAAE,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,SAAS,EAAE;EACrD,IAAI,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;EAC1C,IAAI,aAAa,GAAG,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;EAChD,GAAG;EACH,EAAE,IAAI,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;EACpD,EAAE,IAAI,SAAS,GAAG,IAAI,GAAG,CAAC,CAAC;EAC3B,EAAE,IAAI,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC;EACzB,EAAE,IAAI,OAAO,GAAG,SAAS,GAAG,CAAC,CAAC;EAC9B,EAAE,IAAI,CAAC,CAAC;EACR,EAAE,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,SAAS,IAAI,YAAY,CAAC,OAAO,EAAE;EAC7E,IAAI,IAAI,OAAO,GAAG,YAAY,CAAC,MAAM;EACrC,QAAQ,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;EACvC,QAAQ,SAAS,CAAC;EAClB,IAAI,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO;EACvC,QAAQ,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;EACvC,QAAQ,SAAS,CAAC;EAClB,IAAI,IAAI,UAAU,GAAG,YAAY,CAAC,SAAS;EAC3C,QAAQ,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;EACvC,QAAQ,SAAS,CAAC;EAClB,IAAI,IAAI,WAAW,GAAG,UAAU,CAAC;EACjC,IAAI,IAAI,cAAc,GAAG,UAAU,CAAC;EACpC,IAAI,IAAI,gBAAgB,GAAG,UAAU,CAAC;EACtC,IAAI,IAAI,MAAM,GAAG,UAAU,CAAC;EAC5B,IAAI,IAAI,OAAO,GAAG,UAAU,CAAC;EAC7B,IAAI,IAAI,SAAS,GAAG,UAAU,CAAC;EAC/B,IAAI,IAAI,SAAS,GAAG,OAAO,CAAC;EAC5B,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE;EACvC,MAAM,IAAI,eAAe,GAAG,SAAS,GAAG,OAAO,CAAC;EAChD,MAAM,WAAW,GAAGN,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;EACpE,MAAM,cAAc,GAAGA,qBAAU,CAAC,SAAS;EAC3C,QAAQ,SAAS;EACjB,QAAQ,CAAC,GAAG,SAAS;EACrB,QAAQ,cAAc;EACtB,OAAO,CAAC;EACR,MAAM,gBAAgB,GAAGA,qBAAU,CAAC,SAAS;EAC7C,QAAQ,SAAS;EACjB,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,SAAS;EAC3B,QAAQ,gBAAgB;EACxB,OAAO,CAAC;EACR,MAAM,cAAc,GAAGA,qBAAU,CAAC,QAAQ;EAC1C,QAAQ,cAAc;EACtB,QAAQ,WAAW;EACnB,QAAQ,cAAc;EACtB,OAAO,CAAC;EACR,MAAM,gBAAgB,GAAGA,qBAAU,CAAC,QAAQ;EAC5C,QAAQ,gBAAgB;EACxB,QAAQ,WAAW;EACnB,QAAQ,gBAAgB;EACxB,OAAO,CAAC;EACR,MAAM,MAAM,GAAGA,qBAAU,CAAC,SAAS;EACnC,QAAQA,qBAAU,CAAC,KAAK,CAAC,cAAc,EAAE,gBAAgB,EAAE,MAAM,CAAC;EAClE,QAAQ,MAAM;EACd,OAAO,CAAC;EACR,MAAM,IAAI,YAAY,CAAC,MAAM,EAAE;EAC/B,QAAQC,+CAAuB,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;EAC/E,QAAQA,+CAAuB,CAAC,YAAY;EAC5C,UAAU,OAAO;EACjB,UAAU,MAAM;EAChB,UAAU,eAAe,GAAG,CAAC;EAC7B,SAAS,CAAC;EACV,QAAQA,+CAAuB,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;EACzE,QAAQA,+CAAuB,CAAC,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC;EAC7E,OAAO;EACP,MAAM,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,SAAS,EAAE;EAC1D,QAAQ,SAAS,GAAGD,qBAAU,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;EACnE,QAAQ,IAAI,YAAY,CAAC,SAAS,EAAE;EACpC,UAAUC,+CAAuB,CAAC,YAAY;EAC9C,YAAY,UAAU;EACtB,YAAY,SAAS;EACrB,YAAY,eAAe;EAC3B,WAAW,CAAC;EACZ,UAAUA,+CAAuB,CAAC,YAAY;EAC9C,YAAY,UAAU;EACtB,YAAY,SAAS;EACrB,YAAY,eAAe,GAAG,CAAC;EAC/B,WAAW,CAAC;EACZ,UAAUA,+CAAuB,CAAC,YAAY;EAC9C,YAAY,UAAU;EACtB,YAAY,SAAS;EACrB,YAAY,SAAS;EACrB,WAAW,CAAC;EACZ,UAAUA,+CAAuB,CAAC,YAAY;EAC9C,YAAY,UAAU;EACtB,YAAY,SAAS;EACrB,YAAY,SAAS,GAAG,CAAC;EACzB,WAAW,CAAC;EACZ,SAAS;AACT;EACA,QAAQ,IAAI,YAAY,CAAC,OAAO,EAAE;EAClC,UAAU,OAAO,GAAGD,qBAAU,CAAC,SAAS;EACxC,YAAYA,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC;EACxD,YAAY,OAAO;EACnB,WAAW,CAAC;EACZ,UAAUC,+CAAuB,CAAC,YAAY;EAC9C,YAAY,QAAQ;EACpB,YAAY,OAAO;EACnB,YAAY,eAAe;EAC3B,WAAW,CAAC;EACZ,UAAUA,+CAAuB,CAAC,YAAY;EAC9C,YAAY,QAAQ;EACpB,YAAY,OAAO;EACnB,YAAY,eAAe,GAAG,CAAC;EAC/B,WAAW,CAAC;EACZ,UAAUA,+CAAuB,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;EAC7E,UAAUA,+CAAuB,CAAC,YAAY;EAC9C,YAAY,QAAQ;EACpB,YAAY,OAAO;EACnB,YAAY,SAAS,GAAG,CAAC;EACzB,WAAW,CAAC;EACZ,SAAS;EACT,OAAO;EACP,MAAM,SAAS,IAAI,CAAC,CAAC;EACrB,KAAK;AACL;EACA,IAAI,IAAI,YAAY,CAAC,MAAM,EAAE;EAC7B,MAAM,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;EAC9B,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,CAAC,EAAE;EACzC;EACA,QAAQ,OAAO,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EAChD,QAAQ,OAAO,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACxD,QAAQ,OAAO,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACxD,OAAO;EACP,MAAM,UAAU,CAAC,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC;EACzC,KAAK,MAAM;EACX,MAAM,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC;EACpC,KAAK;AACL;EACA,IAAI,IAAI,YAAY,CAAC,SAAS,EAAE;EAChC,MAAM,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;EACpC,MAAM,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;EAC/C,MAAM,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,UAAU,CAAC;EAC/C,KAAK,MAAM;EACX,MAAM,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC;EACvC,KAAK;AACL;EACA,IAAI,IAAI,YAAY,CAAC,OAAO,EAAE;EAC9B,MAAM,IAAI,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;EAClD,MAAM,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;EAChC,MAAM,QAAQ,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;EAC3C,MAAM,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;EAC3C,KAAK;EACL,GAAG;EACH,EAAE,IAAI,YAAY,CAAC,EAAE,EAAE;EACvB,IAAI,IAAI,KAAK,GAAG,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC;EACrC,IAAI,IAAI,EAAE,GAAG,IAAI,YAAY,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;EAC3C,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EAClB,IAAI,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;EAC3B,IAAI,IAAI,KAAK,GAAG,OAAO,GAAG,CAAC,CAAC;AAC5B;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAChC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7B,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7B,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;EACvC,QAAQ,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EACzB,QAAQ,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7B,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EACxB,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EACxB,OAAO;EACP,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7B,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7B,KAAK;EACL,IAAI,UAAU,CAAC,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC;EAC9B,GAAG;AACH;EACA,EAAE,OAAO,UAAU,CAAC;EACpB,CAAC;AACD;EACA,SAAS,gBAAgB,CAAC,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE;EAC3D,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACxC,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACxC,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACxC,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;EAChD,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7B,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7B,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EAC/B,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EAC/B,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EAC/B,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EAC/B,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EAC/B,IAAI,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;EAC/B,GAAG;EACH,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACxC,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EACxC,EAAE,aAAa,CAAC,KAAK,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AACxC;EACA,EAAE,OAAO,aAAa,CAAC;EACvB,CAAC;AACD;EACA,SAAS,wBAAwB,CAAC,MAAM,EAAE,YAAY,EAAE;EACxD,EAAE,IAAI,eAAe,GAAG,IAAIO,yBAAY,CAAC;EACzC,IAAI,QAAQ,EAAE,YAAY,CAAC,QAAQ;EACnC,IAAI,MAAM;EACV,MAAM,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,SAAS,IAAI,MAAM,CAAC,YAAY;EAC1E,IAAI,OAAO,EAAE,YAAY,CAAC,OAAO;EACjC,IAAI,SAAS,EAAE,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,SAAS;EAC5D,IAAI,EAAE,EAAE,YAAY,CAAC,EAAE;EACvB,GAAG,CAAC,CAAC;EACL,EAAE,IAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;EACnC,EAAE,IAAI,iBAAiB,GAAGP,+CAAuB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;EAC3E,EAAE,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,EAAE,eAAe,EAAE,SAAS,CAAC,CAAC;EACpE,EAAE,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;EAC7B,EAAE,IAAI,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;EAC7C,EAAE,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;EACnC,EAAE,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;EAC7B,EAAE,IAAI,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;EAC7C,EAAE,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;EAChC,EAAE,IAAI,YAAY,GAAG,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;EAClD,EAAE,IAAI,iBAAiB,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;EACnD,EAAE,iBAAiB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;EACnC,EAAE,IAAI,aAAa,GAAG,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACnD;EACA,EAAE,SAAS,GAAGQ,+BAAe,CAAC,qBAAqB;EACnD,IAAI,SAAS;EACb,IAAI,MAAM;EACV,IAAI,SAAS;EACb,GAAG,CAAC;EACJ,EAAE,aAAa,GAAG,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC;EAChE,EAAE,iBAAiB,GAAGA,+BAAe,CAAC,qBAAqB;EAC3D,IAAI,iBAAiB;EACrB,IAAI,cAAc;EAClB,IAAI,SAAS;EACb,GAAG,CAAC;EACJ,EAAE,aAAa,GAAG,gBAAgB;EAClC,IAAI,iBAAiB;EACrB,IAAI,MAAM,GAAG,CAAC;EACd,IAAI,aAAa;EACjB,GAAG,CAAC;EACJ,EAAE,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;EAC9B,EAAE,YAAY,CAAC,GAAG,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;EAC9C,EAAE,YAAY,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC;EAC9C,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,YAAY,CAAC;AAC5C;EACA,EAAE,UAAU,GAAG,kBAAkB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;EAC5D,EAAE,IAAI,CAAC,CAAC;EACR,EAAE,IAAI,IAAI,GAAG,MAAM,GAAG,CAAC,CAAC;EACxB,EAAE,IAAI,MAAM,CAAC,YAAY,EAAE;EAC3B,IAAI,IAAI,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;EAC9C,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;AAC/B;EACA,IAAI,IAAI,cAAc,GAAG,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;EACtD,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;EACjC,MAAM,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACrC,KAAK;EACL;EACA,IAAI,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;EAC3C,IAAI,cAAc,GAAG,gBAAgB,CAAC,UAAU,EAAE,MAAM,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC;EAC9E,IAAI,UAAU,CAAC,gBAAgB,GAAG,IAAIJ,mCAAiB,CAAC;EACxD,MAAM,iBAAiB,EAAEC,mCAAiB,CAAC,KAAK;EAChD,MAAM,sBAAsB,EAAE,CAAC;EAC/B,MAAM,MAAM,EAAE,cAAc;EAC5B,KAAK,CAAC,CAAC;EACP,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;EAC9B,MAAM,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC;EACpC,KAAK;EACL,GAAG;EACH,EAAE,IAAIH,YAAO,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;EACvC,IAAI,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;EAC/C,IAAI,IAAI,MAAM,CAAC,eAAe,KAAKO,+CAAuB,CAAC,GAAG,EAAE;EAChE,MAAM,WAAW,GAAGC,iCAAS,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;EACvD,MAAM,WAAW,GAAGA,iCAAS,CAAC,WAAW,EAAE,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;EAClE,KAAK,MAAM;EACX,MAAM,IAAI,gBAAgB;EAC1B,QAAQ,MAAM,CAAC,eAAe,KAAKD,+CAAuB,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;EACxE,MAAM,WAAW,GAAGC,iCAAS,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;EAC7D,KAAK;EACL,IAAI,UAAU,CAAC,WAAW,GAAG,IAAIN,mCAAiB,CAAC;EACnD,MAAM,iBAAiB,EAAEC,mCAAiB,CAAC,aAAa;EACxD,MAAM,sBAAsB,EAAE,CAAC;EAC/B,MAAM,MAAM,EAAE,WAAW;EACzB,KAAK,CAAC,CAAC;EACP,GAAG;AACH;EACA,EAAE,IAAI,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;EAC/B,EAAE,IAAI,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC;EAC5B,EAAE,IAAI,UAAU,GAAGF,2BAAa,CAAC,gBAAgB;EACjD,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC;EAC3B,IAAI,OAAO,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC;EAC7B,GAAG,CAAC;EACJ,EAAE,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EAC1B,EAAE,IAAI,KAAK,GAAG,OAAO,CAAC;EACtB,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;EACnC;EACA,IAAI,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACxB,IAAI,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC5B,IAAI,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC5B,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;EACpC,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;EACpC,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;EACpC,GAAG;AACH;EACA,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AACrB;EACA,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE;EACnC;EACA,IAAI,EAAE,GAAG,CAAC,GAAG,OAAO,CAAC;EACrB,IAAI,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;EACtB,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAChB,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAChB,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC7B,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC7B,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC7B,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC7B,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC7B,IAAI,UAAU,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,CAAC;EAC7B,GAAG;AACH;EACA,EAAE,OAAO;EACT,IAAI,UAAU,EAAE,UAAU;EAC1B,IAAI,OAAO,EAAE,UAAU;EACvB,GAAG,CAAC;EACJ,CAAC;AACD;EACA,IAAI,iBAAiB,GAAG,IAAIJ,qBAAU,EAAE,CAAC;EACzC,IAAI,iBAAiB,GAAG,IAAIA,qBAAU,EAAE,CAAC;EACzC,IAAI,mBAAmB,GAAG,IAAIY,uBAAY,EAAE,CAAC;AAC7C;EACA,SAAS,mBAAmB;EAC5B,EAAE,SAAS;EACX,EAAE,SAAS;EACX,EAAE,SAAS;EACX,EAAE,SAAS;EACX,EAAE,GAAG;EACL,EAAE,GAAG;EACL,EAAE;EACF;EACA,EAAE,IAAI,SAAS,GAAGZ,qBAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,EAAE,iBAAiB,CAAC,CAAC;EAC/E,EAAEA,qBAAU,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;EAC7C,EAAE,IAAI,MAAM,GAAG,SAAS,CAAC,qBAAqB,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;EAC7E,EAAE,IAAI,eAAe,GAAGA,qBAAU,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;EAC/E,EAAEA,qBAAU,CAAC,gBAAgB,CAAC,eAAe,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;AAC3E;EACA,EAAE,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC;EAC5B,EAAE,IAAI,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC;EAC7B,EAAE,IAAI,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC;EAC5B,EAAE,IAAI,MAAM,GAAG,GAAG,CAAC,SAAS,CAAC;AAC7B;EACA;EACA,EAAEA,qBAAU,CAAC,GAAG,CAAC,SAAS,EAAE,eAAe,EAAE,iBAAiB,CAAC,CAAC;EAChE,EAAE,SAAS,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;AAC5E;EACA,EAAE,IAAI,GAAG,GAAG,mBAAmB,CAAC,QAAQ,CAAC;EACzC,EAAE,IAAI,GAAG,GAAG,mBAAmB,CAAC,SAAS,CAAC;EAC1C,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACjC;EACA,EAAEA,qBAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,EAAE,iBAAiB,CAAC,CAAC;EACrE,EAAE,SAAS,CAAC,uBAAuB,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;AAC5E;EACA,EAAE,GAAG,GAAG,mBAAmB,CAAC,QAAQ,CAAC;EACrC,EAAE,GAAG,GAAG,mBAAmB,CAAC,SAAS,CAAC;EACtC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjC,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACjC;EACA,EAAE,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;EACxB,EAAE,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC;EACzB,EAAE,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC;EACxB,EAAE,GAAG,CAAC,SAAS,GAAG,MAAM,CAAC;EACzB,CAAC;AACD;EACA,IAAI,sBAAsB,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAC9C,IAAI,oBAAoB,GAAG,IAAIA,qBAAU,EAAE,CAAC;EAC5C,IAAI,sBAAsB,GAAG,IAAIY,uBAAY,EAAE,CAAC;EAChD,IAAI,sBAAsB,GAAG,IAAIA,uBAAY,EAAE,CAAC;AAChD;EACA,SAAS,gBAAgB,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE;EAC3E,EAAE,SAAS,GAAG,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;EACnD,EAAE,IAAI,cAAc,GAAGC,2CAAqB;EAC5C,IAAI,SAAS;EACb,IAAIb,qBAAU,CAAC,aAAa;EAC5B,GAAG,CAAC;EACJ,EAAE,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;EACrC,EAAE,IAAI,MAAM,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;EAChC,IAAI,OAAO,IAAIc,oBAAS,EAAE,CAAC;EAC3B,GAAG;EACH,EAAE,IAAI,SAAS,GAAG,KAAK,GAAG,GAAG,CAAC;AAC9B;EACA,EAAE,sBAAsB,CAAC,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC;EAC7D,EAAE,sBAAsB,CAAC,SAAS,GAAG,MAAM,CAAC,iBAAiB,CAAC;EAC9D,EAAE,sBAAsB,CAAC,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC;EAC7D,EAAE,sBAAsB,CAAC,SAAS,GAAG,MAAM,CAAC,iBAAiB,CAAC;AAC9D;EACA,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;EACf,EAAE,IAAI,UAAU,KAAKC,wCAAU,CAAC,OAAO,EAAE;EACzC;EACA,IAAI,IAAI,KAAK,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;EAClC,IAAIf,qBAAU,CAAC,QAAQ,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;EAC1E,IAAIA,qBAAU,CAAC,SAAS,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,CAAC;EACzE,IAAIA,qBAAU,CAAC,gBAAgB;EAC/B,MAAM,sBAAsB;EAC5B,MAAM,SAAS;EACf,MAAM,sBAAsB;EAC5B,KAAK,CAAC;EACN,IAAIA,qBAAU,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAsB,EAAE,oBAAoB,CAAC,CAAC;AACxE;EACA,IAAI,SAAS,CAAC,uBAAuB;EACrC,MAAM,oBAAoB;EAC1B,MAAM,mBAAmB;EACzB,KAAK,CAAC;EACN,IAAI,GAAG,GAAG,mBAAmB,CAAC,QAAQ,CAAC;EACvC,IAAI,GAAG,GAAG,mBAAmB,CAAC,SAAS,CAAC;EACxC,IAAI,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG;EAC9C,MAAM,sBAAsB,CAAC,QAAQ;EACrC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,IAAI,sBAAsB,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG;EAC/C,MAAM,sBAAsB,CAAC,SAAS;EACtC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,IAAI,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG;EAC9C,MAAM,sBAAsB,CAAC,QAAQ;EACrC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,IAAI,sBAAsB,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG;EAC/C,MAAM,sBAAsB,CAAC,SAAS;EACtC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,GAAG;AACH;EACA;EACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,EAAE,EAAE,CAAC,EAAE;EACvC,IAAI,mBAAmB;EACvB,MAAM,cAAc,CAAC,CAAC,CAAC;EACvB,MAAM,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC;EAC3B,MAAM,SAAS;EACf,MAAM,SAAS;EACf,MAAM,sBAAsB;EAC5B,MAAM,sBAAsB;EAC5B,KAAK,CAAC;EACN,GAAG;AACH;EACA;EACA,EAAE,IAAI,IAAI,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;EACxC,EAAEA,qBAAU,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC;EAChF,EAAEA,qBAAU,CAAC,SAAS,CAAC,sBAAsB,EAAE,sBAAsB,CAAC,CAAC;EACvE,EAAEA,qBAAU,CAAC,gBAAgB;EAC7B,IAAI,sBAAsB;EAC1B,IAAI,SAAS;EACb,IAAI,sBAAsB;EAC1B,GAAG,CAAC;EACJ,EAAEA,qBAAU,CAAC,GAAG,CAAC,IAAI,EAAE,sBAAsB,EAAE,oBAAoB,CAAC,CAAC;EACrE,EAAE,mBAAmB;EACrB,IAAI,IAAI;EACR,IAAI,oBAAoB;EACxB,IAAI,SAAS;EACb,IAAI,SAAS;EACb,IAAI,sBAAsB;EAC1B,IAAI,sBAAsB;EAC1B,GAAG,CAAC;AACJ;EACA,EAAE,IAAI,UAAU,KAAKe,wCAAU,CAAC,OAAO,EAAE;EACzC;EACA,IAAI,SAAS,CAAC,uBAAuB;EACrC,MAAM,oBAAoB;EAC1B,MAAM,mBAAmB;EACzB,KAAK,CAAC;EACN,IAAI,GAAG,GAAG,mBAAmB,CAAC,QAAQ,CAAC;EACvC,IAAI,GAAG,GAAG,mBAAmB,CAAC,SAAS,CAAC;EACxC,IAAI,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG;EAC9C,MAAM,sBAAsB,CAAC,QAAQ;EACrC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,IAAI,sBAAsB,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG;EAC/C,MAAM,sBAAsB,CAAC,SAAS;EACtC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,IAAI,sBAAsB,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG;EAC9C,MAAM,sBAAsB,CAAC,QAAQ;EACrC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,IAAI,sBAAsB,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG;EAC/C,MAAM,sBAAsB,CAAC,SAAS;EACtC,MAAM,GAAG;EACT,KAAK,CAAC;EACN,GAAG;AACH;EACA,EAAE,IAAI,SAAS,GAAGZ,YAAO,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,IAAIW,oBAAS,EAAE,CAAC;EAC7D,EAAE,SAAS,CAAC,KAAK,GAAG,sBAAsB,CAAC,QAAQ,CAAC;EACpD,EAAE,SAAS,CAAC,KAAK,GAAG,sBAAsB,CAAC,QAAQ,CAAC;EACpD,EAAE,SAAS,CAAC,IAAI,GAAG,sBAAsB,CAAC,SAAS,CAAC;EACpD,EAAE,SAAS,CAAC,IAAI,GAAG,sBAAsB,CAAC,SAAS,CAAC;AACpD;EACA,EAAE,OAAO,SAAS,CAAC;EACnB,CAAC;AACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,gBAAgB,CAAC,OAAO,EAAE;EACnC,EAAE,OAAO,GAAGE,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;EAC7D,EAAE,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;EACpC,EAAE,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;AAC5B;EACA;EACA,EAAEC,WAAK,CAAC,OAAO,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;EAChD,EAAEA,WAAK,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;EACxC;AACA;EACA,EAAE,IAAI,MAAM,GAAGD,iBAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;EACjD,EAAE,IAAI,cAAc,GAAGA,iBAAY,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACpE;EACA,EAAE,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;EAC9B,EAAE,IAAI,CAAC,UAAU,GAAGE,oBAAS,CAAC,KAAK;EACnC,IAAIF,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAEE,oBAAS,CAAC,KAAK,CAAC;EACpD,GAAG,CAAC;EACJ,EAAE,IAAI,CAAC,aAAa,GAAGV,yBAAY,CAAC,KAAK;EACzC,IAAIQ,iBAAY,CAAC,OAAO,CAAC,YAAY,EAAER,yBAAY,CAAC,OAAO,CAAC;EAC5D,GAAG,CAAC;EACJ,EAAE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;EACtB,EAAE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;EAClD,EAAE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;EAC1D,EAAE,IAAI,CAAC,WAAW,GAAGQ,iBAAY,CAAC,OAAO,CAAC,UAAU,EAAED,wCAAU,CAAC,OAAO,CAAC,CAAC;EAC1E,EAAE,IAAI,CAAC,YAAY,GAAGC,iBAAY;EAClC,IAAI,OAAO,CAAC,WAAW;EACvB,IAAIT,gBAAU,CAAC,kBAAkB;EACjC,GAAG,CAAC;EACJ,EAAE,IAAI,CAAC,aAAa,GAAGS,iBAAY,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;EACjE,EAAE,IAAI,CAAC,WAAW,GAAG,wBAAwB,CAAC;EAC9C,EAAE,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,eAAe,CAAC;EAClD,EAAE,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;AAC9B;EACA;EACA;EACA;EACA;EACA,EAAE,IAAI,CAAC,YAAY;EACnB,IAAI,CAAC;EACL,IAAI,SAAS,CAAC,MAAM,GAAGhB,qBAAU,CAAC,YAAY;EAC9C,IAAIkB,oBAAS,CAAC,YAAY;EAC1B,IAAIV,yBAAY,CAAC,YAAY;EAC7B,IAAI,CAAC,CAAC;EACN,CAAC;AACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,gBAAgB,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE;EAC/D;EACA,EAAES,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EAChC,EAAEA,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EAChC;AACA;EACA,EAAE,aAAa,GAAGD,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACjD;EACA,EAAE,IAAI,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC;EACnC,EAAE,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;EAChC,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,MAAM,CAAC;AAClC;EACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIhB,qBAAU,CAAC,YAAY,EAAE;EAC7E,IAAIA,qBAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;EACxD,GAAG;AACH;EACA,EAAEkB,oBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;EACzD,EAAE,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;AAC1C;EACA,EAAEV,yBAAY,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;EAC/D,EAAE,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;AAC7C;EACA,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;EACxC,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC;EACzC,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,eAAe,CAAC;EACjD,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC;EAC7C,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC;EAC9C,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,GAAG,KAAK,CAAC,aAAa,GAAG,GAAG,GAAG,GAAG,CAAC;EAC3D,EAAE,KAAK,CAAC,aAAa,CAAC,GAAGQ,iBAAY,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC;AAClE;EACA,EAAE,OAAO,KAAK,CAAC;EACf,CAAC,CAAC;AACF;EACA,IAAI,gBAAgB,GAAGE,oBAAS,CAAC,KAAK,CAACA,oBAAS,CAAC,WAAW,CAAC,CAAC;EAC9D,IAAI,mBAAmB,GAAG,IAAIV,yBAAY,EAAE,CAAC;EAC7C,IAAI,cAAc,GAAG;EACrB,EAAE,SAAS,EAAE,SAAS;EACtB,EAAE,SAAS,EAAE,gBAAgB;EAC7B,EAAE,YAAY,EAAE,mBAAmB;EACnC,EAAE,KAAK,EAAE,SAAS;EAClB,EAAE,MAAM,EAAE,SAAS;EACnB,EAAE,cAAc,EAAE,SAAS;EAC3B,EAAE,UAAU,EAAE,SAAS;EACvB,EAAE,WAAW,EAAE,SAAS;EACxB,EAAE,YAAY,EAAE,SAAS;EACzB,EAAE,eAAe,EAAE,SAAS;EAC5B,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,gBAAgB,CAAC,MAAM,GAAG,UAAU,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE;EAClE;EACA,EAAES,WAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;EAChC;AACA;EACA,EAAE,aAAa,GAAGD,iBAAY,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACjD;EACA,EAAE,IAAI,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;EACtC,EAAE,IAAI,SAAS,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AACpC;EACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,EAAE,CAAC,EAAE,aAAa,IAAIhB,qBAAU,CAAC,YAAY,EAAE;EAC7E,IAAI,SAAS,CAAC,CAAC,CAAC,GAAGA,qBAAU,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;EAC3D,GAAG;AACH;EACA,EAAE,IAAI,SAAS,GAAGkB,oBAAS,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;EAC3E,EAAE,aAAa,IAAIA,oBAAS,CAAC,YAAY,CAAC;AAC1C;EACA,EAAE,IAAI,YAAY,GAAGV,yBAAY,CAAC,MAAM;EACxC,IAAI,KAAK;EACT,IAAI,aAAa;EACjB,IAAI,mBAAmB;EACvB,GAAG,CAAC;EACJ,EAAE,aAAa,IAAIA,yBAAY,CAAC,YAAY,CAAC;AAC7C;EACA,EAAE,IAAI,KAAK,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;EACrC,EAAE,IAAI,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;EACtC,EAAE,IAAI,cAAc,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;EAC9C,EAAE,IAAI,UAAU,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;EAC1C,EAAE,IAAI,WAAW,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC;EAC3C,EAAE,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,KAAK,GAAG,CAAC;EACpD,EAAE,IAAI,eAAe,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AAC7C;EACA,EAAE,IAAI,CAACL,YAAO,CAAC,MAAM,CAAC,EAAE;EACxB,IAAI,cAAc,CAAC,SAAS,GAAG,SAAS,CAAC;EACzC,IAAI,cAAc,CAAC,KAAK,GAAG,KAAK,CAAC;EACjC,IAAI,cAAc,CAAC,MAAM,GAAG,MAAM,CAAC;EACnC,IAAI,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC;EACnD,IAAI,cAAc,CAAC,UAAU,GAAG,UAAU,CAAC;EAC3C,IAAI,cAAc,CAAC,WAAW,GAAG,WAAW,CAAC;EAC7C,IAAI,cAAc,CAAC,YAAY,GAAG,YAAY,CAAC;EAC/C,IAAI,cAAc,CAAC,eAAe;EAClC,MAAM,eAAe,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,eAAe,CAAC;AAC3D;EACA,IAAI,OAAO,IAAI,gBAAgB,CAAC,cAAc,CAAC,CAAC;EAChD,GAAG;AACH;EACA,EAAE,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC;EAChC,EAAE,MAAM,CAAC,UAAU,GAAGe,oBAAS,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;EACpE,EAAE,MAAM,CAAC,aAAa,GAAGV,yBAAY,CAAC,KAAK,CAAC,YAAY,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;EAChF,EAAE,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;EACxB,EAAE,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC;EAC1B,EAAE,MAAM,CAAC,eAAe,GAAG,cAAc,CAAC;EAC1C,EAAE,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;EAClC,EAAE,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;EACpC,EAAE,MAAM,CAAC,aAAa,GAAG,YAAY,CAAC;EACtC,EAAE,MAAM,CAAC,gBAAgB;EACzB,IAAI,eAAe,KAAK,CAAC,CAAC,GAAG,SAAS,GAAG,eAAe,CAAC;AACzD;EACA,EAAE,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,gBAAgB,CAAC,gBAAgB,GAAG,UAAU,OAAO,EAAE,MAAM,EAAE;EAC/D,EAAE,OAAO,GAAGQ,iBAAY,CAAC,OAAO,EAAEA,iBAAY,CAAC,YAAY,CAAC,CAAC;EAC7D,EAAE,IAAI,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;EACpC,EAAE,IAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;AAC5B;EACA;EACA,EAAEC,WAAK,CAAC,OAAO,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;EAChD,EAAEA,WAAK,CAAC,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;EACxC;AACA;EACA,EAAE,IAAI,SAAS,GAAGD,iBAAY,CAAC,OAAO,CAAC,SAAS,EAAEE,oBAAS,CAAC,KAAK,CAAC,CAAC;EACnE,EAAE,IAAI,UAAU,GAAGF,iBAAY,CAAC,OAAO,CAAC,UAAU,EAAED,wCAAU,CAAC,OAAO,CAAC,CAAC;AACxE;EACA,EAAE,OAAO,gBAAgB,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;EAC3E,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA,gBAAgB,CAAC,cAAc,GAAG,UAAU,gBAAgB,EAAE;EAC9D,EAAE,IAAI,SAAS,GAAG,gBAAgB,CAAC,UAAU,CAAC;EAC9C,EAAE,IAAI,KAAK,GAAG,gBAAgB,CAAC,MAAM,CAAC;EACtC,EAAE,IAAI,SAAS,GAAG,gBAAgB,CAAC,UAAU,CAAC;AAC9C;EACA,EAAE,SAAS,GAAG,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;EACnD,EAAE,IAAI,cAAc,GAAGF,2CAAqB;EAC5C,IAAI,SAAS;EACb,IAAIb,qBAAU,CAAC,aAAa;EAC5B,GAAG,CAAC;AACJ;EACA,EAAE,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;EAC/C,IAAI,OAAO;EACX,GAAG;AACH;EACA,EAAE,IAAI,MAAM,GAAG,gBAAgB,CAAC,OAAO,CAAC;EACxC,EAAE,IAAI,cAAc,GAAG,gBAAgB,CAAC,eAAe,CAAC;EACxD,EAAE,IAAI,OAAO,GAAG,CAACO,gBAAU,CAAC,aAAa;EACzC,IAAI,MAAM;EACV,IAAI,cAAc;EAClB,IAAI,CAAC;EACL,IAAIA,gBAAU,CAAC,QAAQ;EACvB,GAAG,CAAC;AACJ;EACA,EAAE,IAAI,YAAY,GAAG,gBAAgB,CAAC,aAAa,CAAC;EACpD,EAAE,IAAI,MAAM,GAAG;EACf,IAAI,SAAS,EAAE,SAAS;EACxB,IAAI,SAAS,EAAE,cAAc;EAC7B,IAAI,KAAK,EAAE,KAAK;EAChB,IAAI,UAAU,EAAE,gBAAgB,CAAC,WAAW;EAC5C,IAAI,WAAW,EAAE,gBAAgB,CAAC,YAAY;EAC9C,IAAI,cAAc,EAAE,IAAI;EACxB,GAAG,CAAC;EACJ,EAAE,IAAI,IAAI,CAAC;EACX,EAAE,IAAI,OAAO,EAAE;EACf,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;EAC3B,IAAI,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;EAC3C,IAAI,MAAM,CAAC,YAAY,GAAG,gBAAgB,CAAC,aAAa,CAAC;EACzD,IAAI,MAAM,CAAC,eAAe,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;EAC/D,IAAI,IAAI,GAAG,wBAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;EAC1D,GAAG,MAAM;EACT,IAAI,IAAI,iBAAiB,GAAGN,+CAAuB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;EAC7E,IAAI,IAAI,GAAG,OAAO,CAAC,iBAAiB,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;EAC/D,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAGQ,+BAAe,CAAC,qBAAqB;EAC3E,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM;EACrC,MAAM,MAAM;EACZ,MAAM,SAAS;EACf,KAAK,CAAC;AACN;EACA,IAAI,IAAIN,YAAO,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,EAAE;EACpD,MAAM,IAAI,gBAAgB;EAC1B,QAAQ,gBAAgB,CAAC,gBAAgB,KAAKO,+CAAuB,CAAC,IAAI;EAC1E,YAAY,CAAC;EACb,YAAY,CAAC,CAAC;EACd,MAAM,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC;EAC1D,MAAM,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;EACnD,MAAMC,iCAAS,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;EAC/C,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAIN,mCAAiB,CAAC;EAC1D,QAAQ,iBAAiB,EAAEC,mCAAiB,CAAC,aAAa;EAC1D,QAAQ,sBAAsB,EAAE,CAAC;EACjC,QAAQ,MAAM,EAAE,WAAW;EAC3B,OAAO,CAAC,CAAC;EACT,KAAK;EACL,GAAG;EACH,EAAE,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;EACnC,EAAE,IAAI,cAAc,GAAGa,yBAAc,CAAC,YAAY;EAClD,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM;EAC9B,IAAI,SAAS;EACb,IAAI,CAAC;EACL,GAAG,CAAC;EACJ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;EAC9B,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,SAAS,CAAC;EAChD,GAAG;AACH;EACA,EAAE,OAAO,IAAIC,0BAAQ,CAAC;EACtB,IAAI,UAAU,EAAE,UAAU;EAC1B,IAAI,OAAO,EAAE,IAAI,CAAC,OAAO;EACzB,IAAI,aAAa,EAAEC,+BAAa,CAAC,SAAS;EAC1C,IAAI,cAAc,EAAE,cAAc;EAClC,IAAI,eAAe,EAAE,gBAAgB,CAAC,gBAAgB;EACtD,GAAG,CAAC,CAAC;EACL,CAAC,CAAC;AACF;EACA;EACA;EACA;EACA,gBAAgB,CAAC,kBAAkB,GAAG;EACtC,EAAE,gBAAgB;EAClB,EAAE,aAAa;EACf,EAAE,aAAa;EACf,EAAE;EACF,EAAE,IAAI,WAAW,GAAG,gBAAgB,CAAC,YAAY,CAAC;EAClD,EAAE,IAAI,SAAS,GAAG,gBAAgB,CAAC,UAAU,CAAC;AAC9C;EACA,EAAE,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;EACxD,EAAE,IAAI,SAAS,GAAG,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AACxD;EACA,EAAE,OAAO,IAAI,gBAAgB,CAAC;EAC9B,IAAI,SAAS,EAAE,gBAAgB,CAAC,UAAU;EAC1C,IAAI,KAAK,EAAE,gBAAgB,CAAC,MAAM;EAClC,IAAI,UAAU,EAAE,gBAAgB,CAAC,WAAW;EAC5C,IAAI,SAAS,EAAE,SAAS;EACxB,IAAI,WAAW,EAAE,WAAW;EAC5B,IAAI,cAAc,EAAE,SAAS;EAC7B,IAAI,MAAM,EAAE,SAAS;EACrB,IAAI,YAAY,EAAEb,yBAAY,CAAC,aAAa;EAC5C,IAAI,YAAY,EAAE,IAAI;EACtB,GAAG,CAAC,CAAC;EACL,CAAC,CAAC;AACF;EACA,MAAM,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,EAAE;EACpD;EACA;EACA;EACA,EAAE,SAAS,EAAE;EACb,IAAI,GAAG,EAAE,YAAY;EACrB,MAAM,IAAI,CAACL,YAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;EACrC,QAAQ,IAAI,CAAC,UAAU,GAAG,gBAAgB;EAC1C,UAAU,IAAI,CAAC,UAAU;EACzB,UAAU,IAAI,CAAC,UAAU;EACzB,UAAU,IAAI,CAAC,MAAM;EACrB,UAAU,IAAI,CAAC,WAAW;EAC1B,SAAS,CAAC;EACV,OAAO;EACP,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;EAC7B,KAAK;EACL,GAAG;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,+BAA+B,EAAE;EACnC,IAAI,GAAG,EAAE,YAAY;EACrB,MAAM,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC,KAAK;EACL,GAAG;EACH,CAAC,CAAC;;ECz3CF,SAAS,sBAAsB,CAAC,gBAAgB,EAAE,MAAM,EAAE;EAC1D,EAAE,IAAIA,YAAO,CAAC,MAAM,CAAC,EAAE;EACvB,IAAI,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;EACzE,GAAG;EACH,EAAE,gBAAgB,CAAC,UAAU,GAAGe,oBAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;EAC7E,EAAE,OAAO,gBAAgB,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;EAC3D;;;;;;;;"}