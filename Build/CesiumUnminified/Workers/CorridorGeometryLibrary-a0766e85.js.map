{"version":3,"file":"CorridorGeometryLibrary-a0766e85.js","sources":["../../../../Source/Core/CorridorGeometryLibrary.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport defined from \"./defined.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport PolylinePipeline from \"./PolylinePipeline.js\";\r\nimport PolylineVolumeGeometryLibrary from \"./PolylineVolumeGeometryLibrary.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\n\r\n/**\r\n * @private\r\n */\r\nvar CorridorGeometryLibrary = {};\r\n\r\nvar scratch1 = new Cartesian3();\r\nvar scratch2 = new Cartesian3();\r\nvar scratch3 = new Cartesian3();\r\nvar scratch4 = new Cartesian3();\r\n\r\nvar scaleArray2 = [new Cartesian3(), new Cartesian3()];\r\n\r\nvar cartesian1 = new Cartesian3();\r\nvar cartesian2 = new Cartesian3();\r\nvar cartesian3 = new Cartesian3();\r\nvar cartesian4 = new Cartesian3();\r\nvar cartesian5 = new Cartesian3();\r\nvar cartesian6 = new Cartesian3();\r\nvar cartesian7 = new Cartesian3();\r\nvar cartesian8 = new Cartesian3();\r\nvar cartesian9 = new Cartesian3();\r\nvar cartesian10 = new Cartesian3();\r\n\r\nvar quaterion = new Quaternion();\r\nvar rotMatrix = new Matrix3();\r\nfunction computeRoundCorner(\r\n  cornerPoint,\r\n  startPoint,\r\n  endPoint,\r\n  cornerType,\r\n  leftIsOutside\r\n) {\r\n  var angle = Cartesian3.angleBetween(\r\n    Cartesian3.subtract(startPoint, cornerPoint, scratch1),\r\n    Cartesian3.subtract(endPoint, cornerPoint, scratch2)\r\n  );\r\n  var granularity =\r\n    cornerType === CornerType.BEVELED\r\n      ? 1\r\n      : Math.ceil(angle / CesiumMath.toRadians(5)) + 1;\r\n\r\n  var size = granularity * 3;\r\n  var array = new Array(size);\r\n\r\n  array[size - 3] = endPoint.x;\r\n  array[size - 2] = endPoint.y;\r\n  array[size - 1] = endPoint.z;\r\n\r\n  var m;\r\n  if (leftIsOutside) {\r\n    m = Matrix3.fromQuaternion(\r\n      Quaternion.fromAxisAngle(\r\n        Cartesian3.negate(cornerPoint, scratch1),\r\n        angle / granularity,\r\n        quaterion\r\n      ),\r\n      rotMatrix\r\n    );\r\n  } else {\r\n    m = Matrix3.fromQuaternion(\r\n      Quaternion.fromAxisAngle(cornerPoint, angle / granularity, quaterion),\r\n      rotMatrix\r\n    );\r\n  }\r\n\r\n  var index = 0;\r\n  startPoint = Cartesian3.clone(startPoint, scratch1);\r\n  for (var i = 0; i < granularity; i++) {\r\n    startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n    array[index++] = startPoint.x;\r\n    array[index++] = startPoint.y;\r\n    array[index++] = startPoint.z;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction addEndCaps(calculatedPositions) {\r\n  var cornerPoint = cartesian1;\r\n  var startPoint = cartesian2;\r\n  var endPoint = cartesian3;\r\n\r\n  var leftEdge = calculatedPositions[1];\r\n  startPoint = Cartesian3.fromArray(\r\n    calculatedPositions[1],\r\n    leftEdge.length - 3,\r\n    startPoint\r\n  );\r\n  endPoint = Cartesian3.fromArray(calculatedPositions[0], 0, endPoint);\r\n  cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\r\n  var firstEndCap = computeRoundCorner(\r\n    cornerPoint,\r\n    startPoint,\r\n    endPoint,\r\n    CornerType.ROUNDED,\r\n    false\r\n  );\r\n\r\n  var length = calculatedPositions.length - 1;\r\n  var rightEdge = calculatedPositions[length - 1];\r\n  leftEdge = calculatedPositions[length];\r\n  startPoint = Cartesian3.fromArray(\r\n    rightEdge,\r\n    rightEdge.length - 3,\r\n    startPoint\r\n  );\r\n  endPoint = Cartesian3.fromArray(leftEdge, 0, endPoint);\r\n  cornerPoint = Cartesian3.midpoint(startPoint, endPoint, cornerPoint);\r\n  var lastEndCap = computeRoundCorner(\r\n    cornerPoint,\r\n    startPoint,\r\n    endPoint,\r\n    CornerType.ROUNDED,\r\n    false\r\n  );\r\n\r\n  return [firstEndCap, lastEndCap];\r\n}\r\n\r\nfunction computeMiteredCorner(\r\n  position,\r\n  leftCornerDirection,\r\n  lastPoint,\r\n  leftIsOutside\r\n) {\r\n  var cornerPoint = scratch1;\r\n  if (leftIsOutside) {\r\n    cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\r\n  } else {\r\n    leftCornerDirection = Cartesian3.negate(\r\n      leftCornerDirection,\r\n      leftCornerDirection\r\n    );\r\n    cornerPoint = Cartesian3.add(position, leftCornerDirection, cornerPoint);\r\n  }\r\n  return [\r\n    cornerPoint.x,\r\n    cornerPoint.y,\r\n    cornerPoint.z,\r\n    lastPoint.x,\r\n    lastPoint.y,\r\n    lastPoint.z,\r\n  ];\r\n}\r\n\r\nfunction addShiftedPositions(positions, left, scalar, calculatedPositions) {\r\n  var rightPositions = new Array(positions.length);\r\n  var leftPositions = new Array(positions.length);\r\n  var scaledLeft = Cartesian3.multiplyByScalar(left, scalar, scratch1);\r\n  var scaledRight = Cartesian3.negate(scaledLeft, scratch2);\r\n  var rightIndex = 0;\r\n  var leftIndex = positions.length - 1;\r\n\r\n  for (var i = 0; i < positions.length; i += 3) {\r\n    var pos = Cartesian3.fromArray(positions, i, scratch3);\r\n    var rightPos = Cartesian3.add(pos, scaledRight, scratch4);\r\n    rightPositions[rightIndex++] = rightPos.x;\r\n    rightPositions[rightIndex++] = rightPos.y;\r\n    rightPositions[rightIndex++] = rightPos.z;\r\n\r\n    var leftPos = Cartesian3.add(pos, scaledLeft, scratch4);\r\n    leftPositions[leftIndex--] = leftPos.z;\r\n    leftPositions[leftIndex--] = leftPos.y;\r\n    leftPositions[leftIndex--] = leftPos.x;\r\n  }\r\n  calculatedPositions.push(rightPositions, leftPositions);\r\n\r\n  return calculatedPositions;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nCorridorGeometryLibrary.addAttribute = function (\r\n  attribute,\r\n  value,\r\n  front,\r\n  back\r\n) {\r\n  var x = value.x;\r\n  var y = value.y;\r\n  var z = value.z;\r\n  if (defined(front)) {\r\n    attribute[front] = x;\r\n    attribute[front + 1] = y;\r\n    attribute[front + 2] = z;\r\n  }\r\n  if (defined(back)) {\r\n    attribute[back] = z;\r\n    attribute[back - 1] = y;\r\n    attribute[back - 2] = x;\r\n  }\r\n};\r\n\r\nvar scratchForwardProjection = new Cartesian3();\r\nvar scratchBackwardProjection = new Cartesian3();\r\n\r\n/**\r\n * @private\r\n */\r\nCorridorGeometryLibrary.computePositions = function (params) {\r\n  var granularity = params.granularity;\r\n  var positions = params.positions;\r\n  var ellipsoid = params.ellipsoid;\r\n  var width = params.width / 2;\r\n  var cornerType = params.cornerType;\r\n  var saveAttributes = params.saveAttributes;\r\n  var normal = cartesian1;\r\n  var forward = cartesian2;\r\n  var backward = cartesian3;\r\n  var left = cartesian4;\r\n  var cornerDirection = cartesian5;\r\n  var startPoint = cartesian6;\r\n  var previousPos = cartesian7;\r\n  var rightPos = cartesian8;\r\n  var leftPos = cartesian9;\r\n  var center = cartesian10;\r\n  var calculatedPositions = [];\r\n  var calculatedLefts = saveAttributes ? [] : undefined;\r\n  var calculatedNormals = saveAttributes ? [] : undefined;\r\n  var position = positions[0]; //add first point\r\n  var nextPosition = positions[1];\r\n\r\n  forward = Cartesian3.normalize(\r\n    Cartesian3.subtract(nextPosition, position, forward),\r\n    forward\r\n  );\r\n  normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n  left = Cartesian3.normalize(Cartesian3.cross(normal, forward, left), left);\r\n  if (saveAttributes) {\r\n    calculatedLefts.push(left.x, left.y, left.z);\r\n    calculatedNormals.push(normal.x, normal.y, normal.z);\r\n  }\r\n  previousPos = Cartesian3.clone(position, previousPos);\r\n  position = nextPosition;\r\n  backward = Cartesian3.negate(forward, backward);\r\n\r\n  var subdividedPositions;\r\n  var corners = [];\r\n  var i;\r\n  var length = positions.length;\r\n  for (i = 1; i < length - 1; i++) {\r\n    // add middle points and corners\r\n    normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n    nextPosition = positions[i + 1];\r\n    forward = Cartesian3.normalize(\r\n      Cartesian3.subtract(nextPosition, position, forward),\r\n      forward\r\n    );\r\n    cornerDirection = Cartesian3.normalize(\r\n      Cartesian3.add(forward, backward, cornerDirection),\r\n      cornerDirection\r\n    );\r\n\r\n    var forwardProjection = Cartesian3.multiplyByScalar(\r\n      normal,\r\n      Cartesian3.dot(forward, normal),\r\n      scratchForwardProjection\r\n    );\r\n    Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n    Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n    var backwardProjection = Cartesian3.multiplyByScalar(\r\n      normal,\r\n      Cartesian3.dot(backward, normal),\r\n      scratchBackwardProjection\r\n    );\r\n    Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n    Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n    var doCorner = !CesiumMath.equalsEpsilon(\r\n      Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)),\r\n      1.0,\r\n      CesiumMath.EPSILON7\r\n    );\r\n\r\n    if (doCorner) {\r\n      cornerDirection = Cartesian3.cross(\r\n        cornerDirection,\r\n        normal,\r\n        cornerDirection\r\n      );\r\n      cornerDirection = Cartesian3.cross(\r\n        normal,\r\n        cornerDirection,\r\n        cornerDirection\r\n      );\r\n      cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n      var scalar =\r\n        width /\r\n        Math.max(\r\n          0.25,\r\n          Cartesian3.magnitude(\r\n            Cartesian3.cross(cornerDirection, backward, scratch1)\r\n          )\r\n        );\r\n      var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(\r\n        forward,\r\n        backward,\r\n        position,\r\n        ellipsoid\r\n      );\r\n      cornerDirection = Cartesian3.multiplyByScalar(\r\n        cornerDirection,\r\n        scalar,\r\n        cornerDirection\r\n      );\r\n      if (leftIsOutside) {\r\n        rightPos = Cartesian3.add(position, cornerDirection, rightPos);\r\n        center = Cartesian3.add(\r\n          rightPos,\r\n          Cartesian3.multiplyByScalar(left, width, center),\r\n          center\r\n        );\r\n        leftPos = Cartesian3.add(\r\n          rightPos,\r\n          Cartesian3.multiplyByScalar(left, width * 2, leftPos),\r\n          leftPos\r\n        );\r\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n        scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n          positions: scaleArray2,\r\n          granularity: granularity,\r\n          ellipsoid: ellipsoid,\r\n        });\r\n        calculatedPositions = addShiftedPositions(\r\n          subdividedPositions,\r\n          left,\r\n          width,\r\n          calculatedPositions\r\n        );\r\n        if (saveAttributes) {\r\n          calculatedLefts.push(left.x, left.y, left.z);\r\n          calculatedNormals.push(normal.x, normal.y, normal.z);\r\n        }\r\n        startPoint = Cartesian3.clone(leftPos, startPoint);\r\n        left = Cartesian3.normalize(\r\n          Cartesian3.cross(normal, forward, left),\r\n          left\r\n        );\r\n        leftPos = Cartesian3.add(\r\n          rightPos,\r\n          Cartesian3.multiplyByScalar(left, width * 2, leftPos),\r\n          leftPos\r\n        );\r\n        previousPos = Cartesian3.add(\r\n          rightPos,\r\n          Cartesian3.multiplyByScalar(left, width, previousPos),\r\n          previousPos\r\n        );\r\n        if (\r\n          cornerType === CornerType.ROUNDED ||\r\n          cornerType === CornerType.BEVELED\r\n        ) {\r\n          corners.push({\r\n            leftPositions: computeRoundCorner(\r\n              rightPos,\r\n              startPoint,\r\n              leftPos,\r\n              cornerType,\r\n              leftIsOutside\r\n            ),\r\n          });\r\n        } else {\r\n          corners.push({\r\n            leftPositions: computeMiteredCorner(\r\n              position,\r\n              Cartesian3.negate(cornerDirection, cornerDirection),\r\n              leftPos,\r\n              leftIsOutside\r\n            ),\r\n          });\r\n        }\r\n      } else {\r\n        leftPos = Cartesian3.add(position, cornerDirection, leftPos);\r\n        center = Cartesian3.add(\r\n          leftPos,\r\n          Cartesian3.negate(\r\n            Cartesian3.multiplyByScalar(left, width, center),\r\n            center\r\n          ),\r\n          center\r\n        );\r\n        rightPos = Cartesian3.add(\r\n          leftPos,\r\n          Cartesian3.negate(\r\n            Cartesian3.multiplyByScalar(left, width * 2, rightPos),\r\n            rightPos\r\n          ),\r\n          rightPos\r\n        );\r\n        scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n        scaleArray2[1] = Cartesian3.clone(center, scaleArray2[1]);\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n          positions: scaleArray2,\r\n          granularity: granularity,\r\n          ellipsoid: ellipsoid,\r\n        });\r\n        calculatedPositions = addShiftedPositions(\r\n          subdividedPositions,\r\n          left,\r\n          width,\r\n          calculatedPositions\r\n        );\r\n        if (saveAttributes) {\r\n          calculatedLefts.push(left.x, left.y, left.z);\r\n          calculatedNormals.push(normal.x, normal.y, normal.z);\r\n        }\r\n        startPoint = Cartesian3.clone(rightPos, startPoint);\r\n        left = Cartesian3.normalize(\r\n          Cartesian3.cross(normal, forward, left),\r\n          left\r\n        );\r\n        rightPos = Cartesian3.add(\r\n          leftPos,\r\n          Cartesian3.negate(\r\n            Cartesian3.multiplyByScalar(left, width * 2, rightPos),\r\n            rightPos\r\n          ),\r\n          rightPos\r\n        );\r\n        previousPos = Cartesian3.add(\r\n          leftPos,\r\n          Cartesian3.negate(\r\n            Cartesian3.multiplyByScalar(left, width, previousPos),\r\n            previousPos\r\n          ),\r\n          previousPos\r\n        );\r\n        if (\r\n          cornerType === CornerType.ROUNDED ||\r\n          cornerType === CornerType.BEVELED\r\n        ) {\r\n          corners.push({\r\n            rightPositions: computeRoundCorner(\r\n              leftPos,\r\n              startPoint,\r\n              rightPos,\r\n              cornerType,\r\n              leftIsOutside\r\n            ),\r\n          });\r\n        } else {\r\n          corners.push({\r\n            rightPositions: computeMiteredCorner(\r\n              position,\r\n              cornerDirection,\r\n              rightPos,\r\n              leftIsOutside\r\n            ),\r\n          });\r\n        }\r\n      }\r\n      backward = Cartesian3.negate(forward, backward);\r\n    }\r\n    position = nextPosition;\r\n  }\r\n\r\n  normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n  scaleArray2[0] = Cartesian3.clone(previousPos, scaleArray2[0]);\r\n  scaleArray2[1] = Cartesian3.clone(position, scaleArray2[1]);\r\n  subdividedPositions = PolylinePipeline.generateArc({\r\n    positions: scaleArray2,\r\n    granularity: granularity,\r\n    ellipsoid: ellipsoid,\r\n  });\r\n  calculatedPositions = addShiftedPositions(\r\n    subdividedPositions,\r\n    left,\r\n    width,\r\n    calculatedPositions\r\n  );\r\n  if (saveAttributes) {\r\n    calculatedLefts.push(left.x, left.y, left.z);\r\n    calculatedNormals.push(normal.x, normal.y, normal.z);\r\n  }\r\n\r\n  var endPositions;\r\n  if (cornerType === CornerType.ROUNDED) {\r\n    endPositions = addEndCaps(calculatedPositions);\r\n  }\r\n\r\n  return {\r\n    positions: calculatedPositions,\r\n    corners: corners,\r\n    lefts: calculatedLefts,\r\n    normals: calculatedNormals,\r\n    endPositions: endPositions,\r\n  };\r\n};\r\nexport default CorridorGeometryLibrary;\r\n"],"names":["Cartesian3","Quaternion","Matrix3","CornerType","CesiumMath","defined","PolylineVolumeGeometryLibrary","PolylinePipeline"],"mappings":"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"}