{"version":3,"file":"EllipsoidTangentPlane-6385da14.js","sources":["../../../../Source/Core/AxisAlignedBoundingBox.js","../../../../Source/Core/EllipsoidTangentPlane.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport Intersect from \"./Intersect.js\";\r\n\r\n/**\r\n * Creates an instance of an AxisAlignedBoundingBox from the minimum and maximum points along the x, y, and z axes.\r\n * @alias AxisAlignedBoundingBox\r\n * @constructor\r\n *\r\n * @param {Cartesian3} [minimum=Cartesian3.ZERO] The minimum point along the x, y, and z axes.\r\n * @param {Cartesian3} [maximum=Cartesian3.ZERO] The maximum point along the x, y, and z axes.\r\n * @param {Cartesian3} [center] The center of the box; automatically computed if not supplied.\r\n *\r\n * @see BoundingSphere\r\n * @see BoundingRectangle\r\n */\r\nfunction AxisAlignedBoundingBox(minimum, maximum, center) {\r\n  /**\r\n   * The minimum point defining the bounding box.\r\n   * @type {Cartesian3}\r\n   * @default {@link Cartesian3.ZERO}\r\n   */\r\n  this.minimum = Cartesian3.clone(defaultValue(minimum, Cartesian3.ZERO));\r\n\r\n  /**\r\n   * The maximum point defining the bounding box.\r\n   * @type {Cartesian3}\r\n   * @default {@link Cartesian3.ZERO}\r\n   */\r\n  this.maximum = Cartesian3.clone(defaultValue(maximum, Cartesian3.ZERO));\r\n\r\n  //If center was not defined, compute it.\r\n  if (!defined(center)) {\r\n    center = Cartesian3.midpoint(this.minimum, this.maximum, new Cartesian3());\r\n  } else {\r\n    center = Cartesian3.clone(center);\r\n  }\r\n\r\n  /**\r\n   * The center point of the bounding box.\r\n   * @type {Cartesian3}\r\n   */\r\n  this.center = center;\r\n}\r\n\r\n/**\r\n * Computes an instance of an AxisAlignedBoundingBox. The box is determined by\r\n * finding the points spaced the farthest apart on the x, y, and z axes.\r\n *\r\n * @param {Cartesian3[]} positions List of points that the bounding box will enclose.  Each point must have a <code>x</code>, <code>y</code>, and <code>z</code> properties.\r\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\r\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\r\n *\r\n * @example\r\n * // Compute an axis aligned bounding box enclosing two points.\r\n * var box = Cesium.AxisAlignedBoundingBox.fromPoints([new Cesium.Cartesian3(2, 0, 0), new Cesium.Cartesian3(-2, 0, 0)]);\r\n */\r\nAxisAlignedBoundingBox.fromPoints = function (positions, result) {\r\n  if (!defined(result)) {\r\n    result = new AxisAlignedBoundingBox();\r\n  }\r\n\r\n  if (!defined(positions) || positions.length === 0) {\r\n    result.minimum = Cartesian3.clone(Cartesian3.ZERO, result.minimum);\r\n    result.maximum = Cartesian3.clone(Cartesian3.ZERO, result.maximum);\r\n    result.center = Cartesian3.clone(Cartesian3.ZERO, result.center);\r\n    return result;\r\n  }\r\n\r\n  var minimumX = positions[0].x;\r\n  var minimumY = positions[0].y;\r\n  var minimumZ = positions[0].z;\r\n\r\n  var maximumX = positions[0].x;\r\n  var maximumY = positions[0].y;\r\n  var maximumZ = positions[0].z;\r\n\r\n  var length = positions.length;\r\n  for (var i = 1; i < length; i++) {\r\n    var p = positions[i];\r\n    var x = p.x;\r\n    var y = p.y;\r\n    var z = p.z;\r\n\r\n    minimumX = Math.min(x, minimumX);\r\n    maximumX = Math.max(x, maximumX);\r\n    minimumY = Math.min(y, minimumY);\r\n    maximumY = Math.max(y, maximumY);\r\n    minimumZ = Math.min(z, minimumZ);\r\n    maximumZ = Math.max(z, maximumZ);\r\n  }\r\n\r\n  var minimum = result.minimum;\r\n  minimum.x = minimumX;\r\n  minimum.y = minimumY;\r\n  minimum.z = minimumZ;\r\n\r\n  var maximum = result.maximum;\r\n  maximum.x = maximumX;\r\n  maximum.y = maximumY;\r\n  maximum.z = maximumZ;\r\n\r\n  result.center = Cartesian3.midpoint(minimum, maximum, result.center);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Duplicates a AxisAlignedBoundingBox instance.\r\n *\r\n * @param {AxisAlignedBoundingBox} box The bounding box to duplicate.\r\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\r\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if none was provided. (Returns undefined if box is undefined)\r\n */\r\nAxisAlignedBoundingBox.clone = function (box, result) {\r\n  if (!defined(box)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return new AxisAlignedBoundingBox(box.minimum, box.maximum, box.center);\r\n  }\r\n\r\n  result.minimum = Cartesian3.clone(box.minimum, result.minimum);\r\n  result.maximum = Cartesian3.clone(box.maximum, result.maximum);\r\n  result.center = Cartesian3.clone(box.center, result.center);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Compares the provided AxisAlignedBoundingBox componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {AxisAlignedBoundingBox} [left] The first AxisAlignedBoundingBox.\r\n * @param {AxisAlignedBoundingBox} [right] The second AxisAlignedBoundingBox.\r\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n */\r\nAxisAlignedBoundingBox.equals = function (left, right) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      Cartesian3.equals(left.center, right.center) &&\r\n      Cartesian3.equals(left.minimum, right.minimum) &&\r\n      Cartesian3.equals(left.maximum, right.maximum))\r\n  );\r\n};\r\n\r\nvar intersectScratch = new Cartesian3();\r\n/**\r\n * Determines which side of a plane a box is located.\r\n *\r\n * @param {AxisAlignedBoundingBox} box The bounding box to test.\r\n * @param {Plane} plane The plane to test against.\r\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\r\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\r\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\r\n *                      intersects the plane.\r\n */\r\nAxisAlignedBoundingBox.intersectPlane = function (box, plane) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"box\", box);\r\n  Check.defined(\"plane\", plane);\r\n  //>>includeEnd('debug');\r\n\r\n  intersectScratch = Cartesian3.subtract(\r\n    box.maximum,\r\n    box.minimum,\r\n    intersectScratch\r\n  );\r\n  var h = Cartesian3.multiplyByScalar(intersectScratch, 0.5, intersectScratch); //The positive half diagonal\r\n  var normal = plane.normal;\r\n  var e =\r\n    h.x * Math.abs(normal.x) +\r\n    h.y * Math.abs(normal.y) +\r\n    h.z * Math.abs(normal.z);\r\n  var s = Cartesian3.dot(box.center, normal) + plane.distance; //signed distance from center\r\n\r\n  if (s - e > 0) {\r\n    return Intersect.INSIDE;\r\n  }\r\n\r\n  if (s + e < 0) {\r\n    //Not in front because normals point inward\r\n    return Intersect.OUTSIDE;\r\n  }\r\n\r\n  return Intersect.INTERSECTING;\r\n};\r\n\r\n/**\r\n * Duplicates this AxisAlignedBoundingBox instance.\r\n *\r\n * @param {AxisAlignedBoundingBox} [result] The object onto which to store the result.\r\n * @returns {AxisAlignedBoundingBox} The modified result parameter or a new AxisAlignedBoundingBox instance if one was not provided.\r\n */\r\nAxisAlignedBoundingBox.prototype.clone = function (result) {\r\n  return AxisAlignedBoundingBox.clone(this, result);\r\n};\r\n\r\n/**\r\n * Determines which side of a plane this box is located.\r\n *\r\n * @param {Plane} plane The plane to test against.\r\n * @returns {Intersect} {@link Intersect.INSIDE} if the entire box is on the side of the plane\r\n *                      the normal is pointing, {@link Intersect.OUTSIDE} if the entire box is\r\n *                      on the opposite side, and {@link Intersect.INTERSECTING} if the box\r\n *                      intersects the plane.\r\n */\r\nAxisAlignedBoundingBox.prototype.intersectPlane = function (plane) {\r\n  return AxisAlignedBoundingBox.intersectPlane(this, plane);\r\n};\r\n\r\n/**\r\n * Compares this AxisAlignedBoundingBox against the provided AxisAlignedBoundingBox componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {AxisAlignedBoundingBox} [right] The right hand side AxisAlignedBoundingBox.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nAxisAlignedBoundingBox.prototype.equals = function (right) {\r\n  return AxisAlignedBoundingBox.equals(this, right);\r\n};\r\nexport default AxisAlignedBoundingBox;\r\n","import AxisAlignedBoundingBox from \"./AxisAlignedBoundingBox.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartesian4 from \"./Cartesian4.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport IntersectionTests from \"./IntersectionTests.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport Plane from \"./Plane.js\";\r\nimport Ray from \"./Ray.js\";\r\nimport Transforms from \"./Transforms.js\";\r\n\r\nvar scratchCart4 = new Cartesian4();\r\n/**\r\n * A plane tangent to the provided ellipsoid at the provided origin.\r\n * If origin is not on the surface of the ellipsoid, it's surface projection will be used.\r\n * If origin is at the center of the ellipsoid, an exception will be thrown.\r\n * @alias EllipsoidTangentPlane\r\n * @constructor\r\n *\r\n * @param {Cartesian3} origin The point on the surface of the ellipsoid where the tangent plane touches.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n *\r\n * @exception {DeveloperError} origin must not be at the center of the ellipsoid.\r\n */\r\nfunction EllipsoidTangentPlane(origin, ellipsoid) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"origin\", origin);\r\n  //>>includeEnd('debug');\r\n\r\n  ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n  origin = ellipsoid.scaleToGeodeticSurface(origin);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(origin)) {\r\n    throw new DeveloperError(\r\n      \"origin must not be at the center of the ellipsoid.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var eastNorthUp = Transforms.eastNorthUpToFixedFrame(origin, ellipsoid);\r\n  this._ellipsoid = ellipsoid;\r\n  this._origin = origin;\r\n  this._xAxis = Cartesian3.fromCartesian4(\r\n    Matrix4.getColumn(eastNorthUp, 0, scratchCart4)\r\n  );\r\n  this._yAxis = Cartesian3.fromCartesian4(\r\n    Matrix4.getColumn(eastNorthUp, 1, scratchCart4)\r\n  );\r\n\r\n  var normal = Cartesian3.fromCartesian4(\r\n    Matrix4.getColumn(eastNorthUp, 2, scratchCart4)\r\n  );\r\n  this._plane = Plane.fromPointNormal(origin, normal);\r\n}\r\n\r\nObject.defineProperties(EllipsoidTangentPlane.prototype, {\r\n  /**\r\n   * Gets the ellipsoid.\r\n   * @memberof EllipsoidTangentPlane.prototype\r\n   * @type {Ellipsoid}\r\n   */\r\n  ellipsoid: {\r\n    get: function () {\r\n      return this._ellipsoid;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the origin.\r\n   * @memberof EllipsoidTangentPlane.prototype\r\n   * @type {Cartesian3}\r\n   */\r\n  origin: {\r\n    get: function () {\r\n      return this._origin;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the plane which is tangent to the ellipsoid.\r\n   * @memberof EllipsoidTangentPlane.prototype\r\n   * @readonly\r\n   * @type {Plane}\r\n   */\r\n  plane: {\r\n    get: function () {\r\n      return this._plane;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the local X-axis (east) of the tangent plane.\r\n   * @memberof EllipsoidTangentPlane.prototype\r\n   * @readonly\r\n   * @type {Cartesian3}\r\n   */\r\n  xAxis: {\r\n    get: function () {\r\n      return this._xAxis;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the local Y-axis (north) of the tangent plane.\r\n   * @memberof EllipsoidTangentPlane.prototype\r\n   * @readonly\r\n   * @type {Cartesian3}\r\n   */\r\n  yAxis: {\r\n    get: function () {\r\n      return this._yAxis;\r\n    },\r\n  },\r\n\r\n  /**\r\n   * Gets the local Z-axis (up) of the tangent plane.\r\n   * @memberof EllipsoidTangentPlane.prototype\r\n   * @readonly\r\n   * @type {Cartesian3}\r\n   */\r\n  zAxis: {\r\n    get: function () {\r\n      return this._plane.normal;\r\n    },\r\n  },\r\n});\r\n\r\nvar tmp = new AxisAlignedBoundingBox();\r\n/**\r\n * Creates a new instance from the provided ellipsoid and the center\r\n * point of the provided Cartesians.\r\n *\r\n * @param {Cartesian3[]} cartesians The list of positions surrounding the center point.\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid to use.\r\n * @returns {EllipsoidTangentPlane} The new instance of EllipsoidTangentPlane.\r\n */\r\nEllipsoidTangentPlane.fromPoints = function (cartesians, ellipsoid) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesians\", cartesians);\r\n  //>>includeEnd('debug');\r\n\r\n  var box = AxisAlignedBoundingBox.fromPoints(cartesians, tmp);\r\n  return new EllipsoidTangentPlane(box.center, ellipsoid);\r\n};\r\n\r\nvar scratchProjectPointOntoPlaneRay = new Ray();\r\nvar scratchProjectPointOntoPlaneCartesian3 = new Cartesian3();\r\n\r\n/**\r\n * Computes the projection of the provided 3D position onto the 2D plane, radially outward from the {@link EllipsoidTangentPlane.ellipsoid} coordinate system origin.\r\n *\r\n * @param {Cartesian3} cartesian The point to project.\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided. Undefined if there is no intersection point\r\n */\r\nEllipsoidTangentPlane.prototype.projectPointOntoPlane = function (\r\n  cartesian,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  var ray = scratchProjectPointOntoPlaneRay;\r\n  ray.origin = cartesian;\r\n  Cartesian3.normalize(cartesian, ray.direction);\r\n\r\n  var intersectionPoint = IntersectionTests.rayPlane(\r\n    ray,\r\n    this._plane,\r\n    scratchProjectPointOntoPlaneCartesian3\r\n  );\r\n  if (!defined(intersectionPoint)) {\r\n    Cartesian3.negate(ray.direction, ray.direction);\r\n    intersectionPoint = IntersectionTests.rayPlane(\r\n      ray,\r\n      this._plane,\r\n      scratchProjectPointOntoPlaneCartesian3\r\n    );\r\n  }\r\n\r\n  if (defined(intersectionPoint)) {\r\n    var v = Cartesian3.subtract(\r\n      intersectionPoint,\r\n      this._origin,\r\n      intersectionPoint\r\n    );\r\n    var x = Cartesian3.dot(this._xAxis, v);\r\n    var y = Cartesian3.dot(this._yAxis, v);\r\n\r\n    if (!defined(result)) {\r\n      return new Cartesian2(x, y);\r\n    }\r\n    result.x = x;\r\n    result.y = y;\r\n    return result;\r\n  }\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * Computes the projection of the provided 3D positions onto the 2D plane (where possible), radially outward from the global origin.\r\n * The resulting array may be shorter than the input array - if a single projection is impossible it will not be included.\r\n *\r\n * @see EllipsoidTangentPlane.projectPointOntoPlane\r\n *\r\n * @param {Cartesian3[]} cartesians The array of points to project.\r\n * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\r\n * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided.\r\n */\r\nEllipsoidTangentPlane.prototype.projectPointsOntoPlane = function (\r\n  cartesians,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesians\", cartesians);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = [];\r\n  }\r\n\r\n  var count = 0;\r\n  var length = cartesians.length;\r\n  for (var i = 0; i < length; i++) {\r\n    var p = this.projectPointOntoPlane(cartesians[i], result[count]);\r\n    if (defined(p)) {\r\n      result[count] = p;\r\n      count++;\r\n    }\r\n  }\r\n  result.length = count;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the projection of the provided 3D position onto the 2D plane, along the plane normal.\r\n *\r\n * @param {Cartesian3} cartesian The point to project.\r\n * @param {Cartesian2} [result] The object onto which to store the result.\r\n * @returns {Cartesian2} The modified result parameter or a new Cartesian2 instance if none was provided.\r\n */\r\nEllipsoidTangentPlane.prototype.projectPointToNearestOnPlane = function (\r\n  cartesian,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian2();\r\n  }\r\n\r\n  var ray = scratchProjectPointOntoPlaneRay;\r\n  ray.origin = cartesian;\r\n  Cartesian3.clone(this._plane.normal, ray.direction);\r\n\r\n  var intersectionPoint = IntersectionTests.rayPlane(\r\n    ray,\r\n    this._plane,\r\n    scratchProjectPointOntoPlaneCartesian3\r\n  );\r\n  if (!defined(intersectionPoint)) {\r\n    Cartesian3.negate(ray.direction, ray.direction);\r\n    intersectionPoint = IntersectionTests.rayPlane(\r\n      ray,\r\n      this._plane,\r\n      scratchProjectPointOntoPlaneCartesian3\r\n    );\r\n  }\r\n\r\n  var v = Cartesian3.subtract(\r\n    intersectionPoint,\r\n    this._origin,\r\n    intersectionPoint\r\n  );\r\n  var x = Cartesian3.dot(this._xAxis, v);\r\n  var y = Cartesian3.dot(this._yAxis, v);\r\n\r\n  result.x = x;\r\n  result.y = y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the projection of the provided 3D positions onto the 2D plane, along the plane normal.\r\n *\r\n * @see EllipsoidTangentPlane.projectPointToNearestOnPlane\r\n *\r\n * @param {Cartesian3[]} cartesians The array of points to project.\r\n * @param {Cartesian2[]} [result] The array of Cartesian2 instances onto which to store results.\r\n * @returns {Cartesian2[]} The modified result parameter or a new array of Cartesian2 instances if none was provided. This will have the same length as <code>cartesians</code>.\r\n */\r\nEllipsoidTangentPlane.prototype.projectPointsToNearestOnPlane = function (\r\n  cartesians,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesians\", cartesians);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = [];\r\n  }\r\n\r\n  var length = cartesians.length;\r\n  result.length = length;\r\n  for (var i = 0; i < length; i++) {\r\n    result[i] = this.projectPointToNearestOnPlane(cartesians[i], result[i]);\r\n  }\r\n  return result;\r\n};\r\n\r\nvar projectPointsOntoEllipsoidScratch = new Cartesian3();\r\n/**\r\n * Computes the projection of the provided 2D position onto the 3D ellipsoid.\r\n *\r\n * @param {Cartesian2} cartesian The points to project.\r\n * @param {Cartesian3} [result] The Cartesian3 instance to store result.\r\n * @returns {Cartesian3} The modified result parameter or a new Cartesian3 instance if none was provided.\r\n */\r\nEllipsoidTangentPlane.prototype.projectPointOntoEllipsoid = function (\r\n  cartesian,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesian\", cartesian);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new Cartesian3();\r\n  }\r\n\r\n  var ellipsoid = this._ellipsoid;\r\n  var origin = this._origin;\r\n  var xAxis = this._xAxis;\r\n  var yAxis = this._yAxis;\r\n  var tmp = projectPointsOntoEllipsoidScratch;\r\n\r\n  Cartesian3.multiplyByScalar(xAxis, cartesian.x, tmp);\r\n  result = Cartesian3.add(origin, tmp, result);\r\n  Cartesian3.multiplyByScalar(yAxis, cartesian.y, tmp);\r\n  Cartesian3.add(result, tmp, result);\r\n  ellipsoid.scaleToGeocentricSurface(result, result);\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the projection of the provided 2D positions onto the 3D ellipsoid.\r\n *\r\n * @param {Cartesian2[]} cartesians The array of points to project.\r\n * @param {Cartesian3[]} [result] The array of Cartesian3 instances onto which to store results.\r\n * @returns {Cartesian3[]} The modified result parameter or a new array of Cartesian3 instances if none was provided.\r\n */\r\nEllipsoidTangentPlane.prototype.projectPointsOntoEllipsoid = function (\r\n  cartesians,\r\n  result\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"cartesians\", cartesians);\r\n  //>>includeEnd('debug');\r\n\r\n  var length = cartesians.length;\r\n  if (!defined(result)) {\r\n    result = new Array(length);\r\n  } else {\r\n    result.length = length;\r\n  }\r\n\r\n  for (var i = 0; i < length; ++i) {\r\n    result[i] = this.projectPointOntoEllipsoid(cartesians[i], result[i]);\r\n  }\r\n\r\n  return result;\r\n};\r\nexport default EllipsoidTangentPlane;\r\n"],"names":["Cartesian3","defaultValue","defined","Check","Intersect","Cartesian4","Ellipsoid","DeveloperError","Transforms","Matrix4","Plane","Ray","IntersectionTests","Cartesian2"],"mappings":"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"}