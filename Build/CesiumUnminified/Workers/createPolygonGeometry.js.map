{"version":3,"file":"createPolygonGeometry.js","sources":["../../../../Source/Core/PolygonGeometry.js","../../../../Source/WorkersES6/createPolygonGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\r\nimport arrayFill from \"./arrayFill.js\";\r\nimport BoundingRectangle from \"./BoundingRectangle.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport Check from \"./Check.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport EllipsoidGeodesic from \"./EllipsoidGeodesic.js\";\r\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryInstance from \"./GeometryInstance.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport GeometryPipeline from \"./GeometryPipeline.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\r\nimport PolygonPipeline from \"./PolygonPipeline.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\nimport Rectangle from \"./Rectangle.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\nimport WindingOrder from \"./WindingOrder.js\";\r\n\r\nvar scratchCarto1 = new Cartographic();\r\nvar scratchCarto2 = new Cartographic();\r\nfunction adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\r\n  var carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\r\n  var height = carto1.height;\r\n  var p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\r\n  p1Carto.height = height;\r\n  ellipsoid.cartographicToCartesian(p1Carto, p1);\r\n\r\n  var p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\r\n  p2Carto.height = height - 100;\r\n  ellipsoid.cartographicToCartesian(p2Carto, p2);\r\n}\r\n\r\nvar scratchBoundingRectangle = new BoundingRectangle();\r\nvar scratchPosition = new Cartesian3();\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchTangent = new Cartesian3();\r\nvar scratchBitangent = new Cartesian3();\r\nvar p1Scratch = new Cartesian3();\r\nvar p2Scratch = new Cartesian3();\r\nvar scratchPerPosNormal = new Cartesian3();\r\nvar scratchPerPosTangent = new Cartesian3();\r\nvar scratchPerPosBitangent = new Cartesian3();\r\n\r\nvar appendTextureCoordinatesOrigin = new Cartesian2();\r\nvar appendTextureCoordinatesCartesian2 = new Cartesian2();\r\nvar appendTextureCoordinatesCartesian3 = new Cartesian3();\r\nvar appendTextureCoordinatesQuaternion = new Quaternion();\r\nvar appendTextureCoordinatesMatrix3 = new Matrix3();\r\nvar tangentMatrixScratch = new Matrix3();\r\n\r\nfunction computeAttributes(options) {\r\n  var vertexFormat = options.vertexFormat;\r\n  var geometry = options.geometry;\r\n  var shadowVolume = options.shadowVolume;\r\n  var flatPositions = geometry.attributes.position.values;\r\n  var length = flatPositions.length;\r\n  var wall = options.wall;\r\n  var top = options.top || wall;\r\n  var bottom = options.bottom || wall;\r\n  if (\r\n    vertexFormat.st ||\r\n    vertexFormat.normal ||\r\n    vertexFormat.tangent ||\r\n    vertexFormat.bitangent ||\r\n    shadowVolume\r\n  ) {\r\n    // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\r\n    // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\r\n    var boundingRectangle = options.boundingRectangle;\r\n    var tangentPlane = options.tangentPlane;\r\n    var ellipsoid = options.ellipsoid;\r\n    var stRotation = options.stRotation;\r\n    var perPositionHeight = options.perPositionHeight;\r\n\r\n    var origin = appendTextureCoordinatesOrigin;\r\n    origin.x = boundingRectangle.x;\r\n    origin.y = boundingRectangle.y;\r\n\r\n    var textureCoordinates = vertexFormat.st\r\n      ? new Float32Array(2 * (length / 3))\r\n      : undefined;\r\n    var normals;\r\n    if (vertexFormat.normal) {\r\n      if (perPositionHeight && top && !wall) {\r\n        normals = geometry.attributes.normal.values;\r\n      } else {\r\n        normals = new Float32Array(length);\r\n      }\r\n    }\r\n    var tangents = vertexFormat.tangent ? new Float32Array(length) : undefined;\r\n    var bitangents = vertexFormat.bitangent\r\n      ? new Float32Array(length)\r\n      : undefined;\r\n    var extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\r\n\r\n    var textureCoordIndex = 0;\r\n    var attrIndex = 0;\r\n\r\n    var normal = scratchNormal;\r\n    var tangent = scratchTangent;\r\n    var bitangent = scratchBitangent;\r\n    var recomputeNormal = true;\r\n\r\n    var textureMatrix = appendTextureCoordinatesMatrix3;\r\n    var tangentRotationMatrix = tangentMatrixScratch;\r\n    if (stRotation !== 0.0) {\r\n      var rotation = Quaternion.fromAxisAngle(\r\n        tangentPlane._plane.normal,\r\n        stRotation,\r\n        appendTextureCoordinatesQuaternion\r\n      );\r\n      textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\r\n\r\n      rotation = Quaternion.fromAxisAngle(\r\n        tangentPlane._plane.normal,\r\n        -stRotation,\r\n        appendTextureCoordinatesQuaternion\r\n      );\r\n      tangentRotationMatrix = Matrix3.fromQuaternion(\r\n        rotation,\r\n        tangentRotationMatrix\r\n      );\r\n    } else {\r\n      textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\r\n      tangentRotationMatrix = Matrix3.clone(\r\n        Matrix3.IDENTITY,\r\n        tangentRotationMatrix\r\n      );\r\n    }\r\n\r\n    var bottomOffset = 0;\r\n    var bottomOffset2 = 0;\r\n\r\n    if (top && bottom) {\r\n      bottomOffset = length / 2;\r\n      bottomOffset2 = length / 3;\r\n\r\n      length /= 2;\r\n    }\r\n\r\n    for (var i = 0; i < length; i += 3) {\r\n      var position = Cartesian3.fromArray(\r\n        flatPositions,\r\n        i,\r\n        appendTextureCoordinatesCartesian3\r\n      );\r\n\r\n      if (vertexFormat.st) {\r\n        var p = Matrix3.multiplyByVector(\r\n          textureMatrix,\r\n          position,\r\n          scratchPosition\r\n        );\r\n        p = ellipsoid.scaleToGeodeticSurface(p, p);\r\n        var st = tangentPlane.projectPointOntoPlane(\r\n          p,\r\n          appendTextureCoordinatesCartesian2\r\n        );\r\n        Cartesian2.subtract(st, origin, st);\r\n\r\n        var stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\r\n        var sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\r\n        if (bottom) {\r\n          textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\r\n          textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;\r\n        }\r\n        if (top) {\r\n          textureCoordinates[textureCoordIndex] = stx;\r\n          textureCoordinates[textureCoordIndex + 1] = sty;\r\n        }\r\n\r\n        textureCoordIndex += 2;\r\n      }\r\n\r\n      if (\r\n        vertexFormat.normal ||\r\n        vertexFormat.tangent ||\r\n        vertexFormat.bitangent ||\r\n        shadowVolume\r\n      ) {\r\n        var attrIndex1 = attrIndex + 1;\r\n        var attrIndex2 = attrIndex + 2;\r\n\r\n        if (wall) {\r\n          if (i + 3 < length) {\r\n            var p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\r\n\r\n            if (recomputeNormal) {\r\n              var p2 = Cartesian3.fromArray(\r\n                flatPositions,\r\n                i + length,\r\n                p2Scratch\r\n              );\r\n              if (perPositionHeight) {\r\n                adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\r\n              }\r\n              Cartesian3.subtract(p1, position, p1);\r\n              Cartesian3.subtract(p2, position, p2);\r\n              normal = Cartesian3.normalize(\r\n                Cartesian3.cross(p2, p1, normal),\r\n                normal\r\n              );\r\n              recomputeNormal = false;\r\n            }\r\n\r\n            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) {\r\n              // if we've reached a corner\r\n              recomputeNormal = true;\r\n            }\r\n          }\r\n\r\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\r\n            if (vertexFormat.tangent) {\r\n              tangent = Cartesian3.normalize(\r\n                Cartesian3.cross(bitangent, normal, tangent),\r\n                tangent\r\n              );\r\n            }\r\n          }\r\n        } else {\r\n          normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\r\n            if (perPositionHeight) {\r\n              scratchPerPosNormal = Cartesian3.fromArray(\r\n                normals,\r\n                attrIndex,\r\n                scratchPerPosNormal\r\n              );\r\n              scratchPerPosTangent = Cartesian3.cross(\r\n                Cartesian3.UNIT_Z,\r\n                scratchPerPosNormal,\r\n                scratchPerPosTangent\r\n              );\r\n              scratchPerPosTangent = Cartesian3.normalize(\r\n                Matrix3.multiplyByVector(\r\n                  tangentRotationMatrix,\r\n                  scratchPerPosTangent,\r\n                  scratchPerPosTangent\r\n                ),\r\n                scratchPerPosTangent\r\n              );\r\n              if (vertexFormat.bitangent) {\r\n                scratchPerPosBitangent = Cartesian3.normalize(\r\n                  Cartesian3.cross(\r\n                    scratchPerPosNormal,\r\n                    scratchPerPosTangent,\r\n                    scratchPerPosBitangent\r\n                  ),\r\n                  scratchPerPosBitangent\r\n                );\r\n              }\r\n            }\r\n\r\n            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\r\n            tangent = Cartesian3.normalize(\r\n              Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent),\r\n              tangent\r\n            );\r\n            if (vertexFormat.bitangent) {\r\n              bitangent = Cartesian3.normalize(\r\n                Cartesian3.cross(normal, tangent, bitangent),\r\n                bitangent\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n          if (options.wall) {\r\n            normals[attrIndex + bottomOffset] = normal.x;\r\n            normals[attrIndex1 + bottomOffset] = normal.y;\r\n            normals[attrIndex2 + bottomOffset] = normal.z;\r\n          } else if (bottom) {\r\n            normals[attrIndex + bottomOffset] = -normal.x;\r\n            normals[attrIndex1 + bottomOffset] = -normal.y;\r\n            normals[attrIndex2 + bottomOffset] = -normal.z;\r\n          }\r\n\r\n          if ((top && !perPositionHeight) || wall) {\r\n            normals[attrIndex] = normal.x;\r\n            normals[attrIndex1] = normal.y;\r\n            normals[attrIndex2] = normal.z;\r\n          }\r\n        }\r\n\r\n        if (shadowVolume) {\r\n          if (wall) {\r\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\r\n          }\r\n          extrudeNormals[attrIndex + bottomOffset] = -normal.x;\r\n          extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\r\n          extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n          if (options.wall) {\r\n            tangents[attrIndex + bottomOffset] = tangent.x;\r\n            tangents[attrIndex1 + bottomOffset] = tangent.y;\r\n            tangents[attrIndex2 + bottomOffset] = tangent.z;\r\n          } else if (bottom) {\r\n            tangents[attrIndex + bottomOffset] = -tangent.x;\r\n            tangents[attrIndex1 + bottomOffset] = -tangent.y;\r\n            tangents[attrIndex2 + bottomOffset] = -tangent.z;\r\n          }\r\n\r\n          if (top) {\r\n            if (perPositionHeight) {\r\n              tangents[attrIndex] = scratchPerPosTangent.x;\r\n              tangents[attrIndex1] = scratchPerPosTangent.y;\r\n              tangents[attrIndex2] = scratchPerPosTangent.z;\r\n            } else {\r\n              tangents[attrIndex] = tangent.x;\r\n              tangents[attrIndex1] = tangent.y;\r\n              tangents[attrIndex2] = tangent.z;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n          if (bottom) {\r\n            bitangents[attrIndex + bottomOffset] = bitangent.x;\r\n            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\r\n            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\r\n          }\r\n          if (top) {\r\n            if (perPositionHeight) {\r\n              bitangents[attrIndex] = scratchPerPosBitangent.x;\r\n              bitangents[attrIndex1] = scratchPerPosBitangent.y;\r\n              bitangents[attrIndex2] = scratchPerPosBitangent.z;\r\n            } else {\r\n              bitangents[attrIndex] = bitangent.x;\r\n              bitangents[attrIndex1] = bitangent.y;\r\n              bitangents[attrIndex2] = bitangent.z;\r\n            }\r\n          }\r\n        }\r\n        attrIndex += 3;\r\n      }\r\n    }\r\n\r\n    if (vertexFormat.st) {\r\n      geometry.attributes.st = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 2,\r\n        values: textureCoordinates,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.normal) {\r\n      geometry.attributes.normal = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: normals,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.tangent) {\r\n      geometry.attributes.tangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: tangents,\r\n      });\r\n    }\r\n\r\n    if (vertexFormat.bitangent) {\r\n      geometry.attributes.bitangent = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: bitangents,\r\n      });\r\n    }\r\n\r\n    if (shadowVolume) {\r\n      geometry.attributes.extrudeDirection = new GeometryAttribute({\r\n        componentDatatype: ComponentDatatype.FLOAT,\r\n        componentsPerAttribute: 3,\r\n        values: extrudeNormals,\r\n      });\r\n    }\r\n  }\r\n\r\n  if (options.extrude && defined(options.offsetAttribute)) {\r\n    var size = flatPositions.length / 3;\r\n    var offsetAttribute = new Uint8Array(size);\r\n\r\n    if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\r\n      if ((top && bottom) || wall) {\r\n        offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\r\n      } else if (top) {\r\n        offsetAttribute = arrayFill(offsetAttribute, 1);\r\n      }\r\n    } else {\r\n      var offsetValue =\r\n        options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\r\n      offsetAttribute = arrayFill(offsetAttribute, offsetValue);\r\n    }\r\n\r\n    geometry.attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: offsetAttribute,\r\n    });\r\n  }\r\n\r\n  return geometry;\r\n}\r\n\r\nvar startCartographicScratch = new Cartographic();\r\nvar endCartographicScratch = new Cartographic();\r\nvar idlCross = {\r\n  westOverIDL: 0.0,\r\n  eastOverIDL: 0.0,\r\n};\r\nvar ellipsoidGeodesic = new EllipsoidGeodesic();\r\nfunction computeRectangle(positions, ellipsoid, arcType, granularity, result) {\r\n  result = defaultValue(result, new Rectangle());\r\n  if (!defined(positions) || positions.length < 3) {\r\n    result.west = 0.0;\r\n    result.north = 0.0;\r\n    result.south = 0.0;\r\n    result.east = 0.0;\r\n    return result;\r\n  }\r\n\r\n  if (arcType === ArcType.RHUMB) {\r\n    return Rectangle.fromCartesianArray(positions, ellipsoid, result);\r\n  }\r\n\r\n  if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\r\n    ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\r\n  }\r\n\r\n  result.west = Number.POSITIVE_INFINITY;\r\n  result.east = Number.NEGATIVE_INFINITY;\r\n  result.south = Number.POSITIVE_INFINITY;\r\n  result.north = Number.NEGATIVE_INFINITY;\r\n\r\n  idlCross.westOverIDL = Number.POSITIVE_INFINITY;\r\n  idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\r\n\r\n  var inverseChordLength =\r\n    1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\r\n  var positionsLength = positions.length;\r\n  var endCartographic = ellipsoid.cartesianToCartographic(\r\n    positions[0],\r\n    endCartographicScratch\r\n  );\r\n  var startCartographic = startCartographicScratch;\r\n  var swap;\r\n\r\n  for (var i = 1; i < positionsLength; i++) {\r\n    swap = startCartographic;\r\n    startCartographic = endCartographic;\r\n    endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\r\n    ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\r\n    interpolateAndGrowRectangle(\r\n      ellipsoidGeodesic,\r\n      inverseChordLength,\r\n      result,\r\n      idlCross\r\n    );\r\n  }\r\n\r\n  swap = startCartographic;\r\n  startCartographic = endCartographic;\r\n  endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\r\n  ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\r\n  interpolateAndGrowRectangle(\r\n    ellipsoidGeodesic,\r\n    inverseChordLength,\r\n    result,\r\n    idlCross\r\n  );\r\n\r\n  if (result.east - result.west > idlCross.eastOverIDL - idlCross.westOverIDL) {\r\n    result.west = idlCross.westOverIDL;\r\n    result.east = idlCross.eastOverIDL;\r\n\r\n    if (result.east > CesiumMath.PI) {\r\n      result.east = result.east - CesiumMath.TWO_PI;\r\n    }\r\n    if (result.west > CesiumMath.PI) {\r\n      result.west = result.west - CesiumMath.TWO_PI;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nvar interpolatedCartographicScratch = new Cartographic();\r\nfunction interpolateAndGrowRectangle(\r\n  ellipsoidGeodesic,\r\n  inverseChordLength,\r\n  result,\r\n  idlCross\r\n) {\r\n  var segmentLength = ellipsoidGeodesic.surfaceDistance;\r\n\r\n  var numPoints = Math.ceil(segmentLength * inverseChordLength);\r\n  var subsegmentDistance =\r\n    numPoints > 0 ? segmentLength / (numPoints - 1) : Number.POSITIVE_INFINITY;\r\n  var interpolationDistance = 0.0;\r\n\r\n  for (var i = 0; i < numPoints; i++) {\r\n    var interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(\r\n      interpolationDistance,\r\n      interpolatedCartographicScratch\r\n    );\r\n    interpolationDistance += subsegmentDistance;\r\n    var longitude = interpolatedCartographic.longitude;\r\n    var latitude = interpolatedCartographic.latitude;\r\n\r\n    result.west = Math.min(result.west, longitude);\r\n    result.east = Math.max(result.east, longitude);\r\n    result.south = Math.min(result.south, latitude);\r\n    result.north = Math.max(result.north, latitude);\r\n\r\n    var lonAdjusted =\r\n      longitude >= 0 ? longitude : longitude + CesiumMath.TWO_PI;\r\n    idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\r\n    idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\r\n  }\r\n}\r\n\r\nvar createGeometryFromPositionsExtrudedPositions = [];\r\n\r\nfunction createGeometryFromPositionsExtruded(\r\n  ellipsoid,\r\n  polygon,\r\n  granularity,\r\n  hierarchy,\r\n  perPositionHeight,\r\n  closeTop,\r\n  closeBottom,\r\n  vertexFormat,\r\n  arcType\r\n) {\r\n  var geos = {\r\n    walls: [],\r\n  };\r\n  var i;\r\n\r\n  if (closeTop || closeBottom) {\r\n    var topGeo = PolygonGeometryLibrary.createGeometryFromPositions(\r\n      ellipsoid,\r\n      polygon,\r\n      granularity,\r\n      perPositionHeight,\r\n      vertexFormat,\r\n      arcType\r\n    );\r\n\r\n    var edgePoints = topGeo.attributes.position.values;\r\n    var indices = topGeo.indices;\r\n    var numPositions;\r\n    var newIndices;\r\n\r\n    if (closeTop && closeBottom) {\r\n      var topBottomPositions = edgePoints.concat(edgePoints);\r\n\r\n      numPositions = topBottomPositions.length / 3;\r\n\r\n      newIndices = IndexDatatype.createTypedArray(\r\n        numPositions,\r\n        indices.length * 2\r\n      );\r\n      newIndices.set(indices);\r\n      var ilength = indices.length;\r\n\r\n      var length = numPositions / 2;\r\n\r\n      for (i = 0; i < ilength; i += 3) {\r\n        var i0 = newIndices[i] + length;\r\n        var i1 = newIndices[i + 1] + length;\r\n        var i2 = newIndices[i + 2] + length;\r\n\r\n        newIndices[i + ilength] = i2;\r\n        newIndices[i + 1 + ilength] = i1;\r\n        newIndices[i + 2 + ilength] = i0;\r\n      }\r\n\r\n      topGeo.attributes.position.values = topBottomPositions;\r\n      if (perPositionHeight && vertexFormat.normal) {\r\n        var normals = topGeo.attributes.normal.values;\r\n        topGeo.attributes.normal.values = new Float32Array(\r\n          topBottomPositions.length\r\n        );\r\n        topGeo.attributes.normal.values.set(normals);\r\n      }\r\n      topGeo.indices = newIndices;\r\n    } else if (closeBottom) {\r\n      numPositions = edgePoints.length / 3;\r\n      newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\r\n\r\n      for (i = 0; i < indices.length; i += 3) {\r\n        newIndices[i] = indices[i + 2];\r\n        newIndices[i + 1] = indices[i + 1];\r\n        newIndices[i + 2] = indices[i];\r\n      }\r\n\r\n      topGeo.indices = newIndices;\r\n    }\r\n\r\n    geos.topAndBottom = new GeometryInstance({\r\n      geometry: topGeo,\r\n    });\r\n  }\r\n\r\n  var outerRing = hierarchy.outerRing;\r\n  var tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\r\n  var positions2D = tangentPlane.projectPointsOntoPlane(\r\n    outerRing,\r\n    createGeometryFromPositionsExtrudedPositions\r\n  );\r\n\r\n  var windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n  if (windingOrder === WindingOrder.CLOCKWISE) {\r\n    outerRing = outerRing.slice().reverse();\r\n  }\r\n\r\n  var wallGeo = PolygonGeometryLibrary.computeWallGeometry(\r\n    outerRing,\r\n    ellipsoid,\r\n    granularity,\r\n    perPositionHeight,\r\n    arcType\r\n  );\r\n  geos.walls.push(\r\n    new GeometryInstance({\r\n      geometry: wallGeo,\r\n    })\r\n  );\r\n\r\n  var holes = hierarchy.holes;\r\n  for (i = 0; i < holes.length; i++) {\r\n    var hole = holes[i];\r\n\r\n    tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\r\n    positions2D = tangentPlane.projectPointsOntoPlane(\r\n      hole,\r\n      createGeometryFromPositionsExtrudedPositions\r\n    );\r\n\r\n    windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\r\n    if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\r\n      hole = hole.slice().reverse();\r\n    }\r\n\r\n    wallGeo = PolygonGeometryLibrary.computeWallGeometry(\r\n      hole,\r\n      ellipsoid,\r\n      granularity,\r\n      perPositionHeight,\r\n      arcType\r\n    );\r\n    geos.walls.push(\r\n      new GeometryInstance({\r\n        geometry: wallGeo,\r\n      })\r\n    );\r\n  }\r\n\r\n  return geos;\r\n}\r\n\r\n/**\r\n * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @alias PolygonGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\r\n * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\r\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n *\r\n * @see PolygonGeometry#createGeometry\r\n * @see PolygonGeometry#fromPositions\r\n *\r\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\r\n *\r\n * @example\r\n * // 1. create a polygon from points\r\n * var polygon = new Cesium.PolygonGeometry({\r\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n *     Cesium.Cartesian3.fromDegreesArray([\r\n *       -72.0, 40.0,\r\n *       -70.0, 35.0,\r\n *       -75.0, 30.0,\r\n *       -70.0, 30.0,\r\n *       -68.0, 40.0\r\n *     ])\r\n *   )\r\n * });\r\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n *\r\n * // 2. create a nested polygon with holes\r\n * var polygonWithHole = new Cesium.PolygonGeometry({\r\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n *     Cesium.Cartesian3.fromDegreesArray([\r\n *       -109.0, 30.0,\r\n *       -95.0, 30.0,\r\n *       -95.0, 40.0,\r\n *       -109.0, 40.0\r\n *     ]),\r\n *     [new Cesium.PolygonHierarchy(\r\n *       Cesium.Cartesian3.fromDegreesArray([\r\n *         -107.0, 31.0,\r\n *         -107.0, 39.0,\r\n *         -97.0, 39.0,\r\n *         -97.0, 31.0\r\n *       ]),\r\n *       [new Cesium.PolygonHierarchy(\r\n *         Cesium.Cartesian3.fromDegreesArray([\r\n *           -105.0, 33.0,\r\n *           -99.0, 33.0,\r\n *           -99.0, 37.0,\r\n *           -105.0, 37.0\r\n *         ]),\r\n *         [new Cesium.PolygonHierarchy(\r\n *           Cesium.Cartesian3.fromDegreesArray([\r\n *             -103.0, 34.0,\r\n *             -101.0, 34.0,\r\n *             -101.0, 36.0,\r\n *             -103.0, 36.0\r\n *           ])\r\n *         )]\r\n *       )]\r\n *     )]\r\n *   )\r\n * });\r\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\r\n *\r\n * // 3. create extruded polygon\r\n * var extrudedPolygon = new Cesium.PolygonGeometry({\r\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\r\n *     Cesium.Cartesian3.fromDegreesArray([\r\n *       -72.0, 40.0,\r\n *       -70.0, 35.0,\r\n *       -75.0, 30.0,\r\n *       -70.0, 30.0,\r\n *       -68.0, 40.0\r\n *     ])\r\n *   ),\r\n *   extrudedHeight: 300000\r\n * });\r\n * var geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\r\n */\r\nfunction PolygonGeometry(options) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"options\", options);\r\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\r\n  if (\r\n    defined(options.perPositionHeight) &&\r\n    options.perPositionHeight &&\r\n    defined(options.height)\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"Cannot use both options.perPositionHeight and options.height\"\r\n    );\r\n  }\r\n  if (\r\n    defined(options.arcType) &&\r\n    options.arcType !== ArcType.GEODESIC &&\r\n    options.arcType !== ArcType.RHUMB\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var polygonHierarchy = options.polygonHierarchy;\r\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n  var granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  var stRotation = defaultValue(options.stRotation, 0.0);\r\n  var perPositionHeight = defaultValue(options.perPositionHeight, false);\r\n  var perPositionHeightExtrude =\r\n    perPositionHeight && defined(options.extrudedHeight);\r\n  var height = defaultValue(options.height, 0.0);\r\n  var extrudedHeight = defaultValue(options.extrudedHeight, height);\r\n\r\n  if (!perPositionHeightExtrude) {\r\n    var h = Math.max(height, extrudedHeight);\r\n    extrudedHeight = Math.min(height, extrudedHeight);\r\n    height = h;\r\n  }\r\n\r\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\r\n  this._granularity = granularity;\r\n  this._stRotation = stRotation;\r\n  this._height = height;\r\n  this._extrudedHeight = extrudedHeight;\r\n  this._closeTop = defaultValue(options.closeTop, true);\r\n  this._closeBottom = defaultValue(options.closeBottom, true);\r\n  this._polygonHierarchy = polygonHierarchy;\r\n  this._perPositionHeight = perPositionHeight;\r\n  this._perPositionHeightExtrude = perPositionHeightExtrude;\r\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\r\n  this._workerName = \"createPolygonGeometry\";\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n\r\n  this._rectangle = undefined;\r\n  this._textureCoordinateRotationPoints = undefined;\r\n\r\n  /**\r\n   * The number of elements used to pack the object into an array.\r\n   * @type {Number}\r\n   */\r\n  this.packedLength =\r\n    PolygonGeometryLibrary.computeHierarchyPackedLength(polygonHierarchy) +\r\n    Ellipsoid.packedLength +\r\n    VertexFormat.packedLength +\r\n    12;\r\n}\r\n\r\n/**\r\n * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\r\n * @param {Number} [options.height=0.0] The height of the polygon.\r\n * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\r\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\r\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\r\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n * @returns {PolygonGeometry}\r\n *\r\n *\r\n * @example\r\n * // create a polygon from points\r\n * var polygon = Cesium.PolygonGeometry.fromPositions({\r\n *   positions : Cesium.Cartesian3.fromDegreesArray([\r\n *     -72.0, 40.0,\r\n *     -70.0, 35.0,\r\n *     -75.0, 30.0,\r\n *     -70.0, 30.0,\r\n *     -68.0, 40.0\r\n *   ])\r\n * });\r\n * var geometry = Cesium.PolygonGeometry.createGeometry(polygon);\r\n *\r\n * @see PolygonGeometry#createGeometry\r\n */\r\nPolygonGeometry.fromPositions = function (options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"options.positions\", options.positions);\r\n  //>>includeEnd('debug');\r\n\r\n  var newOptions = {\r\n    polygonHierarchy: {\r\n      positions: options.positions,\r\n    },\r\n    height: options.height,\r\n    extrudedHeight: options.extrudedHeight,\r\n    vertexFormat: options.vertexFormat,\r\n    stRotation: options.stRotation,\r\n    ellipsoid: options.ellipsoid,\r\n    granularity: options.granularity,\r\n    perPositionHeight: options.perPositionHeight,\r\n    closeTop: options.closeTop,\r\n    closeBottom: options.closeBottom,\r\n    offsetAttribute: options.offsetAttribute,\r\n    arcType: options.arcType,\r\n  };\r\n  return new PolygonGeometry(newOptions);\r\n};\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {PolygonGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nPolygonGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\r\n    value._polygonHierarchy,\r\n    array,\r\n    startingIndex\r\n  );\r\n\r\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._height;\r\n  array[startingIndex++] = value._extrudedHeight;\r\n  array[startingIndex++] = value._granularity;\r\n  array[startingIndex++] = value._stRotation;\r\n  array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\r\n  array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\r\n  array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\r\n  array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\r\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\r\n  array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\r\n  array[startingIndex++] = value._arcType;\r\n  array[startingIndex] = value.packedLength;\r\n\r\n  return array;\r\n};\r\n\r\nvar scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\r\nvar scratchVertexFormat = new VertexFormat();\r\n\r\n//Only used to avoid inability to default construct.\r\nvar dummyOptions = {\r\n  polygonHierarchy: {},\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {PolygonGeometry} [result] The object into which to store the result.\r\n */\r\nPolygonGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\r\n    array,\r\n    startingIndex\r\n  );\r\n  startingIndex = polygonHierarchy.startingIndex;\r\n  delete polygonHierarchy.startingIndex;\r\n\r\n  var ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\r\n  startingIndex += Ellipsoid.packedLength;\r\n\r\n  var vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  var height = array[startingIndex++];\r\n  var extrudedHeight = array[startingIndex++];\r\n  var granularity = array[startingIndex++];\r\n  var stRotation = array[startingIndex++];\r\n  var perPositionHeightExtrude = array[startingIndex++] === 1.0;\r\n  var perPositionHeight = array[startingIndex++] === 1.0;\r\n  var closeTop = array[startingIndex++] === 1.0;\r\n  var closeBottom = array[startingIndex++] === 1.0;\r\n  var shadowVolume = array[startingIndex++] === 1.0;\r\n  var offsetAttribute = array[startingIndex++];\r\n  var arcType = array[startingIndex++];\r\n  var packedLength = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    result = new PolygonGeometry(dummyOptions);\r\n  }\r\n\r\n  result._polygonHierarchy = polygonHierarchy;\r\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._height = height;\r\n  result._extrudedHeight = extrudedHeight;\r\n  result._granularity = granularity;\r\n  result._stRotation = stRotation;\r\n  result._perPositionHeightExtrude = perPositionHeightExtrude;\r\n  result._perPositionHeight = perPositionHeight;\r\n  result._closeTop = closeTop;\r\n  result._closeBottom = closeBottom;\r\n  result._shadowVolume = shadowVolume;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n  result._arcType = arcType;\r\n  result.packedLength = packedLength;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Returns the bounding rectangle given the provided options\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\r\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\r\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\r\n * @param {Rectangle} [result] An object in which to store the result.\r\n *\r\n * @returns {Rectangle} The result rectangle\r\n */\r\nPolygonGeometry.computeRectangle = function (options, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"options\", options);\r\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\r\n  //>>includeEnd('debug');\r\n\r\n  var granularity = defaultValue(\r\n    options.granularity,\r\n    CesiumMath.RADIANS_PER_DEGREE\r\n  );\r\n  var arcType = defaultValue(options.arcType, ArcType.GEODESIC);\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (arcType !== ArcType.GEODESIC && arcType !== ArcType.RHUMB) {\r\n    throw new DeveloperError(\r\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var polygonHierarchy = options.polygonHierarchy;\r\n  var ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\r\n\r\n  return computeRectangle(\r\n    polygonHierarchy.positions,\r\n    ellipsoid,\r\n    arcType,\r\n    granularity,\r\n    result\r\n  );\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {PolygonGeometry} polygonGeometry A description of the polygon.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nPolygonGeometry.createGeometry = function (polygonGeometry) {\r\n  var vertexFormat = polygonGeometry._vertexFormat;\r\n  var ellipsoid = polygonGeometry._ellipsoid;\r\n  var granularity = polygonGeometry._granularity;\r\n  var stRotation = polygonGeometry._stRotation;\r\n  var polygonHierarchy = polygonGeometry._polygonHierarchy;\r\n  var perPositionHeight = polygonGeometry._perPositionHeight;\r\n  var closeTop = polygonGeometry._closeTop;\r\n  var closeBottom = polygonGeometry._closeBottom;\r\n  var arcType = polygonGeometry._arcType;\r\n\r\n  var outerPositions = polygonHierarchy.positions;\r\n  if (outerPositions.length < 3) {\r\n    return;\r\n  }\r\n\r\n  var tangentPlane = EllipsoidTangentPlane.fromPoints(\r\n    outerPositions,\r\n    ellipsoid\r\n  );\r\n\r\n  var results = PolygonGeometryLibrary.polygonsFromHierarchy(\r\n    polygonHierarchy,\r\n    tangentPlane.projectPointsOntoPlane.bind(tangentPlane),\r\n    !perPositionHeight,\r\n    ellipsoid\r\n  );\r\n\r\n  var hierarchy = results.hierarchy;\r\n  var polygons = results.polygons;\r\n\r\n  if (hierarchy.length === 0) {\r\n    return;\r\n  }\r\n\r\n  outerPositions = hierarchy[0].outerRing;\r\n  var boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\r\n    tangentPlane.plane.normal,\r\n    tangentPlane.projectPointOntoPlane.bind(tangentPlane),\r\n    outerPositions,\r\n    stRotation,\r\n    scratchBoundingRectangle\r\n  );\r\n\r\n  var geometries = [];\r\n\r\n  var height = polygonGeometry._height;\r\n  var extrudedHeight = polygonGeometry._extrudedHeight;\r\n  var extrude =\r\n    polygonGeometry._perPositionHeightExtrude ||\r\n    !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\r\n\r\n  var options = {\r\n    perPositionHeight: perPositionHeight,\r\n    vertexFormat: vertexFormat,\r\n    geometry: undefined,\r\n    tangentPlane: tangentPlane,\r\n    boundingRectangle: boundingRectangle,\r\n    ellipsoid: ellipsoid,\r\n    stRotation: stRotation,\r\n    bottom: false,\r\n    top: true,\r\n    wall: false,\r\n    extrude: false,\r\n    arcType: arcType,\r\n  };\r\n\r\n  var i;\r\n\r\n  if (extrude) {\r\n    options.extrude = true;\r\n    options.top = closeTop;\r\n    options.bottom = closeBottom;\r\n    options.shadowVolume = polygonGeometry._shadowVolume;\r\n    options.offsetAttribute = polygonGeometry._offsetAttribute;\r\n    for (i = 0; i < polygons.length; i++) {\r\n      var splitGeometry = createGeometryFromPositionsExtruded(\r\n        ellipsoid,\r\n        polygons[i],\r\n        granularity,\r\n        hierarchy[i],\r\n        perPositionHeight,\r\n        closeTop,\r\n        closeBottom,\r\n        vertexFormat,\r\n        arcType\r\n      );\r\n\r\n      var topAndBottom;\r\n      if (closeTop && closeBottom) {\r\n        topAndBottom = splitGeometry.topAndBottom;\r\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\r\n          topAndBottom.geometry,\r\n          height,\r\n          extrudedHeight,\r\n          ellipsoid,\r\n          perPositionHeight\r\n        );\r\n      } else if (closeTop) {\r\n        topAndBottom = splitGeometry.topAndBottom;\r\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\r\n          topAndBottom.geometry.attributes.position.values,\r\n          height,\r\n          ellipsoid,\r\n          !perPositionHeight\r\n        );\r\n        options.geometry = topAndBottom.geometry;\r\n      } else if (closeBottom) {\r\n        topAndBottom = splitGeometry.topAndBottom;\r\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\r\n          topAndBottom.geometry.attributes.position.values,\r\n          extrudedHeight,\r\n          ellipsoid,\r\n          true\r\n        );\r\n        options.geometry = topAndBottom.geometry;\r\n      }\r\n      if (closeTop || closeBottom) {\r\n        options.wall = false;\r\n        topAndBottom.geometry = computeAttributes(options);\r\n        geometries.push(topAndBottom);\r\n      }\r\n\r\n      var walls = splitGeometry.walls;\r\n      options.wall = true;\r\n      for (var k = 0; k < walls.length; k++) {\r\n        var wall = walls[k];\r\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\r\n          wall.geometry,\r\n          height,\r\n          extrudedHeight,\r\n          ellipsoid,\r\n          perPositionHeight\r\n        );\r\n        wall.geometry = computeAttributes(options);\r\n        geometries.push(wall);\r\n      }\r\n    }\r\n  } else {\r\n    for (i = 0; i < polygons.length; i++) {\r\n      var geometryInstance = new GeometryInstance({\r\n        geometry: PolygonGeometryLibrary.createGeometryFromPositions(\r\n          ellipsoid,\r\n          polygons[i],\r\n          granularity,\r\n          perPositionHeight,\r\n          vertexFormat,\r\n          arcType\r\n        ),\r\n      });\r\n      geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\r\n        geometryInstance.geometry.attributes.position.values,\r\n        height,\r\n        ellipsoid,\r\n        !perPositionHeight\r\n      );\r\n      options.geometry = geometryInstance.geometry;\r\n      geometryInstance.geometry = computeAttributes(options);\r\n\r\n      if (defined(polygonGeometry._offsetAttribute)) {\r\n        var length =\r\n          geometryInstance.geometry.attributes.position.values.length;\r\n        var applyOffset = new Uint8Array(length / 3);\r\n        var offsetValue =\r\n          polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\r\n            ? 0\r\n            : 1;\r\n        arrayFill(applyOffset, offsetValue);\r\n        geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute(\r\n          {\r\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n            componentsPerAttribute: 1,\r\n            values: applyOffset,\r\n          }\r\n        );\r\n      }\r\n\r\n      geometries.push(geometryInstance);\r\n    }\r\n  }\r\n\r\n  var geometry = GeometryPipeline.combineInstances(geometries)[0];\r\n  geometry.attributes.position.values = new Float64Array(\r\n    geometry.attributes.position.values\r\n  );\r\n  geometry.indices = IndexDatatype.createTypedArray(\r\n    geometry.attributes.position.values.length / 3,\r\n    geometry.indices\r\n  );\r\n\r\n  var attributes = geometry.attributes;\r\n  var boundingSphere = BoundingSphere.fromVertices(attributes.position.values);\r\n\r\n  if (!vertexFormat.position) {\r\n    delete attributes.position;\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: geometry.indices,\r\n    primitiveType: geometry.primitiveType,\r\n    boundingSphere: boundingSphere,\r\n    offsetAttribute: polygonGeometry._offsetAttribute,\r\n  });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nPolygonGeometry.createShadowVolume = function (\r\n  polygonGeometry,\r\n  minHeightFunc,\r\n  maxHeightFunc\r\n) {\r\n  var granularity = polygonGeometry._granularity;\r\n  var ellipsoid = polygonGeometry._ellipsoid;\r\n\r\n  var minHeight = minHeightFunc(granularity, ellipsoid);\r\n  var maxHeight = maxHeightFunc(granularity, ellipsoid);\r\n\r\n  return new PolygonGeometry({\r\n    polygonHierarchy: polygonGeometry._polygonHierarchy,\r\n    ellipsoid: ellipsoid,\r\n    stRotation: polygonGeometry._stRotation,\r\n    granularity: granularity,\r\n    perPositionHeight: false,\r\n    extrudedHeight: minHeight,\r\n    height: maxHeight,\r\n    vertexFormat: VertexFormat.POSITION_ONLY,\r\n    shadowVolume: true,\r\n    arcType: polygonGeometry._arcType,\r\n  });\r\n};\r\n\r\nfunction textureCoordinateRotationPoints(polygonGeometry) {\r\n  var stRotation = -polygonGeometry._stRotation;\r\n  if (stRotation === 0.0) {\r\n    return [0, 0, 0, 1, 1, 0];\r\n  }\r\n  var ellipsoid = polygonGeometry._ellipsoid;\r\n  var positions = polygonGeometry._polygonHierarchy.positions;\r\n  var boundingRectangle = polygonGeometry.rectangle;\r\n  return Geometry._textureCoordinateRotationPoints(\r\n    positions,\r\n    stRotation,\r\n    ellipsoid,\r\n    boundingRectangle\r\n  );\r\n}\r\n\r\nObject.defineProperties(PolygonGeometry.prototype, {\r\n  /**\r\n   * @private\r\n   */\r\n  rectangle: {\r\n    get: function () {\r\n      if (!defined(this._rectangle)) {\r\n        var positions = this._polygonHierarchy.positions;\r\n        this._rectangle = computeRectangle(\r\n          positions,\r\n          this._ellipsoid,\r\n          this._arcType,\r\n          this._granularity\r\n        );\r\n      }\r\n\r\n      return this._rectangle;\r\n    },\r\n  },\r\n  /**\r\n   * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\r\n   * @private\r\n   */\r\n  textureCoordinateRotationPoints: {\r\n    get: function () {\r\n      if (!defined(this._textureCoordinateRotationPoints)) {\r\n        this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\r\n          this\r\n        );\r\n      }\r\n      return this._textureCoordinateRotationPoints;\r\n    },\r\n  },\r\n});\r\nexport default PolygonGeometry;\r\n","import defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport PolygonGeometry from \"../Core/PolygonGeometry.js\";\r\n\r\nfunction createPolygonGeometry(polygonGeometry, offset) {\r\n  if (defined(offset)) {\r\n    polygonGeometry = PolygonGeometry.unpack(polygonGeometry, offset);\r\n  }\r\n  polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\r\n  return PolygonGeometry.createGeometry(polygonGeometry);\r\n}\r\nexport default createPolygonGeometry;\r\n"],"names":["Cartographic","BoundingRectangle","Cartesian3","Cartesian2","Quaternion","Matrix3","CesiumMath","GeometryAttribute","ComponentDatatype","defined","GeometryOffsetAttribute","arrayFill","EllipsoidGeodesic","defaultValue","Rectangle","ArcType","PolygonGeometryLibrary","IndexDatatype","GeometryInstance","EllipsoidTangentPlane","PolygonPipeline","WindingOrder","Check","DeveloperError","VertexFormat","Ellipsoid","GeometryPipeline","BoundingSphere","Geometry"],"mappings":"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"}