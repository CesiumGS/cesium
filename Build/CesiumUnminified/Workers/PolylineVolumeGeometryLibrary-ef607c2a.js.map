{"version":3,"file":"PolylineVolumeGeometryLibrary-ef607c2a.js","sources":["../../../../Source/Core/CornerType.js","../../../../Source/Core/PolylineVolumeGeometryLibrary.js"],"sourcesContent":["/**\r\n * Style options for corners.\r\n *\r\n * @demo The {@link https://sandcastle.cesium.com/index.html?src=Corridor.html&label=Geometries|Corridor Demo}\r\n * demonstrates the three corner types, as used by {@link CorridorGraphics}.\r\n *\r\n * @enum {Number}\r\n */\r\nvar CornerType = {\r\n  /**\r\n   * <img src=\"Images/CornerTypeRounded.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n   *\r\n   * Corner has a smooth edge.\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  ROUNDED: 0,\r\n\r\n  /**\r\n   * <img src=\"Images/CornerTypeMitered.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n   *\r\n   * Corner point is the intersection of adjacent edges.\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  MITERED: 1,\r\n\r\n  /**\r\n   * <img src=\"Images/CornerTypeBeveled.png\" style=\"vertical-align: middle;\" width=\"186\" height=\"189\" />\r\n   *\r\n   * Corner is clipped.\r\n   * @type {Number}\r\n   * @constant\r\n   */\r\n  BEVELED: 2,\r\n};\r\nexport default Object.freeze(CornerType);\r\n","import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartesian4 from \"./Cartesian4.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport CornerType from \"./CornerType.js\";\r\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport Matrix3 from \"./Matrix3.js\";\r\nimport Matrix4 from \"./Matrix4.js\";\r\nimport PolylinePipeline from \"./PolylinePipeline.js\";\r\nimport Quaternion from \"./Quaternion.js\";\r\nimport Transforms from \"./Transforms.js\";\r\n\r\nvar scratch2Array = [new Cartesian3(), new Cartesian3()];\r\nvar scratchCartesian1 = new Cartesian3();\r\nvar scratchCartesian2 = new Cartesian3();\r\nvar scratchCartesian3 = new Cartesian3();\r\nvar scratchCartesian4 = new Cartesian3();\r\nvar scratchCartesian5 = new Cartesian3();\r\nvar scratchCartesian6 = new Cartesian3();\r\nvar scratchCartesian7 = new Cartesian3();\r\nvar scratchCartesian8 = new Cartesian3();\r\nvar scratchCartesian9 = new Cartesian3();\r\n\r\nvar scratch1 = new Cartesian3();\r\nvar scratch2 = new Cartesian3();\r\n\r\n/**\r\n * @private\r\n */\r\nvar PolylineVolumeGeometryLibrary = {};\r\n\r\nvar cartographic = new Cartographic();\r\nfunction scaleToSurface(positions, ellipsoid) {\r\n  var heights = new Array(positions.length);\r\n  for (var i = 0; i < positions.length; i++) {\r\n    var pos = positions[i];\r\n    cartographic = ellipsoid.cartesianToCartographic(pos, cartographic);\r\n    heights[i] = cartographic.height;\r\n    positions[i] = ellipsoid.scaleToGeodeticSurface(pos, pos);\r\n  }\r\n  return heights;\r\n}\r\n\r\nfunction subdivideHeights(points, h0, h1, granularity) {\r\n  var p0 = points[0];\r\n  var p1 = points[1];\r\n  var angleBetween = Cartesian3.angleBetween(p0, p1);\r\n  var numPoints = Math.ceil(angleBetween / granularity);\r\n  var heights = new Array(numPoints);\r\n  var i;\r\n  if (h0 === h1) {\r\n    for (i = 0; i < numPoints; i++) {\r\n      heights[i] = h0;\r\n    }\r\n    heights.push(h1);\r\n    return heights;\r\n  }\r\n\r\n  var dHeight = h1 - h0;\r\n  var heightPerVertex = dHeight / numPoints;\r\n\r\n  for (i = 1; i < numPoints; i++) {\r\n    var h = h0 + i * heightPerVertex;\r\n    heights[i] = h;\r\n  }\r\n\r\n  heights[0] = h0;\r\n  heights.push(h1);\r\n  return heights;\r\n}\r\n\r\nvar nextScratch = new Cartesian3();\r\nvar prevScratch = new Cartesian3();\r\n\r\nfunction computeRotationAngle(start, end, position, ellipsoid) {\r\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n  var next = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, start, nextScratch),\r\n    nextScratch\r\n  );\r\n  var prev = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, end, prevScratch),\r\n    prevScratch\r\n  );\r\n  var angle = Cartesian2.angleBetween(next, prev);\r\n\r\n  return prev.x * next.y - prev.y * next.x >= 0.0 ? -angle : angle;\r\n}\r\n\r\nvar negativeX = new Cartesian3(-1, 0, 0);\r\nvar transform = new Matrix4();\r\nvar translation = new Matrix4();\r\nvar rotationZ = new Matrix3();\r\nvar scaleMatrix = Matrix3.IDENTITY.clone();\r\nvar westScratch = new Cartesian3();\r\nvar finalPosScratch = new Cartesian4();\r\nvar heightCartesian = new Cartesian3();\r\nfunction addPosition(\r\n  center,\r\n  left,\r\n  shape,\r\n  finalPositions,\r\n  ellipsoid,\r\n  height,\r\n  xScalar,\r\n  repeat\r\n) {\r\n  var west = westScratch;\r\n  var finalPosition = finalPosScratch;\r\n  transform = Transforms.eastNorthUpToFixedFrame(center, ellipsoid, transform);\r\n\r\n  west = Matrix4.multiplyByPointAsVector(transform, negativeX, west);\r\n  west = Cartesian3.normalize(west, west);\r\n  var angle = computeRotationAngle(west, left, center, ellipsoid);\r\n  rotationZ = Matrix3.fromRotationZ(angle, rotationZ);\r\n\r\n  heightCartesian.z = height;\r\n  transform = Matrix4.multiplyTransformation(\r\n    transform,\r\n    Matrix4.fromRotationTranslation(rotationZ, heightCartesian, translation),\r\n    transform\r\n  );\r\n  var scale = scaleMatrix;\r\n  scale[0] = xScalar;\r\n\r\n  for (var j = 0; j < repeat; j++) {\r\n    for (var i = 0; i < shape.length; i += 3) {\r\n      finalPosition = Cartesian3.fromArray(shape, i, finalPosition);\r\n      finalPosition = Matrix3.multiplyByVector(\r\n        scale,\r\n        finalPosition,\r\n        finalPosition\r\n      );\r\n      finalPosition = Matrix4.multiplyByPoint(\r\n        transform,\r\n        finalPosition,\r\n        finalPosition\r\n      );\r\n      finalPositions.push(finalPosition.x, finalPosition.y, finalPosition.z);\r\n    }\r\n  }\r\n\r\n  return finalPositions;\r\n}\r\n\r\nvar centerScratch = new Cartesian3();\r\nfunction addPositions(\r\n  centers,\r\n  left,\r\n  shape,\r\n  finalPositions,\r\n  ellipsoid,\r\n  heights,\r\n  xScalar\r\n) {\r\n  for (var i = 0; i < centers.length; i += 3) {\r\n    var center = Cartesian3.fromArray(centers, i, centerScratch);\r\n    finalPositions = addPosition(\r\n      center,\r\n      left,\r\n      shape,\r\n      finalPositions,\r\n      ellipsoid,\r\n      heights[i / 3],\r\n      xScalar,\r\n      1\r\n    );\r\n  }\r\n  return finalPositions;\r\n}\r\n\r\nfunction convertShapeTo3DDuplicate(shape2D, boundingRectangle) {\r\n  //orientate 2D shape to XZ plane center at (0, 0, 0), duplicate points\r\n  var length = shape2D.length;\r\n  var shape = new Array(length * 6);\r\n  var index = 0;\r\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n  var point = shape2D[0];\r\n  shape[index++] = point.x - xOffset;\r\n  shape[index++] = 0.0;\r\n  shape[index++] = point.y - yOffset;\r\n  for (var i = 1; i < length; i++) {\r\n    point = shape2D[i];\r\n    var x = point.x - xOffset;\r\n    var z = point.y - yOffset;\r\n    shape[index++] = x;\r\n    shape[index++] = 0.0;\r\n    shape[index++] = z;\r\n\r\n    shape[index++] = x;\r\n    shape[index++] = 0.0;\r\n    shape[index++] = z;\r\n  }\r\n  point = shape2D[0];\r\n  shape[index++] = point.x - xOffset;\r\n  shape[index++] = 0.0;\r\n  shape[index++] = point.y - yOffset;\r\n\r\n  return shape;\r\n}\r\n\r\nfunction convertShapeTo3D(shape2D, boundingRectangle) {\r\n  //orientate 2D shape to XZ plane center at (0, 0, 0)\r\n  var length = shape2D.length;\r\n  var shape = new Array(length * 3);\r\n  var index = 0;\r\n  var xOffset = boundingRectangle.x + boundingRectangle.width / 2;\r\n  var yOffset = boundingRectangle.y + boundingRectangle.height / 2;\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    shape[index++] = shape2D[i].x - xOffset;\r\n    shape[index++] = 0;\r\n    shape[index++] = shape2D[i].y - yOffset;\r\n  }\r\n\r\n  return shape;\r\n}\r\n\r\nvar quaterion = new Quaternion();\r\nvar startPointScratch = new Cartesian3();\r\nvar rotMatrix = new Matrix3();\r\nfunction computeRoundCorner(\r\n  pivot,\r\n  startPoint,\r\n  endPoint,\r\n  cornerType,\r\n  leftIsOutside,\r\n  ellipsoid,\r\n  finalPositions,\r\n  shape,\r\n  height,\r\n  duplicatePoints\r\n) {\r\n  var angle = Cartesian3.angleBetween(\r\n    Cartesian3.subtract(startPoint, pivot, scratch1),\r\n    Cartesian3.subtract(endPoint, pivot, scratch2)\r\n  );\r\n  var granularity =\r\n    cornerType === CornerType.BEVELED\r\n      ? 0\r\n      : Math.ceil(angle / CesiumMath.toRadians(5));\r\n\r\n  var m;\r\n  if (leftIsOutside) {\r\n    m = Matrix3.fromQuaternion(\r\n      Quaternion.fromAxisAngle(\r\n        Cartesian3.negate(pivot, scratch1),\r\n        angle / (granularity + 1),\r\n        quaterion\r\n      ),\r\n      rotMatrix\r\n    );\r\n  } else {\r\n    m = Matrix3.fromQuaternion(\r\n      Quaternion.fromAxisAngle(pivot, angle / (granularity + 1), quaterion),\r\n      rotMatrix\r\n    );\r\n  }\r\n\r\n  var left;\r\n  var surfacePoint;\r\n  startPoint = Cartesian3.clone(startPoint, startPointScratch);\r\n  if (granularity > 0) {\r\n    var repeat = duplicatePoints ? 2 : 1;\r\n    for (var i = 0; i < granularity; i++) {\r\n      startPoint = Matrix3.multiplyByVector(m, startPoint, startPoint);\r\n      left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n      left = Cartesian3.normalize(left, left);\r\n      if (!leftIsOutside) {\r\n        left = Cartesian3.negate(left, left);\r\n      }\r\n      surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n      finalPositions = addPosition(\r\n        surfacePoint,\r\n        left,\r\n        shape,\r\n        finalPositions,\r\n        ellipsoid,\r\n        height,\r\n        1,\r\n        repeat\r\n      );\r\n    }\r\n  } else {\r\n    left = Cartesian3.subtract(startPoint, pivot, scratch1);\r\n    left = Cartesian3.normalize(left, left);\r\n    if (!leftIsOutside) {\r\n      left = Cartesian3.negate(left, left);\r\n    }\r\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(startPoint, scratch2);\r\n    finalPositions = addPosition(\r\n      surfacePoint,\r\n      left,\r\n      shape,\r\n      finalPositions,\r\n      ellipsoid,\r\n      height,\r\n      1,\r\n      1\r\n    );\r\n\r\n    endPoint = Cartesian3.clone(endPoint, startPointScratch);\r\n    left = Cartesian3.subtract(endPoint, pivot, scratch1);\r\n    left = Cartesian3.normalize(left, left);\r\n    if (!leftIsOutside) {\r\n      left = Cartesian3.negate(left, left);\r\n    }\r\n    surfacePoint = ellipsoid.scaleToGeodeticSurface(endPoint, scratch2);\r\n    finalPositions = addPosition(\r\n      surfacePoint,\r\n      left,\r\n      shape,\r\n      finalPositions,\r\n      ellipsoid,\r\n      height,\r\n      1,\r\n      1\r\n    );\r\n  }\r\n\r\n  return finalPositions;\r\n}\r\n\r\nPolylineVolumeGeometryLibrary.removeDuplicatesFromShape = function (\r\n  shapePositions\r\n) {\r\n  var length = shapePositions.length;\r\n  var cleanedPositions = [];\r\n  for (var i0 = length - 1, i1 = 0; i1 < length; i0 = i1++) {\r\n    var v0 = shapePositions[i0];\r\n    var v1 = shapePositions[i1];\r\n\r\n    if (!Cartesian2.equals(v0, v1)) {\r\n      cleanedPositions.push(v1); // Shallow copy!\r\n    }\r\n  }\r\n\r\n  return cleanedPositions;\r\n};\r\n\r\nPolylineVolumeGeometryLibrary.angleIsGreaterThanPi = function (\r\n  forward,\r\n  backward,\r\n  position,\r\n  ellipsoid\r\n) {\r\n  var tangentPlane = new EllipsoidTangentPlane(position, ellipsoid);\r\n  var next = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, forward, nextScratch),\r\n    nextScratch\r\n  );\r\n  var prev = tangentPlane.projectPointOntoPlane(\r\n    Cartesian3.add(position, backward, prevScratch),\r\n    prevScratch\r\n  );\r\n\r\n  return prev.x * next.y - prev.y * next.x >= 0.0;\r\n};\r\n\r\nvar scratchForwardProjection = new Cartesian3();\r\nvar scratchBackwardProjection = new Cartesian3();\r\n\r\nPolylineVolumeGeometryLibrary.computePositions = function (\r\n  positions,\r\n  shape2D,\r\n  boundingRectangle,\r\n  geometry,\r\n  duplicatePoints\r\n) {\r\n  var ellipsoid = geometry._ellipsoid;\r\n  var heights = scaleToSurface(positions, ellipsoid);\r\n  var granularity = geometry._granularity;\r\n  var cornerType = geometry._cornerType;\r\n  var shapeForSides = duplicatePoints\r\n    ? convertShapeTo3DDuplicate(shape2D, boundingRectangle)\r\n    : convertShapeTo3D(shape2D, boundingRectangle);\r\n  var shapeForEnds = duplicatePoints\r\n    ? convertShapeTo3D(shape2D, boundingRectangle)\r\n    : undefined;\r\n  var heightOffset = boundingRectangle.height / 2;\r\n  var width = boundingRectangle.width / 2;\r\n  var length = positions.length;\r\n  var finalPositions = [];\r\n  var ends = duplicatePoints ? [] : undefined;\r\n\r\n  var forward = scratchCartesian1;\r\n  var backward = scratchCartesian2;\r\n  var cornerDirection = scratchCartesian3;\r\n  var surfaceNormal = scratchCartesian4;\r\n  var pivot = scratchCartesian5;\r\n  var start = scratchCartesian6;\r\n  var end = scratchCartesian7;\r\n  var left = scratchCartesian8;\r\n  var previousPosition = scratchCartesian9;\r\n\r\n  var position = positions[0];\r\n  var nextPosition = positions[1];\r\n  surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n  forward = Cartesian3.subtract(nextPosition, position, forward);\r\n  forward = Cartesian3.normalize(forward, forward);\r\n  left = Cartesian3.cross(surfaceNormal, forward, left);\r\n  left = Cartesian3.normalize(left, left);\r\n  var h0 = heights[0];\r\n  var h1 = heights[1];\r\n  if (duplicatePoints) {\r\n    ends = addPosition(\r\n      position,\r\n      left,\r\n      shapeForEnds,\r\n      ends,\r\n      ellipsoid,\r\n      h0 + heightOffset,\r\n      1,\r\n      1\r\n    );\r\n  }\r\n  previousPosition = Cartesian3.clone(position, previousPosition);\r\n  position = nextPosition;\r\n  backward = Cartesian3.negate(forward, backward);\r\n  var subdividedHeights;\r\n  var subdividedPositions;\r\n  for (var i = 1; i < length - 1; i++) {\r\n    var repeat = duplicatePoints ? 2 : 1;\r\n    nextPosition = positions[i + 1];\r\n    forward = Cartesian3.subtract(nextPosition, position, forward);\r\n    forward = Cartesian3.normalize(forward, forward);\r\n    cornerDirection = Cartesian3.add(forward, backward, cornerDirection);\r\n    cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n    surfaceNormal = ellipsoid.geodeticSurfaceNormal(position, surfaceNormal);\r\n\r\n    var forwardProjection = Cartesian3.multiplyByScalar(\r\n      surfaceNormal,\r\n      Cartesian3.dot(forward, surfaceNormal),\r\n      scratchForwardProjection\r\n    );\r\n    Cartesian3.subtract(forward, forwardProjection, forwardProjection);\r\n    Cartesian3.normalize(forwardProjection, forwardProjection);\r\n\r\n    var backwardProjection = Cartesian3.multiplyByScalar(\r\n      surfaceNormal,\r\n      Cartesian3.dot(backward, surfaceNormal),\r\n      scratchBackwardProjection\r\n    );\r\n    Cartesian3.subtract(backward, backwardProjection, backwardProjection);\r\n    Cartesian3.normalize(backwardProjection, backwardProjection);\r\n\r\n    var doCorner = !CesiumMath.equalsEpsilon(\r\n      Math.abs(Cartesian3.dot(forwardProjection, backwardProjection)),\r\n      1.0,\r\n      CesiumMath.EPSILON7\r\n    );\r\n\r\n    if (doCorner) {\r\n      cornerDirection = Cartesian3.cross(\r\n        cornerDirection,\r\n        surfaceNormal,\r\n        cornerDirection\r\n      );\r\n      cornerDirection = Cartesian3.cross(\r\n        surfaceNormal,\r\n        cornerDirection,\r\n        cornerDirection\r\n      );\r\n      cornerDirection = Cartesian3.normalize(cornerDirection, cornerDirection);\r\n      var scalar =\r\n        1 /\r\n        Math.max(\r\n          0.25,\r\n          Cartesian3.magnitude(\r\n            Cartesian3.cross(cornerDirection, backward, scratch1)\r\n          )\r\n        );\r\n      var leftIsOutside = PolylineVolumeGeometryLibrary.angleIsGreaterThanPi(\r\n        forward,\r\n        backward,\r\n        position,\r\n        ellipsoid\r\n      );\r\n      if (leftIsOutside) {\r\n        pivot = Cartesian3.add(\r\n          position,\r\n          Cartesian3.multiplyByScalar(\r\n            cornerDirection,\r\n            scalar * width,\r\n            cornerDirection\r\n          ),\r\n          pivot\r\n        );\r\n        start = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, width, start),\r\n          start\r\n        );\r\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n        subdividedHeights = subdivideHeights(\r\n          scratch2Array,\r\n          h0 + heightOffset,\r\n          h1 + heightOffset,\r\n          granularity\r\n        );\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n          positions: scratch2Array,\r\n          granularity: granularity,\r\n          ellipsoid: ellipsoid,\r\n        });\r\n        finalPositions = addPositions(\r\n          subdividedPositions,\r\n          left,\r\n          shapeForSides,\r\n          finalPositions,\r\n          ellipsoid,\r\n          subdividedHeights,\r\n          1\r\n        );\r\n        left = Cartesian3.cross(surfaceNormal, forward, left);\r\n        left = Cartesian3.normalize(left, left);\r\n        end = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, width, end),\r\n          end\r\n        );\r\n        if (\r\n          cornerType === CornerType.ROUNDED ||\r\n          cornerType === CornerType.BEVELED\r\n        ) {\r\n          computeRoundCorner(\r\n            pivot,\r\n            start,\r\n            end,\r\n            cornerType,\r\n            leftIsOutside,\r\n            ellipsoid,\r\n            finalPositions,\r\n            shapeForSides,\r\n            h1 + heightOffset,\r\n            duplicatePoints\r\n          );\r\n        } else {\r\n          cornerDirection = Cartesian3.negate(cornerDirection, cornerDirection);\r\n          finalPositions = addPosition(\r\n            position,\r\n            cornerDirection,\r\n            shapeForSides,\r\n            finalPositions,\r\n            ellipsoid,\r\n            h1 + heightOffset,\r\n            scalar,\r\n            repeat\r\n          );\r\n        }\r\n        previousPosition = Cartesian3.clone(end, previousPosition);\r\n      } else {\r\n        pivot = Cartesian3.add(\r\n          position,\r\n          Cartesian3.multiplyByScalar(\r\n            cornerDirection,\r\n            scalar * width,\r\n            cornerDirection\r\n          ),\r\n          pivot\r\n        );\r\n        start = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, -width, start),\r\n          start\r\n        );\r\n        scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n        scratch2Array[1] = Cartesian3.clone(start, scratch2Array[1]);\r\n        subdividedHeights = subdivideHeights(\r\n          scratch2Array,\r\n          h0 + heightOffset,\r\n          h1 + heightOffset,\r\n          granularity\r\n        );\r\n        subdividedPositions = PolylinePipeline.generateArc({\r\n          positions: scratch2Array,\r\n          granularity: granularity,\r\n          ellipsoid: ellipsoid,\r\n        });\r\n        finalPositions = addPositions(\r\n          subdividedPositions,\r\n          left,\r\n          shapeForSides,\r\n          finalPositions,\r\n          ellipsoid,\r\n          subdividedHeights,\r\n          1\r\n        );\r\n        left = Cartesian3.cross(surfaceNormal, forward, left);\r\n        left = Cartesian3.normalize(left, left);\r\n        end = Cartesian3.add(\r\n          pivot,\r\n          Cartesian3.multiplyByScalar(left, -width, end),\r\n          end\r\n        );\r\n        if (\r\n          cornerType === CornerType.ROUNDED ||\r\n          cornerType === CornerType.BEVELED\r\n        ) {\r\n          computeRoundCorner(\r\n            pivot,\r\n            start,\r\n            end,\r\n            cornerType,\r\n            leftIsOutside,\r\n            ellipsoid,\r\n            finalPositions,\r\n            shapeForSides,\r\n            h1 + heightOffset,\r\n            duplicatePoints\r\n          );\r\n        } else {\r\n          finalPositions = addPosition(\r\n            position,\r\n            cornerDirection,\r\n            shapeForSides,\r\n            finalPositions,\r\n            ellipsoid,\r\n            h1 + heightOffset,\r\n            scalar,\r\n            repeat\r\n          );\r\n        }\r\n        previousPosition = Cartesian3.clone(end, previousPosition);\r\n      }\r\n      backward = Cartesian3.negate(forward, backward);\r\n    } else {\r\n      finalPositions = addPosition(\r\n        previousPosition,\r\n        left,\r\n        shapeForSides,\r\n        finalPositions,\r\n        ellipsoid,\r\n        h0 + heightOffset,\r\n        1,\r\n        1\r\n      );\r\n      previousPosition = position;\r\n    }\r\n    h0 = h1;\r\n    h1 = heights[i + 1];\r\n    position = nextPosition;\r\n  }\r\n\r\n  scratch2Array[0] = Cartesian3.clone(previousPosition, scratch2Array[0]);\r\n  scratch2Array[1] = Cartesian3.clone(position, scratch2Array[1]);\r\n  subdividedHeights = subdivideHeights(\r\n    scratch2Array,\r\n    h0 + heightOffset,\r\n    h1 + heightOffset,\r\n    granularity\r\n  );\r\n  subdividedPositions = PolylinePipeline.generateArc({\r\n    positions: scratch2Array,\r\n    granularity: granularity,\r\n    ellipsoid: ellipsoid,\r\n  });\r\n  finalPositions = addPositions(\r\n    subdividedPositions,\r\n    left,\r\n    shapeForSides,\r\n    finalPositions,\r\n    ellipsoid,\r\n    subdividedHeights,\r\n    1\r\n  );\r\n  if (duplicatePoints) {\r\n    ends = addPosition(\r\n      position,\r\n      left,\r\n      shapeForEnds,\r\n      ends,\r\n      ellipsoid,\r\n      h1 + heightOffset,\r\n      1,\r\n      1\r\n    );\r\n  }\r\n\r\n  length = finalPositions.length;\r\n  var posLength = duplicatePoints ? length + ends.length : length;\r\n  var combinedPositions = new Float64Array(posLength);\r\n  combinedPositions.set(finalPositions);\r\n  if (duplicatePoints) {\r\n    combinedPositions.set(ends, length);\r\n  }\r\n\r\n  return combinedPositions;\r\n};\r\nexport default PolylineVolumeGeometryLibrary;\r\n"],"names":["Cartesian3","Cartographic","EllipsoidTangentPlane","Cartesian2","Matrix4","Matrix3","Cartesian4","Transforms","Quaternion","CornerType","CesiumMath","PolylinePipeline"],"mappings":"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"}