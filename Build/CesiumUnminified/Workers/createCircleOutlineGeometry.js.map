{"version":3,"file":"createCircleOutlineGeometry.js","sources":["../../../../Source/Core/CircleOutlineGeometry.js","../../../../Source/WorkersES6/createCircleOutlineGeometry.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport EllipseOutlineGeometry from \"./EllipseOutlineGeometry.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\n\r\n/**\r\n * A description of the outline of a circle on the ellipsoid.\r\n *\r\n * @alias CircleOutlineGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Cartesian3} options.center The circle's center point in the fixed frame.\r\n * @param {Number} options.radius The radius in meters.\r\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid the circle will be on.\r\n * @param {Number} [options.height=0.0] The distance in meters between the circle and the ellipsoid surface.\r\n * @param {Number} [options.granularity=0.02] The angular distance between points on the circle in radians.\r\n * @param {Number} [options.extrudedHeight=0.0] The distance in meters between the circle's extruded face and the ellipsoid surface.\r\n * @param {Number} [options.numberOfVerticalLines=16] Number of lines to draw between the top and bottom of an extruded circle.\r\n *\r\n * @exception {DeveloperError} radius must be greater than zero.\r\n * @exception {DeveloperError} granularity must be greater than zero.\r\n *\r\n * @see CircleOutlineGeometry.createGeometry\r\n * @see Packable\r\n *\r\n * @example\r\n * // Create a circle.\r\n * var circle = new Cesium.CircleOutlineGeometry({\r\n *   center : Cesium.Cartesian3.fromDegrees(-75.59777, 40.03883),\r\n *   radius : 100000.0\r\n * });\r\n * var geometry = Cesium.CircleOutlineGeometry.createGeometry(circle);\r\n */\r\nfunction CircleOutlineGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n  var radius = options.radius;\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.number(\"radius\", radius);\r\n  //>>includeEnd('debug');\r\n\r\n  var ellipseGeometryOptions = {\r\n    center: options.center,\r\n    semiMajorAxis: radius,\r\n    semiMinorAxis: radius,\r\n    ellipsoid: options.ellipsoid,\r\n    height: options.height,\r\n    extrudedHeight: options.extrudedHeight,\r\n    granularity: options.granularity,\r\n    numberOfVerticalLines: options.numberOfVerticalLines,\r\n  };\r\n  this._ellipseGeometry = new EllipseOutlineGeometry(ellipseGeometryOptions);\r\n  this._workerName = \"createCircleOutlineGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCircleOutlineGeometry.packedLength = EllipseOutlineGeometry.packedLength;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CircleOutlineGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCircleOutlineGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  //>>includeEnd('debug');\r\n  return EllipseOutlineGeometry.pack(\r\n    value._ellipseGeometry,\r\n    array,\r\n    startingIndex\r\n  );\r\n};\r\n\r\nvar scratchEllipseGeometry = new EllipseOutlineGeometry({\r\n  center: new Cartesian3(),\r\n  semiMajorAxis: 1.0,\r\n  semiMinorAxis: 1.0,\r\n});\r\nvar scratchOptions = {\r\n  center: new Cartesian3(),\r\n  radius: undefined,\r\n  ellipsoid: Ellipsoid.clone(Ellipsoid.UNIT_SPHERE),\r\n  height: undefined,\r\n  extrudedHeight: undefined,\r\n  granularity: undefined,\r\n  numberOfVerticalLines: undefined,\r\n  semiMajorAxis: undefined,\r\n  semiMinorAxis: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CircleOutlineGeometry} [result] The object into which to store the result.\r\n * @returns {CircleOutlineGeometry} The modified result parameter or a new CircleOutlineGeometry instance if one was not provided.\r\n */\r\nCircleOutlineGeometry.unpack = function (array, startingIndex, result) {\r\n  var ellipseGeometry = EllipseOutlineGeometry.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchEllipseGeometry\r\n  );\r\n  scratchOptions.center = Cartesian3.clone(\r\n    ellipseGeometry._center,\r\n    scratchOptions.center\r\n  );\r\n  scratchOptions.ellipsoid = Ellipsoid.clone(\r\n    ellipseGeometry._ellipsoid,\r\n    scratchOptions.ellipsoid\r\n  );\r\n  scratchOptions.height = ellipseGeometry._height;\r\n  scratchOptions.extrudedHeight = ellipseGeometry._extrudedHeight;\r\n  scratchOptions.granularity = ellipseGeometry._granularity;\r\n  scratchOptions.numberOfVerticalLines = ellipseGeometry._numberOfVerticalLines;\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.radius = ellipseGeometry._semiMajorAxis;\r\n    return new CircleOutlineGeometry(scratchOptions);\r\n  }\r\n\r\n  scratchOptions.semiMajorAxis = ellipseGeometry._semiMajorAxis;\r\n  scratchOptions.semiMinorAxis = ellipseGeometry._semiMinorAxis;\r\n  result._ellipseGeometry = new EllipseOutlineGeometry(scratchOptions);\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of an outline of a circle on an ellipsoid, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CircleOutlineGeometry} circleGeometry A description of the circle.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCircleOutlineGeometry.createGeometry = function (circleGeometry) {\r\n  return EllipseOutlineGeometry.createGeometry(circleGeometry._ellipseGeometry);\r\n};\r\nexport default CircleOutlineGeometry;\r\n","import Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport CircleOutlineGeometry from \"../Core/CircleOutlineGeometry.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\n\r\nfunction createCircleOutlineGeometry(circleGeometry, offset) {\r\n  if (defined(offset)) {\r\n    circleGeometry = CircleOutlineGeometry.unpack(circleGeometry, offset);\r\n  }\r\n  circleGeometry._ellipseGeometry._center = Cartesian3.clone(\r\n    circleGeometry._ellipseGeometry._center\r\n  );\r\n  circleGeometry._ellipseGeometry._ellipsoid = Ellipsoid.clone(\r\n    circleGeometry._ellipseGeometry._ellipsoid\r\n  );\r\n  return CircleOutlineGeometry.createGeometry(circleGeometry);\r\n}\r\nexport default createCircleOutlineGeometry;\r\n"],"names":["defaultValue","Check","EllipseOutlineGeometry","Cartesian3","Ellipsoid","defined"],"mappings":"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"}