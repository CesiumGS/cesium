{"version":3,"file":"createVerticesFromQuantizedTerrainMesh.js","sources":["../../../../Source/Core/TerrainProvider.js","../../../../Source/WorkersES6/createVerticesFromQuantizedTerrainMesh.js"],"sourcesContent":["import defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\n/**\r\n * Provides terrain or other geometry for the surface of an ellipsoid.  The surface geometry is\r\n * organized into a pyramid of tiles according to a {@link TilingScheme}.  This type describes an\r\n * interface and is not intended to be instantiated directly.\r\n *\r\n * @alias TerrainProvider\r\n * @constructor\r\n *\r\n * @see EllipsoidTerrainProvider\r\n * @see CesiumTerrainProvider\r\n * @see VRTheWorldTerrainProvider\r\n * @see GoogleEarthEnterpriseTerrainProvider\r\n */\r\nfunction TerrainProvider() {\r\n  DeveloperError.throwInstantiationError();\r\n}\r\n\r\nObject.defineProperties(TerrainProvider.prototype, {\r\n  /**\r\n   * Gets an event that is raised when the terrain provider encounters an asynchronous error..  By subscribing\r\n   * to the event, you will be notified of the error and can potentially recover from it.  Event listeners\r\n   * are passed an instance of {@link TileProviderError}.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {Event}\r\n   */\r\n  errorEvent: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n\r\n  /**\r\n   * Gets the credit to display when this terrain provider is active.  Typically this is used to credit\r\n   * the source of the terrain. This function should\r\n   * not be called before {@link TerrainProvider#ready} returns true.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {Credit}\r\n   */\r\n  credit: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n\r\n  /**\r\n   * Gets the tiling scheme used by the provider.  This function should\r\n   * not be called before {@link TerrainProvider#ready} returns true.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {TilingScheme}\r\n   */\r\n  tilingScheme: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n\r\n  /**\r\n   * Gets a value indicating whether or not the provider is ready for use.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {Boolean}\r\n   */\r\n  ready: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n\r\n  /**\r\n   * Gets a promise that resolves to true when the provider is ready for use.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {Promise.<Boolean>}\r\n   * @readonly\r\n   */\r\n  readyPromise: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n\r\n  /**\r\n   * Gets a value indicating whether or not the provider includes a water mask.  The water mask\r\n   * indicates which areas of the globe are water rather than land, so they can be rendered\r\n   * as a reflective surface with animated waves.  This function should not be\r\n   * called before {@link TerrainProvider#ready} returns true.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {Boolean}\r\n   */\r\n  hasWaterMask: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n\r\n  /**\r\n   * Gets a value indicating whether or not the requested tiles include vertex normals.\r\n   * This function should not be called before {@link TerrainProvider#ready} returns true.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {Boolean}\r\n   */\r\n  hasVertexNormals: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n\r\n  /**\r\n   * Gets an object that can be used to determine availability of terrain from this provider, such as\r\n   * at points and in rectangles.  This function should not be called before\r\n   * {@link TerrainProvider#ready} returns true.  This property may be undefined if availability\r\n   * information is not available.\r\n   * @memberof TerrainProvider.prototype\r\n   * @type {TileAvailability}\r\n   */\r\n  availability: {\r\n    get: DeveloperError.throwInstantiationError,\r\n  },\r\n});\r\n\r\nvar regularGridIndicesCache = [];\r\n\r\n/**\r\n * Gets a list of indices for a triangle mesh representing a regular grid.  Calling\r\n * this function multiple times with the same grid width and height returns the\r\n * same list of indices.  The total number of vertices must be less than or equal\r\n * to 65536.\r\n *\r\n * @param {Number} width The number of vertices in the regular grid in the horizontal direction.\r\n * @param {Number} height The number of vertices in the regular grid in the vertical direction.\r\n * @returns {Uint16Array|Uint32Array} The list of indices. Uint16Array gets returned for 64KB or less and Uint32Array for 4GB or less.\r\n */\r\nTerrainProvider.getRegularGridIndices = function (width, height) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n    throw new DeveloperError(\r\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var byWidth = regularGridIndicesCache[width];\r\n  if (!defined(byWidth)) {\r\n    regularGridIndicesCache[width] = byWidth = [];\r\n  }\r\n\r\n  var indices = byWidth[height];\r\n  if (!defined(indices)) {\r\n    if (width * height < CesiumMath.SIXTY_FOUR_KILOBYTES) {\r\n      indices = byWidth[height] = new Uint16Array(\r\n        (width - 1) * (height - 1) * 6\r\n      );\r\n    } else {\r\n      indices = byWidth[height] = new Uint32Array(\r\n        (width - 1) * (height - 1) * 6\r\n      );\r\n    }\r\n    addRegularGridIndices(width, height, indices, 0);\r\n  }\r\n\r\n  return indices;\r\n};\r\n\r\nvar regularGridAndEdgeIndicesCache = [];\r\n\r\n/**\r\n * @private\r\n */\r\nTerrainProvider.getRegularGridIndicesAndEdgeIndices = function (width, height) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n    throw new DeveloperError(\r\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var byWidth = regularGridAndEdgeIndicesCache[width];\r\n  if (!defined(byWidth)) {\r\n    regularGridAndEdgeIndicesCache[width] = byWidth = [];\r\n  }\r\n\r\n  var indicesAndEdges = byWidth[height];\r\n  if (!defined(indicesAndEdges)) {\r\n    var indices = TerrainProvider.getRegularGridIndices(width, height);\r\n\r\n    var edgeIndices = getEdgeIndices(width, height);\r\n    var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n    var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n    var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n    var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n    indicesAndEdges = byWidth[height] = {\r\n      indices: indices,\r\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n      southIndicesEastToWest: southIndicesEastToWest,\r\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n      northIndicesWestToEast: northIndicesWestToEast,\r\n    };\r\n  }\r\n\r\n  return indicesAndEdges;\r\n};\r\n\r\nvar regularGridAndSkirtAndEdgeIndicesCache = [];\r\n\r\n/**\r\n * @private\r\n */\r\nTerrainProvider.getRegularGridAndSkirtIndicesAndEdgeIndices = function (\r\n  width,\r\n  height\r\n) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (width * height >= CesiumMath.FOUR_GIGABYTES) {\r\n    throw new DeveloperError(\r\n      \"The total number of vertices (width * height) must be less than 4,294,967,296.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var byWidth = regularGridAndSkirtAndEdgeIndicesCache[width];\r\n  if (!defined(byWidth)) {\r\n    regularGridAndSkirtAndEdgeIndicesCache[width] = byWidth = [];\r\n  }\r\n\r\n  var indicesAndEdges = byWidth[height];\r\n  if (!defined(indicesAndEdges)) {\r\n    var gridVertexCount = width * height;\r\n    var gridIndexCount = (width - 1) * (height - 1) * 6;\r\n    var edgeVertexCount = width * 2 + height * 2;\r\n    var edgeIndexCount = Math.max(0, edgeVertexCount - 4) * 6;\r\n    var vertexCount = gridVertexCount + edgeVertexCount;\r\n    var indexCount = gridIndexCount + edgeIndexCount;\r\n\r\n    var edgeIndices = getEdgeIndices(width, height);\r\n    var westIndicesSouthToNorth = edgeIndices.westIndicesSouthToNorth;\r\n    var southIndicesEastToWest = edgeIndices.southIndicesEastToWest;\r\n    var eastIndicesNorthToSouth = edgeIndices.eastIndicesNorthToSouth;\r\n    var northIndicesWestToEast = edgeIndices.northIndicesWestToEast;\r\n\r\n    var indices = IndexDatatype.createTypedArray(vertexCount, indexCount);\r\n    addRegularGridIndices(width, height, indices, 0);\r\n    TerrainProvider.addSkirtIndices(\r\n      westIndicesSouthToNorth,\r\n      southIndicesEastToWest,\r\n      eastIndicesNorthToSouth,\r\n      northIndicesWestToEast,\r\n      gridVertexCount,\r\n      indices,\r\n      gridIndexCount\r\n    );\r\n\r\n    indicesAndEdges = byWidth[height] = {\r\n      indices: indices,\r\n      westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n      southIndicesEastToWest: southIndicesEastToWest,\r\n      eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n      northIndicesWestToEast: northIndicesWestToEast,\r\n      indexCountWithoutSkirts: gridIndexCount,\r\n    };\r\n  }\r\n\r\n  return indicesAndEdges;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTerrainProvider.addSkirtIndices = function (\r\n  westIndicesSouthToNorth,\r\n  southIndicesEastToWest,\r\n  eastIndicesNorthToSouth,\r\n  northIndicesWestToEast,\r\n  vertexCount,\r\n  indices,\r\n  offset\r\n) {\r\n  var vertexIndex = vertexCount;\r\n  offset = addSkirtIndices(\r\n    westIndicesSouthToNorth,\r\n    vertexIndex,\r\n    indices,\r\n    offset\r\n  );\r\n  vertexIndex += westIndicesSouthToNorth.length;\r\n  offset = addSkirtIndices(\r\n    southIndicesEastToWest,\r\n    vertexIndex,\r\n    indices,\r\n    offset\r\n  );\r\n  vertexIndex += southIndicesEastToWest.length;\r\n  offset = addSkirtIndices(\r\n    eastIndicesNorthToSouth,\r\n    vertexIndex,\r\n    indices,\r\n    offset\r\n  );\r\n  vertexIndex += eastIndicesNorthToSouth.length;\r\n  addSkirtIndices(northIndicesWestToEast, vertexIndex, indices, offset);\r\n};\r\n\r\nfunction getEdgeIndices(width, height) {\r\n  var westIndicesSouthToNorth = new Array(height);\r\n  var southIndicesEastToWest = new Array(width);\r\n  var eastIndicesNorthToSouth = new Array(height);\r\n  var northIndicesWestToEast = new Array(width);\r\n\r\n  var i;\r\n  for (i = 0; i < width; ++i) {\r\n    northIndicesWestToEast[i] = i;\r\n    southIndicesEastToWest[i] = width * height - 1 - i;\r\n  }\r\n\r\n  for (i = 0; i < height; ++i) {\r\n    eastIndicesNorthToSouth[i] = (i + 1) * width - 1;\r\n    westIndicesSouthToNorth[i] = (height - i - 1) * width;\r\n  }\r\n\r\n  return {\r\n    westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n    southIndicesEastToWest: southIndicesEastToWest,\r\n    eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n    northIndicesWestToEast: northIndicesWestToEast,\r\n  };\r\n}\r\n\r\nfunction addRegularGridIndices(width, height, indices, offset) {\r\n  var index = 0;\r\n  for (var j = 0; j < height - 1; ++j) {\r\n    for (var i = 0; i < width - 1; ++i) {\r\n      var upperLeft = index;\r\n      var lowerLeft = upperLeft + width;\r\n      var lowerRight = lowerLeft + 1;\r\n      var upperRight = upperLeft + 1;\r\n\r\n      indices[offset++] = upperLeft;\r\n      indices[offset++] = lowerLeft;\r\n      indices[offset++] = upperRight;\r\n      indices[offset++] = upperRight;\r\n      indices[offset++] = lowerLeft;\r\n      indices[offset++] = lowerRight;\r\n\r\n      ++index;\r\n    }\r\n    ++index;\r\n  }\r\n}\r\n\r\nfunction addSkirtIndices(edgeIndices, vertexIndex, indices, offset) {\r\n  var previousIndex = edgeIndices[0];\r\n\r\n  var length = edgeIndices.length;\r\n  for (var i = 1; i < length; ++i) {\r\n    var index = edgeIndices[i];\r\n\r\n    indices[offset++] = previousIndex;\r\n    indices[offset++] = index;\r\n    indices[offset++] = vertexIndex;\r\n\r\n    indices[offset++] = vertexIndex;\r\n    indices[offset++] = index;\r\n    indices[offset++] = vertexIndex + 1;\r\n\r\n    previousIndex = index;\r\n    ++vertexIndex;\r\n  }\r\n\r\n  return offset;\r\n}\r\n\r\n/**\r\n * Specifies the quality of terrain created from heightmaps.  A value of 1.0 will\r\n * ensure that adjacent heightmap vertices are separated by no more than\r\n * {@link Globe.maximumScreenSpaceError} screen pixels and will probably go very slowly.\r\n * A value of 0.5 will cut the estimated level zero geometric error in half, allowing twice the\r\n * screen pixels between adjacent heightmap vertices and thus rendering more quickly.\r\n * @type {Number}\r\n */\r\nTerrainProvider.heightmapTerrainQuality = 0.25;\r\n\r\n/**\r\n * Determines an appropriate geometric error estimate when the geometry comes from a heightmap.\r\n *\r\n * @param {Ellipsoid} ellipsoid The ellipsoid to which the terrain is attached.\r\n * @param {Number} tileImageWidth The width, in pixels, of the heightmap associated with a single tile.\r\n * @param {Number} numberOfTilesAtLevelZero The number of tiles in the horizontal direction at tile level zero.\r\n * @returns {Number} An estimated geometric error.\r\n */\r\nTerrainProvider.getEstimatedLevelZeroGeometricErrorForAHeightmap = function (\r\n  ellipsoid,\r\n  tileImageWidth,\r\n  numberOfTilesAtLevelZero\r\n) {\r\n  return (\r\n    (ellipsoid.maximumRadius *\r\n      2 *\r\n      Math.PI *\r\n      TerrainProvider.heightmapTerrainQuality) /\r\n    (tileImageWidth * numberOfTilesAtLevelZero)\r\n  );\r\n};\r\n\r\n/**\r\n * Requests the geometry for a given tile.  This function should not be called before\r\n * {@link TerrainProvider#ready} returns true.  The result must include terrain data and\r\n * may optionally include a water mask and an indication of which child tiles are available.\r\n * @function\r\n *\r\n * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n * @param {Number} level The level of the tile for which to request geometry.\r\n * @param {Request} [request] The request object. Intended for internal use only.\r\n *\r\n * @returns {Promise.<TerrainData>|undefined} A promise for the requested geometry.  If this method\r\n *          returns undefined instead of a promise, it is an indication that too many requests are already\r\n *          pending and the request will be retried later.\r\n */\r\nTerrainProvider.prototype.requestTileGeometry =\r\n  DeveloperError.throwInstantiationError;\r\n\r\n/**\r\n * Gets the maximum geometric error allowed in a tile at a given level.  This function should not be\r\n * called before {@link TerrainProvider#ready} returns true.\r\n * @function\r\n *\r\n * @param {Number} level The tile level for which to get the maximum geometric error.\r\n * @returns {Number} The maximum geometric error.\r\n */\r\nTerrainProvider.prototype.getLevelMaximumGeometricError =\r\n  DeveloperError.throwInstantiationError;\r\n\r\n/**\r\n * Determines whether data for a tile is available to be loaded.\r\n * @function\r\n *\r\n * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n * @param {Number} level The level of the tile for which to request geometry.\r\n * @returns {Boolean} Undefined if not supported by the terrain provider, otherwise true or false.\r\n */\r\nTerrainProvider.prototype.getTileDataAvailable =\r\n  DeveloperError.throwInstantiationError;\r\n\r\n/**\r\n * Makes sure we load availability data for a tile\r\n * @function\r\n *\r\n * @param {Number} x The X coordinate of the tile for which to request geometry.\r\n * @param {Number} y The Y coordinate of the tile for which to request geometry.\r\n * @param {Number} level The level of the tile for which to request geometry.\r\n * @returns {undefined|Promise<void>} Undefined if nothing need to be loaded or a Promise that resolves when all required tiles are loaded\r\n */\r\nTerrainProvider.prototype.loadTileDataAvailability =\r\n  DeveloperError.throwInstantiationError;\r\nexport default TerrainProvider;\r\n","import AttributeCompression from \"../Core/AttributeCompression.js\";\r\nimport AxisAlignedBoundingBox from \"../Core/AxisAlignedBoundingBox.js\";\r\nimport BoundingSphere from \"../Core/BoundingSphere.js\";\r\nimport Cartesian2 from \"../Core/Cartesian2.js\";\r\nimport Cartesian3 from \"../Core/Cartesian3.js\";\r\nimport Cartographic from \"../Core/Cartographic.js\";\r\nimport defined from \"../Core/defined.js\";\r\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\r\nimport EllipsoidalOccluder from \"../Core/EllipsoidalOccluder.js\";\r\nimport IndexDatatype from \"../Core/IndexDatatype.js\";\r\nimport CesiumMath from \"../Core/Math.js\";\r\nimport Matrix4 from \"../Core/Matrix4.js\";\r\nimport OrientedBoundingBox from \"../Core/OrientedBoundingBox.js\";\r\nimport Rectangle from \"../Core/Rectangle.js\";\r\nimport TerrainEncoding from \"../Core/TerrainEncoding.js\";\r\nimport TerrainProvider from \"../Core/TerrainProvider.js\";\r\nimport Transforms from \"../Core/Transforms.js\";\r\nimport WebMercatorProjection from \"../Core/WebMercatorProjection.js\";\r\nimport createTaskProcessorWorker from \"./createTaskProcessorWorker.js\";\r\n\r\nvar maxShort = 32767;\r\n\r\nvar cartesian3Scratch = new Cartesian3();\r\nvar scratchMinimum = new Cartesian3();\r\nvar scratchMaximum = new Cartesian3();\r\nvar cartographicScratch = new Cartographic();\r\nvar toPack = new Cartesian2();\r\nvar scratchNormal = new Cartesian3();\r\nvar scratchToENU = new Matrix4();\r\nvar scratchFromENU = new Matrix4();\r\n\r\nfunction createVerticesFromQuantizedTerrainMesh(\r\n  parameters,\r\n  transferableObjects\r\n) {\r\n  var quantizedVertices = parameters.quantizedVertices;\r\n  var quantizedVertexCount = quantizedVertices.length / 3;\r\n  var octEncodedNormals = parameters.octEncodedNormals;\r\n  var edgeVertexCount =\r\n    parameters.westIndices.length +\r\n    parameters.eastIndices.length +\r\n    parameters.southIndices.length +\r\n    parameters.northIndices.length;\r\n  var includeWebMercatorT = parameters.includeWebMercatorT;\r\n\r\n  var rectangle = Rectangle.clone(parameters.rectangle);\r\n  var west = rectangle.west;\r\n  var south = rectangle.south;\r\n  var east = rectangle.east;\r\n  var north = rectangle.north;\r\n\r\n  var ellipsoid = Ellipsoid.clone(parameters.ellipsoid);\r\n\r\n  var exaggeration = parameters.exaggeration;\r\n  var minimumHeight = parameters.minimumHeight * exaggeration;\r\n  var maximumHeight = parameters.maximumHeight * exaggeration;\r\n\r\n  var center = parameters.relativeToCenter;\r\n  var fromENU = Transforms.eastNorthUpToFixedFrame(center, ellipsoid);\r\n  var toENU = Matrix4.inverseTransformation(fromENU, new Matrix4());\r\n\r\n  var southMercatorY;\r\n  var oneOverMercatorHeight;\r\n  if (includeWebMercatorT) {\r\n    southMercatorY = WebMercatorProjection.geodeticLatitudeToMercatorAngle(\r\n      south\r\n    );\r\n    oneOverMercatorHeight =\r\n      1.0 /\r\n      (WebMercatorProjection.geodeticLatitudeToMercatorAngle(north) -\r\n        southMercatorY);\r\n  }\r\n\r\n  var uBuffer = quantizedVertices.subarray(0, quantizedVertexCount);\r\n  var vBuffer = quantizedVertices.subarray(\r\n    quantizedVertexCount,\r\n    2 * quantizedVertexCount\r\n  );\r\n  var heightBuffer = quantizedVertices.subarray(\r\n    quantizedVertexCount * 2,\r\n    3 * quantizedVertexCount\r\n  );\r\n  var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n  var uvs = new Array(quantizedVertexCount);\r\n  var heights = new Array(quantizedVertexCount);\r\n  var positions = new Array(quantizedVertexCount);\r\n  var webMercatorTs = includeWebMercatorT\r\n    ? new Array(quantizedVertexCount)\r\n    : [];\r\n\r\n  var minimum = scratchMinimum;\r\n  minimum.x = Number.POSITIVE_INFINITY;\r\n  minimum.y = Number.POSITIVE_INFINITY;\r\n  minimum.z = Number.POSITIVE_INFINITY;\r\n\r\n  var maximum = scratchMaximum;\r\n  maximum.x = Number.NEGATIVE_INFINITY;\r\n  maximum.y = Number.NEGATIVE_INFINITY;\r\n  maximum.z = Number.NEGATIVE_INFINITY;\r\n\r\n  var minLongitude = Number.POSITIVE_INFINITY;\r\n  var maxLongitude = Number.NEGATIVE_INFINITY;\r\n  var minLatitude = Number.POSITIVE_INFINITY;\r\n  var maxLatitude = Number.NEGATIVE_INFINITY;\r\n\r\n  for (var i = 0; i < quantizedVertexCount; ++i) {\r\n    var rawU = uBuffer[i];\r\n    var rawV = vBuffer[i];\r\n\r\n    var u = rawU / maxShort;\r\n    var v = rawV / maxShort;\r\n    var height = CesiumMath.lerp(\r\n      minimumHeight,\r\n      maximumHeight,\r\n      heightBuffer[i] / maxShort\r\n    );\r\n\r\n    cartographicScratch.longitude = CesiumMath.lerp(west, east, u);\r\n    cartographicScratch.latitude = CesiumMath.lerp(south, north, v);\r\n    cartographicScratch.height = height;\r\n\r\n    minLongitude = Math.min(cartographicScratch.longitude, minLongitude);\r\n    maxLongitude = Math.max(cartographicScratch.longitude, maxLongitude);\r\n    minLatitude = Math.min(cartographicScratch.latitude, minLatitude);\r\n    maxLatitude = Math.max(cartographicScratch.latitude, maxLatitude);\r\n\r\n    var position = ellipsoid.cartographicToCartesian(cartographicScratch);\r\n\r\n    uvs[i] = new Cartesian2(u, v);\r\n    heights[i] = height;\r\n    positions[i] = position;\r\n\r\n    if (includeWebMercatorT) {\r\n      webMercatorTs[i] =\r\n        (WebMercatorProjection.geodeticLatitudeToMercatorAngle(\r\n          cartographicScratch.latitude\r\n        ) -\r\n          southMercatorY) *\r\n        oneOverMercatorHeight;\r\n    }\r\n\r\n    Matrix4.multiplyByPoint(toENU, position, cartesian3Scratch);\r\n\r\n    Cartesian3.minimumByComponent(cartesian3Scratch, minimum, minimum);\r\n    Cartesian3.maximumByComponent(cartesian3Scratch, maximum, maximum);\r\n  }\r\n\r\n  var westIndicesSouthToNorth = copyAndSort(parameters.westIndices, function (\r\n    a,\r\n    b\r\n  ) {\r\n    return uvs[a].y - uvs[b].y;\r\n  });\r\n  var eastIndicesNorthToSouth = copyAndSort(parameters.eastIndices, function (\r\n    a,\r\n    b\r\n  ) {\r\n    return uvs[b].y - uvs[a].y;\r\n  });\r\n  var southIndicesEastToWest = copyAndSort(parameters.southIndices, function (\r\n    a,\r\n    b\r\n  ) {\r\n    return uvs[b].x - uvs[a].x;\r\n  });\r\n  var northIndicesWestToEast = copyAndSort(parameters.northIndices, function (\r\n    a,\r\n    b\r\n  ) {\r\n    return uvs[a].x - uvs[b].x;\r\n  });\r\n\r\n  var orientedBoundingBox;\r\n  var boundingSphere;\r\n\r\n  if (exaggeration !== 1.0) {\r\n    // Bounding volumes need to be recomputed since the tile payload assumes no exaggeration.\r\n    boundingSphere = BoundingSphere.fromPoints(positions);\r\n    orientedBoundingBox = OrientedBoundingBox.fromRectangle(\r\n      rectangle,\r\n      minimumHeight,\r\n      maximumHeight,\r\n      ellipsoid\r\n    );\r\n  }\r\n\r\n  var occludeePointInScaledSpace;\r\n  if (exaggeration !== 1.0 || minimumHeight < 0.0) {\r\n    // Horizon culling point needs to be recomputed since the tile payload assumes no exaggeration.\r\n    var occluder = new EllipsoidalOccluder(ellipsoid);\r\n    occludeePointInScaledSpace = occluder.computeHorizonCullingPointPossiblyUnderEllipsoid(\r\n      center,\r\n      positions,\r\n      minimumHeight\r\n    );\r\n  }\r\n\r\n  var hMin = minimumHeight;\r\n  hMin = Math.min(\r\n    hMin,\r\n    findMinMaxSkirts(\r\n      parameters.westIndices,\r\n      parameters.westSkirtHeight,\r\n      heights,\r\n      uvs,\r\n      rectangle,\r\n      ellipsoid,\r\n      toENU,\r\n      minimum,\r\n      maximum\r\n    )\r\n  );\r\n  hMin = Math.min(\r\n    hMin,\r\n    findMinMaxSkirts(\r\n      parameters.southIndices,\r\n      parameters.southSkirtHeight,\r\n      heights,\r\n      uvs,\r\n      rectangle,\r\n      ellipsoid,\r\n      toENU,\r\n      minimum,\r\n      maximum\r\n    )\r\n  );\r\n  hMin = Math.min(\r\n    hMin,\r\n    findMinMaxSkirts(\r\n      parameters.eastIndices,\r\n      parameters.eastSkirtHeight,\r\n      heights,\r\n      uvs,\r\n      rectangle,\r\n      ellipsoid,\r\n      toENU,\r\n      minimum,\r\n      maximum\r\n    )\r\n  );\r\n  hMin = Math.min(\r\n    hMin,\r\n    findMinMaxSkirts(\r\n      parameters.northIndices,\r\n      parameters.northSkirtHeight,\r\n      heights,\r\n      uvs,\r\n      rectangle,\r\n      ellipsoid,\r\n      toENU,\r\n      minimum,\r\n      maximum\r\n    )\r\n  );\r\n\r\n  var aaBox = new AxisAlignedBoundingBox(minimum, maximum, center);\r\n  var encoding = new TerrainEncoding(\r\n    aaBox,\r\n    hMin,\r\n    maximumHeight,\r\n    fromENU,\r\n    hasVertexNormals,\r\n    includeWebMercatorT\r\n  );\r\n  var vertexStride = encoding.getStride();\r\n  var size =\r\n    quantizedVertexCount * vertexStride + edgeVertexCount * vertexStride;\r\n  var vertexBuffer = new Float32Array(size);\r\n\r\n  var bufferIndex = 0;\r\n  for (var j = 0; j < quantizedVertexCount; ++j) {\r\n    if (hasVertexNormals) {\r\n      var n = j * 2.0;\r\n      toPack.x = octEncodedNormals[n];\r\n      toPack.y = octEncodedNormals[n + 1];\r\n\r\n      if (exaggeration !== 1.0) {\r\n        var normal = AttributeCompression.octDecode(\r\n          toPack.x,\r\n          toPack.y,\r\n          scratchNormal\r\n        );\r\n        var fromENUNormal = Transforms.eastNorthUpToFixedFrame(\r\n          positions[j],\r\n          ellipsoid,\r\n          scratchFromENU\r\n        );\r\n        var toENUNormal = Matrix4.inverseTransformation(\r\n          fromENUNormal,\r\n          scratchToENU\r\n        );\r\n\r\n        Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n        normal.z *= exaggeration;\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        AttributeCompression.octEncode(normal, toPack);\r\n      }\r\n    }\r\n\r\n    bufferIndex = encoding.encode(\r\n      vertexBuffer,\r\n      bufferIndex,\r\n      positions[j],\r\n      uvs[j],\r\n      heights[j],\r\n      toPack,\r\n      webMercatorTs[j]\r\n    );\r\n  }\r\n\r\n  var edgeTriangleCount = Math.max(0, (edgeVertexCount - 4) * 2);\r\n  var indexBufferLength = parameters.indices.length + edgeTriangleCount * 3;\r\n  var indexBuffer = IndexDatatype.createTypedArray(\r\n    quantizedVertexCount + edgeVertexCount,\r\n    indexBufferLength\r\n  );\r\n  indexBuffer.set(parameters.indices, 0);\r\n\r\n  var percentage = 0.0001;\r\n  var lonOffset = (maxLongitude - minLongitude) * percentage;\r\n  var latOffset = (maxLatitude - minLatitude) * percentage;\r\n  var westLongitudeOffset = -lonOffset;\r\n  var westLatitudeOffset = 0.0;\r\n  var eastLongitudeOffset = lonOffset;\r\n  var eastLatitudeOffset = 0.0;\r\n  var northLongitudeOffset = 0.0;\r\n  var northLatitudeOffset = latOffset;\r\n  var southLongitudeOffset = 0.0;\r\n  var southLatitudeOffset = -latOffset;\r\n\r\n  // Add skirts.\r\n  var vertexBufferIndex = quantizedVertexCount * vertexStride;\r\n  addSkirt(\r\n    vertexBuffer,\r\n    vertexBufferIndex,\r\n    westIndicesSouthToNorth,\r\n    encoding,\r\n    heights,\r\n    uvs,\r\n    octEncodedNormals,\r\n    ellipsoid,\r\n    rectangle,\r\n    parameters.westSkirtHeight,\r\n    exaggeration,\r\n    southMercatorY,\r\n    oneOverMercatorHeight,\r\n    westLongitudeOffset,\r\n    westLatitudeOffset\r\n  );\r\n  vertexBufferIndex += parameters.westIndices.length * vertexStride;\r\n  addSkirt(\r\n    vertexBuffer,\r\n    vertexBufferIndex,\r\n    southIndicesEastToWest,\r\n    encoding,\r\n    heights,\r\n    uvs,\r\n    octEncodedNormals,\r\n    ellipsoid,\r\n    rectangle,\r\n    parameters.southSkirtHeight,\r\n    exaggeration,\r\n    southMercatorY,\r\n    oneOverMercatorHeight,\r\n    southLongitudeOffset,\r\n    southLatitudeOffset\r\n  );\r\n  vertexBufferIndex += parameters.southIndices.length * vertexStride;\r\n  addSkirt(\r\n    vertexBuffer,\r\n    vertexBufferIndex,\r\n    eastIndicesNorthToSouth,\r\n    encoding,\r\n    heights,\r\n    uvs,\r\n    octEncodedNormals,\r\n    ellipsoid,\r\n    rectangle,\r\n    parameters.eastSkirtHeight,\r\n    exaggeration,\r\n    southMercatorY,\r\n    oneOverMercatorHeight,\r\n    eastLongitudeOffset,\r\n    eastLatitudeOffset\r\n  );\r\n  vertexBufferIndex += parameters.eastIndices.length * vertexStride;\r\n  addSkirt(\r\n    vertexBuffer,\r\n    vertexBufferIndex,\r\n    northIndicesWestToEast,\r\n    encoding,\r\n    heights,\r\n    uvs,\r\n    octEncodedNormals,\r\n    ellipsoid,\r\n    rectangle,\r\n    parameters.northSkirtHeight,\r\n    exaggeration,\r\n    southMercatorY,\r\n    oneOverMercatorHeight,\r\n    northLongitudeOffset,\r\n    northLatitudeOffset\r\n  );\r\n\r\n  TerrainProvider.addSkirtIndices(\r\n    westIndicesSouthToNorth,\r\n    southIndicesEastToWest,\r\n    eastIndicesNorthToSouth,\r\n    northIndicesWestToEast,\r\n    quantizedVertexCount,\r\n    indexBuffer,\r\n    parameters.indices.length\r\n  );\r\n\r\n  transferableObjects.push(vertexBuffer.buffer, indexBuffer.buffer);\r\n\r\n  return {\r\n    vertices: vertexBuffer.buffer,\r\n    indices: indexBuffer.buffer,\r\n    westIndicesSouthToNorth: westIndicesSouthToNorth,\r\n    southIndicesEastToWest: southIndicesEastToWest,\r\n    eastIndicesNorthToSouth: eastIndicesNorthToSouth,\r\n    northIndicesWestToEast: northIndicesWestToEast,\r\n    vertexStride: vertexStride,\r\n    center: center,\r\n    minimumHeight: minimumHeight,\r\n    maximumHeight: maximumHeight,\r\n    boundingSphere: boundingSphere,\r\n    orientedBoundingBox: orientedBoundingBox,\r\n    occludeePointInScaledSpace: occludeePointInScaledSpace,\r\n    encoding: encoding,\r\n    indexCountWithoutSkirts: parameters.indices.length,\r\n  };\r\n}\r\n\r\nfunction findMinMaxSkirts(\r\n  edgeIndices,\r\n  edgeHeight,\r\n  heights,\r\n  uvs,\r\n  rectangle,\r\n  ellipsoid,\r\n  toENU,\r\n  minimum,\r\n  maximum\r\n) {\r\n  var hMin = Number.POSITIVE_INFINITY;\r\n\r\n  var north = rectangle.north;\r\n  var south = rectangle.south;\r\n  var east = rectangle.east;\r\n  var west = rectangle.west;\r\n\r\n  if (east < west) {\r\n    east += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  var length = edgeIndices.length;\r\n  for (var i = 0; i < length; ++i) {\r\n    var index = edgeIndices[i];\r\n    var h = heights[index];\r\n    var uv = uvs[index];\r\n\r\n    cartographicScratch.longitude = CesiumMath.lerp(west, east, uv.x);\r\n    cartographicScratch.latitude = CesiumMath.lerp(south, north, uv.y);\r\n    cartographicScratch.height = h - edgeHeight;\r\n\r\n    var position = ellipsoid.cartographicToCartesian(\r\n      cartographicScratch,\r\n      cartesian3Scratch\r\n    );\r\n    Matrix4.multiplyByPoint(toENU, position, position);\r\n\r\n    Cartesian3.minimumByComponent(position, minimum, minimum);\r\n    Cartesian3.maximumByComponent(position, maximum, maximum);\r\n\r\n    hMin = Math.min(hMin, cartographicScratch.height);\r\n  }\r\n  return hMin;\r\n}\r\n\r\nfunction addSkirt(\r\n  vertexBuffer,\r\n  vertexBufferIndex,\r\n  edgeVertices,\r\n  encoding,\r\n  heights,\r\n  uvs,\r\n  octEncodedNormals,\r\n  ellipsoid,\r\n  rectangle,\r\n  skirtLength,\r\n  exaggeration,\r\n  southMercatorY,\r\n  oneOverMercatorHeight,\r\n  longitudeOffset,\r\n  latitudeOffset\r\n) {\r\n  var hasVertexNormals = defined(octEncodedNormals);\r\n\r\n  var north = rectangle.north;\r\n  var south = rectangle.south;\r\n  var east = rectangle.east;\r\n  var west = rectangle.west;\r\n\r\n  if (east < west) {\r\n    east += CesiumMath.TWO_PI;\r\n  }\r\n\r\n  var length = edgeVertices.length;\r\n  for (var i = 0; i < length; ++i) {\r\n    var index = edgeVertices[i];\r\n    var h = heights[index];\r\n    var uv = uvs[index];\r\n\r\n    cartographicScratch.longitude =\r\n      CesiumMath.lerp(west, east, uv.x) + longitudeOffset;\r\n    cartographicScratch.latitude =\r\n      CesiumMath.lerp(south, north, uv.y) + latitudeOffset;\r\n    cartographicScratch.height = h - skirtLength;\r\n\r\n    var position = ellipsoid.cartographicToCartesian(\r\n      cartographicScratch,\r\n      cartesian3Scratch\r\n    );\r\n\r\n    if (hasVertexNormals) {\r\n      var n = index * 2.0;\r\n      toPack.x = octEncodedNormals[n];\r\n      toPack.y = octEncodedNormals[n + 1];\r\n\r\n      if (exaggeration !== 1.0) {\r\n        var normal = AttributeCompression.octDecode(\r\n          toPack.x,\r\n          toPack.y,\r\n          scratchNormal\r\n        );\r\n        var fromENUNormal = Transforms.eastNorthUpToFixedFrame(\r\n          cartesian3Scratch,\r\n          ellipsoid,\r\n          scratchFromENU\r\n        );\r\n        var toENUNormal = Matrix4.inverseTransformation(\r\n          fromENUNormal,\r\n          scratchToENU\r\n        );\r\n\r\n        Matrix4.multiplyByPointAsVector(toENUNormal, normal, normal);\r\n        normal.z *= exaggeration;\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        Matrix4.multiplyByPointAsVector(fromENUNormal, normal, normal);\r\n        Cartesian3.normalize(normal, normal);\r\n\r\n        AttributeCompression.octEncode(normal, toPack);\r\n      }\r\n    }\r\n\r\n    var webMercatorT;\r\n    if (encoding.hasWebMercatorT) {\r\n      webMercatorT =\r\n        (WebMercatorProjection.geodeticLatitudeToMercatorAngle(\r\n          cartographicScratch.latitude\r\n        ) -\r\n          southMercatorY) *\r\n        oneOverMercatorHeight;\r\n    }\r\n\r\n    vertexBufferIndex = encoding.encode(\r\n      vertexBuffer,\r\n      vertexBufferIndex,\r\n      position,\r\n      uv,\r\n      cartographicScratch.height,\r\n      toPack,\r\n      webMercatorT\r\n    );\r\n  }\r\n}\r\n\r\nfunction copyAndSort(typedArray, comparator) {\r\n  var copy;\r\n  if (typeof typedArray.slice === \"function\") {\r\n    copy = typedArray.slice();\r\n    if (typeof copy.sort !== \"function\") {\r\n      // Sliced typed array isn't sortable, so we can't use it.\r\n      copy = undefined;\r\n    }\r\n  }\r\n\r\n  if (!defined(copy)) {\r\n    copy = Array.prototype.slice.call(typedArray);\r\n  }\r\n\r\n  copy.sort(comparator);\r\n\r\n  return copy;\r\n}\r\nexport default createTaskProcessorWorker(\r\n  createVerticesFromQuantizedTerrainMesh\r\n);\r\n"],"names":["DeveloperError","CesiumMath","defined","IndexDatatype","Cartesian3","Cartographic","Cartesian2","Matrix4","Rectangle","Ellipsoid","Transforms","WebMercatorProjection","BoundingSphere","OrientedBoundingBox","EllipsoidalOccluder","AxisAlignedBoundingBox","TerrainEncoding","AttributeCompression"],"mappings":"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"}