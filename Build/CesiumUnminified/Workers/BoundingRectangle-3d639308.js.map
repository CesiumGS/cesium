{"version":3,"file":"BoundingRectangle-3d639308.js","sources":["../../../../Source/Core/BoundingRectangle.js"],"sourcesContent":["import Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport Check from \"./Check.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport GeographicProjection from \"./GeographicProjection.js\";\r\nimport Intersect from \"./Intersect.js\";\r\nimport Rectangle from \"./Rectangle.js\";\r\n\r\n/**\r\n * A bounding rectangle given by a corner, width and height.\r\n * @alias BoundingRectangle\r\n * @constructor\r\n *\r\n * @param {Number} [x=0.0] The x coordinate of the rectangle.\r\n * @param {Number} [y=0.0] The y coordinate of the rectangle.\r\n * @param {Number} [width=0.0] The width of the rectangle.\r\n * @param {Number} [height=0.0] The height of the rectangle.\r\n *\r\n * @see BoundingSphere\r\n * @see Packable\r\n */\r\nfunction BoundingRectangle(x, y, width, height) {\r\n  /**\r\n   * The x coordinate of the rectangle.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.x = defaultValue(x, 0.0);\r\n\r\n  /**\r\n   * The y coordinate of the rectangle.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.y = defaultValue(y, 0.0);\r\n\r\n  /**\r\n   * The width of the rectangle.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.width = defaultValue(width, 0.0);\r\n\r\n  /**\r\n   * The height of the rectangle.\r\n   * @type {Number}\r\n   * @default 0.0\r\n   */\r\n  this.height = defaultValue(height, 0.0);\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nBoundingRectangle.packedLength = 4;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {BoundingRectangle} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nBoundingRectangle.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"value\", value);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  array[startingIndex++] = value.x;\r\n  array[startingIndex++] = value.y;\r\n  array[startingIndex++] = value.width;\r\n  array[startingIndex] = value.height;\r\n\r\n  return array;\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {BoundingRectangle} [result] The object into which to store the result.\r\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n */\r\nBoundingRectangle.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.defined(\"array\", array);\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  if (!defined(result)) {\r\n    result = new BoundingRectangle();\r\n  }\r\n  result.x = array[startingIndex++];\r\n  result.y = array[startingIndex++];\r\n  result.width = array[startingIndex++];\r\n  result.height = array[startingIndex];\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes a bounding rectangle enclosing the list of 2D points.\r\n * The rectangle is oriented with the corner at the bottom left.\r\n *\r\n * @param {Cartesian2[]} positions List of points that the bounding rectangle will enclose.  Each point must have <code>x</code> and <code>y</code> properties.\r\n * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n */\r\nBoundingRectangle.fromPoints = function (positions, result) {\r\n  if (!defined(result)) {\r\n    result = new BoundingRectangle();\r\n  }\r\n\r\n  if (!defined(positions) || positions.length === 0) {\r\n    result.x = 0;\r\n    result.y = 0;\r\n    result.width = 0;\r\n    result.height = 0;\r\n    return result;\r\n  }\r\n\r\n  var length = positions.length;\r\n\r\n  var minimumX = positions[0].x;\r\n  var minimumY = positions[0].y;\r\n\r\n  var maximumX = positions[0].x;\r\n  var maximumY = positions[0].y;\r\n\r\n  for (var i = 1; i < length; i++) {\r\n    var p = positions[i];\r\n    var x = p.x;\r\n    var y = p.y;\r\n\r\n    minimumX = Math.min(x, minimumX);\r\n    maximumX = Math.max(x, maximumX);\r\n    minimumY = Math.min(y, minimumY);\r\n    maximumY = Math.max(y, maximumY);\r\n  }\r\n\r\n  result.x = minimumX;\r\n  result.y = minimumY;\r\n  result.width = maximumX - minimumX;\r\n  result.height = maximumY - minimumY;\r\n  return result;\r\n};\r\n\r\nvar defaultProjection = new GeographicProjection();\r\nvar fromRectangleLowerLeft = new Cartographic();\r\nvar fromRectangleUpperRight = new Cartographic();\r\n/**\r\n * Computes a bounding rectangle from a rectangle.\r\n *\r\n * @param {Rectangle} rectangle The valid rectangle used to create a bounding rectangle.\r\n * @param {Object} [projection=GeographicProjection] The projection used to project the rectangle into 2D.\r\n * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n */\r\nBoundingRectangle.fromRectangle = function (rectangle, projection, result) {\r\n  if (!defined(result)) {\r\n    result = new BoundingRectangle();\r\n  }\r\n\r\n  if (!defined(rectangle)) {\r\n    result.x = 0;\r\n    result.y = 0;\r\n    result.width = 0;\r\n    result.height = 0;\r\n    return result;\r\n  }\r\n\r\n  projection = defaultValue(projection, defaultProjection);\r\n\r\n  var lowerLeft = projection.project(\r\n    Rectangle.southwest(rectangle, fromRectangleLowerLeft)\r\n  );\r\n  var upperRight = projection.project(\r\n    Rectangle.northeast(rectangle, fromRectangleUpperRight)\r\n  );\r\n\r\n  Cartesian2.subtract(upperRight, lowerLeft, upperRight);\r\n\r\n  result.x = lowerLeft.x;\r\n  result.y = lowerLeft.y;\r\n  result.width = upperRight.x;\r\n  result.height = upperRight.y;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Duplicates a BoundingRectangle instance.\r\n *\r\n * @param {BoundingRectangle} rectangle The bounding rectangle to duplicate.\r\n * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided. (Returns undefined if rectangle is undefined)\r\n */\r\nBoundingRectangle.clone = function (rectangle, result) {\r\n  if (!defined(rectangle)) {\r\n    return undefined;\r\n  }\r\n\r\n  if (!defined(result)) {\r\n    return new BoundingRectangle(\r\n      rectangle.x,\r\n      rectangle.y,\r\n      rectangle.width,\r\n      rectangle.height\r\n    );\r\n  }\r\n\r\n  result.x = rectangle.x;\r\n  result.y = rectangle.y;\r\n  result.width = rectangle.width;\r\n  result.height = rectangle.height;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes a bounding rectangle that is the union of the left and right bounding rectangles.\r\n *\r\n * @param {BoundingRectangle} left A rectangle to enclose in bounding rectangle.\r\n * @param {BoundingRectangle} right A rectangle to enclose in a bounding rectangle.\r\n * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n */\r\nBoundingRectangle.union = function (left, right, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  if (!defined(result)) {\r\n    result = new BoundingRectangle();\r\n  }\r\n\r\n  var lowerLeftX = Math.min(left.x, right.x);\r\n  var lowerLeftY = Math.min(left.y, right.y);\r\n  var upperRightX = Math.max(left.x + left.width, right.x + right.width);\r\n  var upperRightY = Math.max(left.y + left.height, right.y + right.height);\r\n\r\n  result.x = lowerLeftX;\r\n  result.y = lowerLeftY;\r\n  result.width = upperRightX - lowerLeftX;\r\n  result.height = upperRightY - lowerLeftY;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes a bounding rectangle by enlarging the provided rectangle until it contains the provided point.\r\n *\r\n * @param {BoundingRectangle} rectangle A rectangle to expand.\r\n * @param {Cartesian2} point A point to enclose in a bounding rectangle.\r\n * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n */\r\nBoundingRectangle.expand = function (rectangle, point, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"rectangle\", rectangle);\r\n  Check.typeOf.object(\"point\", point);\r\n  //>>includeEnd('debug');\r\n\r\n  result = BoundingRectangle.clone(rectangle, result);\r\n\r\n  var width = point.x - result.x;\r\n  var height = point.y - result.y;\r\n\r\n  if (width > result.width) {\r\n    result.width = width;\r\n  } else if (width < 0) {\r\n    result.width -= width;\r\n    result.x = point.x;\r\n  }\r\n\r\n  if (height > result.height) {\r\n    result.height = height;\r\n  } else if (height < 0) {\r\n    result.height -= height;\r\n    result.y = point.y;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Determines if two rectangles intersect.\r\n *\r\n * @param {BoundingRectangle} left A rectangle to check for intersection.\r\n * @param {BoundingRectangle} right The other rectangle to check for intersection.\r\n * @returns {Intersect} <code>Intersect.INTERSECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\r\n */\r\nBoundingRectangle.intersect = function (left, right) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  Check.typeOf.object(\"left\", left);\r\n  Check.typeOf.object(\"right\", right);\r\n  //>>includeEnd('debug');\r\n\r\n  var leftX = left.x;\r\n  var leftY = left.y;\r\n  var rightX = right.x;\r\n  var rightY = right.y;\r\n  if (\r\n    !(\r\n      leftX > rightX + right.width ||\r\n      leftX + left.width < rightX ||\r\n      leftY + left.height < rightY ||\r\n      leftY > rightY + right.height\r\n    )\r\n  ) {\r\n    return Intersect.INTERSECTING;\r\n  }\r\n\r\n  return Intersect.OUTSIDE;\r\n};\r\n\r\n/**\r\n * Compares the provided BoundingRectangles componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {BoundingRectangle} [left] The first BoundingRectangle.\r\n * @param {BoundingRectangle} [right] The second BoundingRectangle.\r\n * @returns {Boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\r\n */\r\nBoundingRectangle.equals = function (left, right) {\r\n  return (\r\n    left === right ||\r\n    (defined(left) &&\r\n      defined(right) &&\r\n      left.x === right.x &&\r\n      left.y === right.y &&\r\n      left.width === right.width &&\r\n      left.height === right.height)\r\n  );\r\n};\r\n\r\n/**\r\n * Duplicates this BoundingRectangle instance.\r\n *\r\n * @param {BoundingRectangle} [result] The object onto which to store the result.\r\n * @returns {BoundingRectangle} The modified result parameter or a new BoundingRectangle instance if one was not provided.\r\n */\r\nBoundingRectangle.prototype.clone = function (result) {\r\n  return BoundingRectangle.clone(this, result);\r\n};\r\n\r\n/**\r\n * Determines if this rectangle intersects with another.\r\n *\r\n * @param {BoundingRectangle} right A rectangle to check for intersection.\r\n * @returns {Intersect} <code>Intersect.INTERSECTING</code> if the rectangles intersect, <code>Intersect.OUTSIDE</code> otherwise.\r\n */\r\nBoundingRectangle.prototype.intersect = function (right) {\r\n  return BoundingRectangle.intersect(this, right);\r\n};\r\n\r\n/**\r\n * Compares this BoundingRectangle against the provided BoundingRectangle componentwise and returns\r\n * <code>true</code> if they are equal, <code>false</code> otherwise.\r\n *\r\n * @param {BoundingRectangle} [right] The right hand side BoundingRectangle.\r\n * @returns {Boolean} <code>true</code> if they are equal, <code>false</code> otherwise.\r\n */\r\nBoundingRectangle.prototype.equals = function (right) {\r\n  return BoundingRectangle.equals(this, right);\r\n};\r\nexport default BoundingRectangle;\r\n"],"names":["defaultValue","Check","defined","GeographicProjection","Cartographic","Rectangle","Cartesian2","Intersect"],"mappings":"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"}