{"version":3,"file":"CylinderGeometry-5c50c5ca.js","sources":["../../../../Source/Core/CylinderGeometry.js"],"sourcesContent":["import arrayFill from \"./arrayFill.js\";\r\nimport BoundingSphere from \"./BoundingSphere.js\";\r\nimport Cartesian2 from \"./Cartesian2.js\";\r\nimport Cartesian3 from \"./Cartesian3.js\";\r\nimport ComponentDatatype from \"./ComponentDatatype.js\";\r\nimport CylinderGeometryLibrary from \"./CylinderGeometryLibrary.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Geometry from \"./Geometry.js\";\r\nimport GeometryAttribute from \"./GeometryAttribute.js\";\r\nimport GeometryAttributes from \"./GeometryAttributes.js\";\r\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\r\nimport IndexDatatype from \"./IndexDatatype.js\";\r\nimport CesiumMath from \"./Math.js\";\r\nimport PrimitiveType from \"./PrimitiveType.js\";\r\nimport VertexFormat from \"./VertexFormat.js\";\r\n\r\nvar radiusScratch = new Cartesian2();\r\nvar normalScratch = new Cartesian3();\r\nvar bitangentScratch = new Cartesian3();\r\nvar tangentScratch = new Cartesian3();\r\nvar positionScratch = new Cartesian3();\r\n\r\n/**\r\n * A description of a cylinder.\r\n *\r\n * @alias CylinderGeometry\r\n * @constructor\r\n *\r\n * @param {Object} options Object with the following properties:\r\n * @param {Number} options.length The length of the cylinder.\r\n * @param {Number} options.topRadius The radius of the top of the cylinder.\r\n * @param {Number} options.bottomRadius The radius of the bottom of the cylinder.\r\n * @param {Number} [options.slices=128] The number of edges around the perimeter of the cylinder.\r\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\r\n *\r\n * @exception {DeveloperError} options.slices must be greater than or equal to 3.\r\n *\r\n * @see CylinderGeometry.createGeometry\r\n *\r\n * @example\r\n * // create cylinder geometry\r\n * var cylinder = new Cesium.CylinderGeometry({\r\n *     length: 200000,\r\n *     topRadius: 80000,\r\n *     bottomRadius: 200000,\r\n * });\r\n * var geometry = Cesium.CylinderGeometry.createGeometry(cylinder);\r\n */\r\nfunction CylinderGeometry(options) {\r\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\r\n\r\n  var length = options.length;\r\n  var topRadius = options.topRadius;\r\n  var bottomRadius = options.bottomRadius;\r\n  var vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\r\n  var slices = defaultValue(options.slices, 128);\r\n\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(length)) {\r\n    throw new DeveloperError(\"options.length must be defined.\");\r\n  }\r\n  if (!defined(topRadius)) {\r\n    throw new DeveloperError(\"options.topRadius must be defined.\");\r\n  }\r\n  if (!defined(bottomRadius)) {\r\n    throw new DeveloperError(\"options.bottomRadius must be defined.\");\r\n  }\r\n  if (slices < 3) {\r\n    throw new DeveloperError(\r\n      \"options.slices must be greater than or equal to 3.\"\r\n    );\r\n  }\r\n  if (\r\n    defined(options.offsetAttribute) &&\r\n    options.offsetAttribute === GeometryOffsetAttribute.TOP\r\n  ) {\r\n    throw new DeveloperError(\r\n      \"GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.\"\r\n    );\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  this._length = length;\r\n  this._topRadius = topRadius;\r\n  this._bottomRadius = bottomRadius;\r\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\r\n  this._slices = slices;\r\n  this._offsetAttribute = options.offsetAttribute;\r\n  this._workerName = \"createCylinderGeometry\";\r\n}\r\n\r\n/**\r\n * The number of elements used to pack the object into an array.\r\n * @type {Number}\r\n */\r\nCylinderGeometry.packedLength = VertexFormat.packedLength + 5;\r\n\r\n/**\r\n * Stores the provided instance into the provided array.\r\n *\r\n * @param {CylinderGeometry} value The value to pack.\r\n * @param {Number[]} array The array to pack into.\r\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\r\n *\r\n * @returns {Number[]} The array that was packed into\r\n */\r\nCylinderGeometry.pack = function (value, array, startingIndex) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(value)) {\r\n    throw new DeveloperError(\"value is required\");\r\n  }\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  array[startingIndex++] = value._length;\r\n  array[startingIndex++] = value._topRadius;\r\n  array[startingIndex++] = value._bottomRadius;\r\n  array[startingIndex++] = value._slices;\r\n  array[startingIndex] = defaultValue(value._offsetAttribute, -1);\r\n\r\n  return array;\r\n};\r\n\r\nvar scratchVertexFormat = new VertexFormat();\r\nvar scratchOptions = {\r\n  vertexFormat: scratchVertexFormat,\r\n  length: undefined,\r\n  topRadius: undefined,\r\n  bottomRadius: undefined,\r\n  slices: undefined,\r\n  offsetAttribute: undefined,\r\n};\r\n\r\n/**\r\n * Retrieves an instance from a packed array.\r\n *\r\n * @param {Number[]} array The packed array.\r\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\r\n * @param {CylinderGeometry} [result] The object into which to store the result.\r\n * @returns {CylinderGeometry} The modified result parameter or a new CylinderGeometry instance if one was not provided.\r\n */\r\nCylinderGeometry.unpack = function (array, startingIndex, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(array)) {\r\n    throw new DeveloperError(\"array is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  startingIndex = defaultValue(startingIndex, 0);\r\n\r\n  var vertexFormat = VertexFormat.unpack(\r\n    array,\r\n    startingIndex,\r\n    scratchVertexFormat\r\n  );\r\n  startingIndex += VertexFormat.packedLength;\r\n\r\n  var length = array[startingIndex++];\r\n  var topRadius = array[startingIndex++];\r\n  var bottomRadius = array[startingIndex++];\r\n  var slices = array[startingIndex++];\r\n  var offsetAttribute = array[startingIndex];\r\n\r\n  if (!defined(result)) {\r\n    scratchOptions.length = length;\r\n    scratchOptions.topRadius = topRadius;\r\n    scratchOptions.bottomRadius = bottomRadius;\r\n    scratchOptions.slices = slices;\r\n    scratchOptions.offsetAttribute =\r\n      offsetAttribute === -1 ? undefined : offsetAttribute;\r\n    return new CylinderGeometry(scratchOptions);\r\n  }\r\n\r\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\r\n  result._length = length;\r\n  result._topRadius = topRadius;\r\n  result._bottomRadius = bottomRadius;\r\n  result._slices = slices;\r\n  result._offsetAttribute =\r\n    offsetAttribute === -1 ? undefined : offsetAttribute;\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Computes the geometric representation of a cylinder, including its vertices, indices, and a bounding sphere.\r\n *\r\n * @param {CylinderGeometry} cylinderGeometry A description of the cylinder.\r\n * @returns {Geometry|undefined} The computed vertices and indices.\r\n */\r\nCylinderGeometry.createGeometry = function (cylinderGeometry) {\r\n  var length = cylinderGeometry._length;\r\n  var topRadius = cylinderGeometry._topRadius;\r\n  var bottomRadius = cylinderGeometry._bottomRadius;\r\n  var vertexFormat = cylinderGeometry._vertexFormat;\r\n  var slices = cylinderGeometry._slices;\r\n\r\n  if (\r\n    length <= 0 ||\r\n    topRadius < 0 ||\r\n    bottomRadius < 0 ||\r\n    (topRadius === 0 && bottomRadius === 0)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  var twoSlices = slices + slices;\r\n  var threeSlices = slices + twoSlices;\r\n  var numVertices = twoSlices + twoSlices;\r\n\r\n  var positions = CylinderGeometryLibrary.computePositions(\r\n    length,\r\n    topRadius,\r\n    bottomRadius,\r\n    slices,\r\n    true\r\n  );\r\n\r\n  var st = vertexFormat.st ? new Float32Array(numVertices * 2) : undefined;\r\n  var normals = vertexFormat.normal\r\n    ? new Float32Array(numVertices * 3)\r\n    : undefined;\r\n  var tangents = vertexFormat.tangent\r\n    ? new Float32Array(numVertices * 3)\r\n    : undefined;\r\n  var bitangents = vertexFormat.bitangent\r\n    ? new Float32Array(numVertices * 3)\r\n    : undefined;\r\n\r\n  var i;\r\n  var computeNormal =\r\n    vertexFormat.normal || vertexFormat.tangent || vertexFormat.bitangent;\r\n\r\n  if (computeNormal) {\r\n    var computeTangent = vertexFormat.tangent || vertexFormat.bitangent;\r\n\r\n    var normalIndex = 0;\r\n    var tangentIndex = 0;\r\n    var bitangentIndex = 0;\r\n\r\n    var theta = Math.atan2(bottomRadius - topRadius, length);\r\n    var normal = normalScratch;\r\n    normal.z = Math.sin(theta);\r\n    var normalScale = Math.cos(theta);\r\n    var tangent = tangentScratch;\r\n    var bitangent = bitangentScratch;\r\n\r\n    for (i = 0; i < slices; i++) {\r\n      var angle = (i / slices) * CesiumMath.TWO_PI;\r\n      var x = normalScale * Math.cos(angle);\r\n      var y = normalScale * Math.sin(angle);\r\n      if (computeNormal) {\r\n        normal.x = x;\r\n        normal.y = y;\r\n\r\n        if (computeTangent) {\r\n          tangent = Cartesian3.normalize(\r\n            Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent),\r\n            tangent\r\n          );\r\n        }\r\n\r\n        if (vertexFormat.normal) {\r\n          normals[normalIndex++] = normal.x;\r\n          normals[normalIndex++] = normal.y;\r\n          normals[normalIndex++] = normal.z;\r\n          normals[normalIndex++] = normal.x;\r\n          normals[normalIndex++] = normal.y;\r\n          normals[normalIndex++] = normal.z;\r\n        }\r\n\r\n        if (vertexFormat.tangent) {\r\n          tangents[tangentIndex++] = tangent.x;\r\n          tangents[tangentIndex++] = tangent.y;\r\n          tangents[tangentIndex++] = tangent.z;\r\n          tangents[tangentIndex++] = tangent.x;\r\n          tangents[tangentIndex++] = tangent.y;\r\n          tangents[tangentIndex++] = tangent.z;\r\n        }\r\n\r\n        if (vertexFormat.bitangent) {\r\n          bitangent = Cartesian3.normalize(\r\n            Cartesian3.cross(normal, tangent, bitangent),\r\n            bitangent\r\n          );\r\n          bitangents[bitangentIndex++] = bitangent.x;\r\n          bitangents[bitangentIndex++] = bitangent.y;\r\n          bitangents[bitangentIndex++] = bitangent.z;\r\n          bitangents[bitangentIndex++] = bitangent.x;\r\n          bitangents[bitangentIndex++] = bitangent.y;\r\n          bitangents[bitangentIndex++] = bitangent.z;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < slices; i++) {\r\n      if (vertexFormat.normal) {\r\n        normals[normalIndex++] = 0;\r\n        normals[normalIndex++] = 0;\r\n        normals[normalIndex++] = -1;\r\n      }\r\n      if (vertexFormat.tangent) {\r\n        tangents[tangentIndex++] = 1;\r\n        tangents[tangentIndex++] = 0;\r\n        tangents[tangentIndex++] = 0;\r\n      }\r\n      if (vertexFormat.bitangent) {\r\n        bitangents[bitangentIndex++] = 0;\r\n        bitangents[bitangentIndex++] = -1;\r\n        bitangents[bitangentIndex++] = 0;\r\n      }\r\n    }\r\n\r\n    for (i = 0; i < slices; i++) {\r\n      if (vertexFormat.normal) {\r\n        normals[normalIndex++] = 0;\r\n        normals[normalIndex++] = 0;\r\n        normals[normalIndex++] = 1;\r\n      }\r\n      if (vertexFormat.tangent) {\r\n        tangents[tangentIndex++] = 1;\r\n        tangents[tangentIndex++] = 0;\r\n        tangents[tangentIndex++] = 0;\r\n      }\r\n      if (vertexFormat.bitangent) {\r\n        bitangents[bitangentIndex++] = 0;\r\n        bitangents[bitangentIndex++] = 1;\r\n        bitangents[bitangentIndex++] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  var numIndices = 12 * slices - 12;\r\n  var indices = IndexDatatype.createTypedArray(numVertices, numIndices);\r\n  var index = 0;\r\n  var j = 0;\r\n  for (i = 0; i < slices - 1; i++) {\r\n    indices[index++] = j;\r\n    indices[index++] = j + 2;\r\n    indices[index++] = j + 3;\r\n\r\n    indices[index++] = j;\r\n    indices[index++] = j + 3;\r\n    indices[index++] = j + 1;\r\n\r\n    j += 2;\r\n  }\r\n\r\n  indices[index++] = twoSlices - 2;\r\n  indices[index++] = 0;\r\n  indices[index++] = 1;\r\n  indices[index++] = twoSlices - 2;\r\n  indices[index++] = 1;\r\n  indices[index++] = twoSlices - 1;\r\n\r\n  for (i = 1; i < slices - 1; i++) {\r\n    indices[index++] = twoSlices + i + 1;\r\n    indices[index++] = twoSlices + i;\r\n    indices[index++] = twoSlices;\r\n  }\r\n\r\n  for (i = 1; i < slices - 1; i++) {\r\n    indices[index++] = threeSlices;\r\n    indices[index++] = threeSlices + i;\r\n    indices[index++] = threeSlices + i + 1;\r\n  }\r\n\r\n  var textureCoordIndex = 0;\r\n  if (vertexFormat.st) {\r\n    var rad = Math.max(topRadius, bottomRadius);\r\n    for (i = 0; i < numVertices; i++) {\r\n      var position = Cartesian3.fromArray(positions, i * 3, positionScratch);\r\n      st[textureCoordIndex++] = (position.x + rad) / (2.0 * rad);\r\n      st[textureCoordIndex++] = (position.y + rad) / (2.0 * rad);\r\n    }\r\n  }\r\n\r\n  var attributes = new GeometryAttributes();\r\n  if (vertexFormat.position) {\r\n    attributes.position = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.DOUBLE,\r\n      componentsPerAttribute: 3,\r\n      values: positions,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.normal) {\r\n    attributes.normal = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: normals,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.tangent) {\r\n    attributes.tangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: tangents,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.bitangent) {\r\n    attributes.bitangent = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 3,\r\n      values: bitangents,\r\n    });\r\n  }\r\n\r\n  if (vertexFormat.st) {\r\n    attributes.st = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.FLOAT,\r\n      componentsPerAttribute: 2,\r\n      values: st,\r\n    });\r\n  }\r\n\r\n  radiusScratch.x = length * 0.5;\r\n  radiusScratch.y = Math.max(bottomRadius, topRadius);\r\n\r\n  var boundingSphere = new BoundingSphere(\r\n    Cartesian3.ZERO,\r\n    Cartesian2.magnitude(radiusScratch)\r\n  );\r\n\r\n  if (defined(cylinderGeometry._offsetAttribute)) {\r\n    length = positions.length;\r\n    var applyOffset = new Uint8Array(length / 3);\r\n    var offsetValue =\r\n      cylinderGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\r\n        ? 0\r\n        : 1;\r\n    arrayFill(applyOffset, offsetValue);\r\n    attributes.applyOffset = new GeometryAttribute({\r\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\r\n      componentsPerAttribute: 1,\r\n      values: applyOffset,\r\n    });\r\n  }\r\n\r\n  return new Geometry({\r\n    attributes: attributes,\r\n    indices: indices,\r\n    primitiveType: PrimitiveType.TRIANGLES,\r\n    boundingSphere: boundingSphere,\r\n    offsetAttribute: cylinderGeometry._offsetAttribute,\r\n  });\r\n};\r\n\r\nvar unitCylinderGeometry;\r\n\r\n/**\r\n * Returns the geometric representation of a unit cylinder, including its vertices, indices, and a bounding sphere.\r\n * @returns {Geometry} The computed vertices and indices.\r\n *\r\n * @private\r\n */\r\nCylinderGeometry.getUnitCylinder = function () {\r\n  if (!defined(unitCylinderGeometry)) {\r\n    unitCylinderGeometry = CylinderGeometry.createGeometry(\r\n      new CylinderGeometry({\r\n        topRadius: 1.0,\r\n        bottomRadius: 1.0,\r\n        length: 1.0,\r\n        vertexFormat: VertexFormat.POSITION_ONLY,\r\n      })\r\n    );\r\n  }\r\n  return unitCylinderGeometry;\r\n};\r\nexport default CylinderGeometry;\r\n"],"names":["Cartesian2","Cartesian3","defaultValue","VertexFormat","defined","DeveloperError","GeometryOffsetAttribute","CylinderGeometryLibrary","CesiumMath","IndexDatatype","GeometryAttributes","GeometryAttribute","ComponentDatatype","BoundingSphere","arrayFill","Geometry","PrimitiveType"],"mappings":"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"}