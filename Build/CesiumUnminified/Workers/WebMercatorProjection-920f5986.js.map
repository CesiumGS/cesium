{"version":3,"file":"WebMercatorProjection-920f5986.js","sources":["../../../../Source/Core/WebMercatorProjection.js"],"sourcesContent":["import Cartesian3 from \"./Cartesian3.js\";\r\nimport Cartographic from \"./Cartographic.js\";\r\nimport defaultValue from \"./defaultValue.js\";\r\nimport defined from \"./defined.js\";\r\nimport DeveloperError from \"./DeveloperError.js\";\r\nimport Ellipsoid from \"./Ellipsoid.js\";\r\nimport CesiumMath from \"./Math.js\";\r\n\r\n/**\r\n * The map projection used by Google Maps, Bing Maps, and most of ArcGIS Online, EPSG:3857.  This\r\n * projection use longitude and latitude expressed with the WGS84 and transforms them to Mercator using\r\n * the spherical (rather than ellipsoidal) equations.\r\n *\r\n * @alias WebMercatorProjection\r\n * @constructor\r\n *\r\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.WGS84] The ellipsoid.\r\n *\r\n * @see GeographicProjection\r\n */\r\nfunction WebMercatorProjection(ellipsoid) {\r\n  this._ellipsoid = defaultValue(ellipsoid, Ellipsoid.WGS84);\r\n  this._semimajorAxis = this._ellipsoid.maximumRadius;\r\n  this._oneOverSemimajorAxis = 1.0 / this._semimajorAxis;\r\n}\r\n\r\nObject.defineProperties(WebMercatorProjection.prototype, {\r\n  /**\r\n   * Gets the {@link Ellipsoid}.\r\n   *\r\n   * @memberof WebMercatorProjection.prototype\r\n   *\r\n   * @type {Ellipsoid}\r\n   * @readonly\r\n   */\r\n  ellipsoid: {\r\n    get: function () {\r\n      return this._ellipsoid;\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Converts a Mercator angle, in the range -PI to PI, to a geodetic latitude\r\n * in the range -PI/2 to PI/2.\r\n *\r\n * @param {Number} mercatorAngle The angle to convert.\r\n * @returns {Number} The geodetic latitude in radians.\r\n */\r\nWebMercatorProjection.mercatorAngleToGeodeticLatitude = function (\r\n  mercatorAngle\r\n) {\r\n  return CesiumMath.PI_OVER_TWO - 2.0 * Math.atan(Math.exp(-mercatorAngle));\r\n};\r\n\r\n/**\r\n * Converts a geodetic latitude in radians, in the range -PI/2 to PI/2, to a Mercator\r\n * angle in the range -PI to PI.\r\n *\r\n * @param {Number} latitude The geodetic latitude in radians.\r\n * @returns {Number} The Mercator angle.\r\n */\r\nWebMercatorProjection.geodeticLatitudeToMercatorAngle = function (latitude) {\r\n  // Clamp the latitude coordinate to the valid Mercator bounds.\r\n  if (latitude > WebMercatorProjection.MaximumLatitude) {\r\n    latitude = WebMercatorProjection.MaximumLatitude;\r\n  } else if (latitude < -WebMercatorProjection.MaximumLatitude) {\r\n    latitude = -WebMercatorProjection.MaximumLatitude;\r\n  }\r\n  var sinLatitude = Math.sin(latitude);\r\n  return 0.5 * Math.log((1.0 + sinLatitude) / (1.0 - sinLatitude));\r\n};\r\n\r\n/**\r\n * The maximum latitude (both North and South) supported by a Web Mercator\r\n * (EPSG:3857) projection.  Technically, the Mercator projection is defined\r\n * for any latitude up to (but not including) 90 degrees, but it makes sense\r\n * to cut it off sooner because it grows exponentially with increasing latitude.\r\n * The logic behind this particular cutoff value, which is the one used by\r\n * Google Maps, Bing Maps, and Esri, is that it makes the projection\r\n * square.  That is, the rectangle is equal in the X and Y directions.\r\n *\r\n * The constant value is computed by calling:\r\n *    WebMercatorProjection.mercatorAngleToGeodeticLatitude(Math.PI)\r\n *\r\n * @type {Number}\r\n */\r\nWebMercatorProjection.MaximumLatitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(\r\n  Math.PI\r\n);\r\n\r\n/**\r\n * Converts geodetic ellipsoid coordinates, in radians, to the equivalent Web Mercator\r\n * X, Y, Z coordinates expressed in meters and returned in a {@link Cartesian3}.  The height\r\n * is copied unmodified to the Z coordinate.\r\n *\r\n * @param {Cartographic} cartographic The cartographic coordinates in radians.\r\n * @param {Cartesian3} [result] The instance to which to copy the result, or undefined if a\r\n *        new instance should be created.\r\n * @returns {Cartesian3} The equivalent web mercator X, Y, Z coordinates, in meters.\r\n */\r\nWebMercatorProjection.prototype.project = function (cartographic, result) {\r\n  var semimajorAxis = this._semimajorAxis;\r\n  var x = cartographic.longitude * semimajorAxis;\r\n  var y =\r\n    WebMercatorProjection.geodeticLatitudeToMercatorAngle(\r\n      cartographic.latitude\r\n    ) * semimajorAxis;\r\n  var z = cartographic.height;\r\n\r\n  if (!defined(result)) {\r\n    return new Cartesian3(x, y, z);\r\n  }\r\n\r\n  result.x = x;\r\n  result.y = y;\r\n  result.z = z;\r\n  return result;\r\n};\r\n\r\n/**\r\n * Converts Web Mercator X, Y coordinates, expressed in meters, to a {@link Cartographic}\r\n * containing geodetic ellipsoid coordinates.  The Z coordinate is copied unmodified to the\r\n * height.\r\n *\r\n * @param {Cartesian3} cartesian The web mercator Cartesian position to unrproject with height (z) in meters.\r\n * @param {Cartographic} [result] The instance to which to copy the result, or undefined if a\r\n *        new instance should be created.\r\n * @returns {Cartographic} The equivalent cartographic coordinates.\r\n */\r\nWebMercatorProjection.prototype.unproject = function (cartesian, result) {\r\n  //>>includeStart('debug', pragmas.debug);\r\n  if (!defined(cartesian)) {\r\n    throw new DeveloperError(\"cartesian is required\");\r\n  }\r\n  //>>includeEnd('debug');\r\n\r\n  var oneOverEarthSemimajorAxis = this._oneOverSemimajorAxis;\r\n  var longitude = cartesian.x * oneOverEarthSemimajorAxis;\r\n  var latitude = WebMercatorProjection.mercatorAngleToGeodeticLatitude(\r\n    cartesian.y * oneOverEarthSemimajorAxis\r\n  );\r\n  var height = cartesian.z;\r\n\r\n  if (!defined(result)) {\r\n    return new Cartographic(longitude, latitude, height);\r\n  }\r\n\r\n  result.longitude = longitude;\r\n  result.latitude = latitude;\r\n  result.height = height;\r\n  return result;\r\n};\r\nexport default WebMercatorProjection;\r\n"],"names":["defaultValue","Ellipsoid","CesiumMath","defined","Cartesian3","DeveloperError","Cartographic"],"mappings":"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"}